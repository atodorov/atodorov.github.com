<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML5 | atodorov.org]]></title>
  <link href="http://atodorov.org/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2013-12-22T23:38:13+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Runs Your Start-up - Useful at Night]]></title>
    <link href="http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night/"/>
    <updated>2013-03-27T12:00:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night</id>
    <content type="html"><![CDATA[<p><img style="float: left; margin-right: 10px;" src="http://atodorov.org/images/startup/usefulatnight.png" alt="Useful at Night logo" /></p>

<p><a href="http://usefulatnight.com/">Useful at Night</a> is a mobile guide for nightlife
empowering real time discovery of cool locations, allowing nightlife players
to identify opinion leaders. Through geo-location and data aggregation
capabilities, the application allows useful exploration of cities, places and
parties.</p>

<p><a href="http://about.me/velev">Evelin Velev</a> was kind enough to share what technologies
his team uses to run their star-up.</p>

<br/>


<h2>Main Technologies</h2>

<p>Main technologies used are Node.js, HTML 5 and NoSQL.</p>

<p>Back-end application servers are written in Node.js and hosted at Heroku,
coupled with <a href="http://www.redistogo.com/">RedisToGo</a> for caching and
CouchDB served by <a href="https://cloudant.com/">Cloudant</a> for storage.</p>

<p>Their mobile front-end supports both iOS and Android platforms and is built using
HTML5 and a homemade UI framework called RAPID. There are some native parts developed
in Objective-C and Java respectively.</p>

<p>In addition <em>Useful at Night</em> uses MongoDB for metrics data with a custom metrics solution
written in Node.js; Amazon S3 for storing different assets; and a custom storage solution
called Divan (simple CouchDB like).</p>

<h2>Why Not Something Else?</h2>

<p><blockquote><p>We chose Node.js for our application servers, because it enables us to build efficient<br/>distributed systems while sharing significant amounts of code between client and server.<br/>Things get really interesting when you couple Node.js with Redis for data structure<br/>sharing and message passing, as the two technologies play very well together.</p></p><p><p>We chose CouchDB as our main back-end because it is the most schema-less data-store that<br/>supports secondary indexing. Once you get fluent with its map-reduce views, you can<br/>compute an index out of practically anything. For comparison, even MongoDB requires<br/>that you design your documents as to enable certain indexing patterns. Put otherwise,<br/>we'd say CouchDB is a data-store that enables truly lean engineering - we have never had<br/>to re-bake or migrate our data since day one, while we're constantly experimenting with<br/>new ways to index, aggregate and query it.</p></p><p><p>We chose HTML5 as our front-end technology, because it's cross-platform and because we<br/>believe it's ... almost ready. Things are still really problematic on Android, but iOS<br/>boasts a gorgeous web presentation platform, and Windows 8 is also joining the game with<br/>a very good web engine. Obviously we're constantly running into issues and limitations,<br/>mostly related to the unfortunate fact that in spite of some recent developments,<br/>a web app is still mostly single threaded. However, we're getting there, and we're proud<br/>to say we're running a pretty graphically complex hybrid app with near-native GUI performance<br/>on the iPhone 4S and above.</p></blockquote></p>

<h2>Want More Info?</h2>

<p>If you'd like to hear more from <em>Useful at Night</em> please comment below. I will ask them
to follow this thread and reply to your questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Query String with JavaScript and HTML5]]></title>
    <link href="http://atodorov.org/blog/2013/01/28/remove-query-string-with-javascript-and-html5/"/>
    <updated>2013-01-28T15:52:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/01/28/remove-query-string-with-javascript-and-html5</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Query_string">query string</a> is the stuff after
the question mark in URLs.</p>

<p><img src="/images/url_w_qs.png" alt="&quot;URL with query string&quot;" /></p>

<h2>Why remove query strings?</h2>

<p>Two reasons: clean URLs and social media.</p>

<p>Clean URLs not only look better but they prevent users to see if you are tracking
where they came from. The picture above shows what the address bar
looks like after the user clicks a link in Feedburner. The high-lightened part is
what Google Analytics uses to distinguish Feedburner traffic from other types of
traffic. I don't want my users to see this.</p>

<p>As you know, social media sites give URLs a score, whether it is based on number of
bookmarks, reviews, comments, likes or whatever. Higher scores usually result in
increased traffic to your site. Query strings mess things up because <a href="http://www.dif.io">http://www.dif.io</a>
and <a href="http://www.dif.io/?query">http://www.dif.io/?query</a> are usually considered two different URLs. So instead
of having a high number of likes for your page you get several scores and never
make it to the headlines.</p>

<h2>JavaScript and HTML5 to the rescue</h2>

<p>Place this JavaScript code in the <code>&lt;head&gt;</code> section of your pages. Preferably near the top.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uri</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">uri</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">clean_uri</span> <span class="o">=</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">replaceState</span><span class="p">({},</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">clean_uri</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code will clean the URL in the browser address bar without reloading the page.
It works for HTML5 enabled browsers.</p>

<p>This works for me with
Firefox 10.0.12, Opera 12.02.1578 and Chrome 24.0.1312.56 under Linux. In fact I'm
using this snippet on this very own blog as well.</p>

<p><strong>Updated on 2013-01-30</strong></p>

<p>Here is another approach proposed by reader Kamen Mazdrashki:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">clean_uri</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">+</span> <span class="s2">&quot;//&quot;</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">var hash_pos = location.href.indexOf(&quot;#&quot;);</span>
</span><span class='line'><span class="cm">if (hash_pos &gt; 0) {</span>
</span><span class='line'><span class="cm">    var hash = location.href.substring(hash_pos, location.href.length);</span>
</span><span class='line'><span class="cm">    clean_uri += hash;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">replaceState</span><span class="p">({},</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">clean_uri</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you'd like to keep the hash tag aka named anchor aka fragment identifier at the end of the URL
then uncomment the commented section.</p>

<p>I've tested removing the hashtag from the URL. Firefox doesn't seem to scroll the page
to where I wanted but your experience may vary. I didn't try hard enough to
verify the results.</p>

<p>One question still remains though: Why would someone point the users to an URL which contains
named anchors and then remove them? I don't see a valid use case for this scenario. Do you?</p>
]]></content>
  </entry>
  
</feed>
