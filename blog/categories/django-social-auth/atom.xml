<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django-social-auth | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/django-social-auth/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-24T22:12:52+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[django-social-auth tip: Reminder of Login Provider]]></title>
    <link href="http://atodorov.org/blog/2013/03/14/django-social-auth-tip-reminder-of-login-provider/"/>
    <updated>2013-03-14T12:04:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/14/django-social-auth-tip-reminder-of-login-provider</id>
    <content type="html"><![CDATA[<p>Every now and then users forget their passwords. This is why I prefer using
OAuth and social network accounts like GitHub or Twitter. But what do you do
when somebody forgets which OAuth provider they used to login to your site?
Your website needs a reminder. This is how to implement one if using
django-social-auth.</p>

<h2>Back-end</h2>

<p>Create a similar view on your Django back-end</p>

<p>{% codeblock views.py lang:python %}
def ajax_social_auth_provider_reminder(request):</p>

<pre><code>"""
    Remind the user which social auth provider they used to login.
"""
if not request.POST:
    return HttpResponse("Not a POST", mimetype='text/plain', status=403)

email = request.POST.get('email', "")
email = email.strip()
if not email or (email.find("@") == -1):
    return HttpResponse("Invalid address!", mimetype='text/plain', status=400)

try:
    user = User.objects.filter(email=email, is_active=True).only('pk')[0]
except:
    return HttpResponse("No user with address '%s' found!" % email, mimetype='text/plain', status=400)

providers = []
for sa in UserSocialAuth.objects.filter(user=user.pk).only('provider'):
    providers.append(sa.provider.title())

if len(providers) &gt; 0:
    send_templated_mail(
        template_name='social_provider_reminder',
        from_email='Difio &lt;reminder@dif.io&gt;',
        recipient_list=[email],
        context={'providers' : providers},
    )
    return HttpResponse("Reminder sent to '%s'" % email, mimetype='text/plain', status=200)
else:
    return HttpResponse("User found but no social providers found!", mimetype='text/plain', status=400)
</code></pre>

<p>{% endcodeblock %}</p>

<p>This example assumes it is called via POST request which contains the email address.
All responses are handled at the front-end via JavaScript. If a user with the specified
email address exists this address will receive a reminder listing all social auth providers
associated with the user account.</p>

<h2>Front-end</h2>

<p>On the browser side I like to use <a href="http://dojotoolkit.org">Dojo</a>.
Here is a simple script which connects to a form and POSTs the data
back to the server.</p>

<p>{% codeblock lang:javascript %}
require(["dojo"]);
require(["dijit"]);</p>

<p>function sendReminderForm(){</p>

<pre><code>var form = dojo.byId("reminderForm");

dojo.connect(form, "onsubmit", function(event){
    dojo.stopEvent(event);
    dijit.byId("dlgForgot").hide();
    var xhrArgs = {
        form: form,
        handleAs: "text",
        load: function(data){alert(data);},
        error: function(error, ioargs){alert(ioargs.xhr.responseText);}
    };
    var deferred = dojo.xhrPost(xhrArgs);
});
</code></pre>

<p>}
dojo.ready(sendReminderForm);
{% endcodeblock %}</p>

<p>You can try this out at <a href="http://www.dif.io">Difio</a> and let me know how it works for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Twitter + django-social-auth == Hello New User]]></title>
    <link href="http://atodorov.org/blog/2013/03/07/python-twitter-django-social-auth-hello-new-user/"/>
    <updated>2013-03-07T21:47:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/07/python-twitter-django-social-auth-hello-new-user</id>
    <content type="html"><![CDATA[<p>I have been experimenting with the <a href="https://pypi.python.org/pypi/twitter">twitter</a>
module for Python and decided to combine it with
<a href="https://github.com/omab/django-social-auth">django-social-auth</a> to welcome new
users who join <a href="http://www.dif.io">Difio</a>. In this post I will show you how to
tweet on behalf of the user when they join your site and send them a welcome email.</p>

<h2>Configuration</h2>

<p>In django-social-auth the authentication workflow is handled by an operations
pipeline where custom functions can be added or default items can be removed to
provide custom behavior. This is how our pipeline looks:</p>

<p>{% codeblock settings.py lang:python %}
SOCIAL_AUTH_PIPELINE = (</p>

<pre><code>'social_auth.backends.pipeline.social.social_auth_user',
#'social_auth.backends.pipeline.associate.associate_by_email',
'social_auth.backends.pipeline.user.get_username',
'social_auth.backends.pipeline.user.create_user',
'social_auth.backends.pipeline.social.associate_user',
'social_auth.backends.pipeline.social.load_extra_data',
'social_auth.backends.pipeline.user.update_user_details',
'myproject.tasks.welcome_new_user'
</code></pre>

<p>)
{% endcodeblock %}</p>

<p>This is the default plus an additional method at the end to welcome new users.</p>

<p>You also have to create and configure a Twitter application so that users
can login with Twitter OAuth to your site.
<a href="http://django-social-auth.readthedocs.org/en/latest/backends/index.html">RTFM</a>
for more information on how to do this.</p>

<h2>Custom pipeline actions</h2>

<p>This is how the custom pipeline action should look:</p>

<p>{% codeblock myproject/tasks.py lang:python %}
from urlparse import parse_qs</p>

<p>def welcome_new_user(backend, user, social_user, is_new=False, new_association=False, *args, **kwargs):</p>

<pre><code>"""
    Part of SOCIAL_AUTH_PIPELINE. Works with django-social-auth==0.7.21 or newer
    @backend - social_auth.backends.twitter.TwitterBackend (or other) object
    @user - User (if is_new) or django.utils.functional.SimpleLazyObject (if new_association)
    @social_user - UserSocialAuth object
"""
if is_new:
    send_welcome_email.delay(user.email, user.first_name)

if backend.name == 'twitter':
    if is_new or new_association:
        access_token = social_user.extra_data['access_token']
        parsed_tokens = parse_qs(access_token)
        oauth_token = parsed_tokens['oauth_token'][0]
        oauth_secret = parsed_tokens['oauth_token_secret'][0]
        tweet_on_join.delay(oauth_token, oauth_secret)

return None
</code></pre>

<p>{% endcodeblock %}</p>

<p>This code works with django-social-auth==0.7.21 or newer. In older versions the
<code>new_association</code> parameter is missing as
<a href="https://groups.google.com/forum/?fromgroups=#!topic/django-social-auth/Nxf-0iRD27Y">I discovered</a>.
If you use an older version you won't be able to distinguish between newly created
accounts and ones which have associated another OAuth backend. You are warned!</p>

<h2>Tweet &amp; email</h2>

<p>Sending the welcome email is out of the scope of this post. I am using
<a href="https://github.com/bradwhittington/django-templated-email">django-templated-email</a>
to define how emails look and sending them via Amazon SES. See
<a href="/blog/2013/02/28/email-logging-django-redhat-openshift-amazon-ses/">Email Logging for Django on RedHat OpenShift With Amazon SES</a>
for more information on how to configure emailing with SES.</p>

<p>Here is how the Twitter code looks:</p>

<p>{% codeblock myproject/tasks.py lang:python %}</p>

<p>import twitter
from celery.task import task
from settings import TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET</p>

<p>@task
def tweet_on_join(oauth_token, oauth_secret):</p>

<pre><code>"""
    Tweet when the user is logged in for the first time or
    when new Twitter account is associated.

    @oauth_token - string
    @oauth_secret - string
"""
t = twitter.Twitter(
        auth=twitter.OAuth(
            oauth_token, oauth_secret,
            TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET
        )
    )
t.statuses.update(status='Started following open source changes at http://www.dif.io!')
</code></pre>

<p>{% endcodeblock %}</p>

<p>This will post a new tweet on behalf of the user, telling everyone they joined
your website!</p>

<p><strong>NOTE:</strong>
<code>tweet_on_join</code> and <code>send_welcome_email</code> are Celery tasks, not ordinary Python
functions. This has the advantage of being able to execute these actions async
and not slow down the user interface.</p>

<p>Are you doing something special when a user joins your website? Please share
your comments below. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Delete User Profiles with django-social-auth]]></title>
    <link href="http://atodorov.org/blog/2013/03/06/tip-delete-user-profiles-django-social-auth/"/>
    <updated>2013-03-06T21:02:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/06/tip-delete-user-profiles-django-social-auth</id>
    <content type="html"><![CDATA[<p>Common functionality for websites is the 'DELETE ACCOUNT' or 'DISABLE ACCOUNT'
button. This is how to implement it if using
<a href="https://github.com/omab/django-social-auth">django-social-auth</a>.</p>

<p>{% codeblock views.py lang:python %}
delete_objects_for_user(request.user.pk) # optional
UserSocialAuth.objects.filter(user=request.user).delete()
User.objects.filter(pk=request.user.pk).update(is_active=False, email=None)
return HttpResponseRedirect(reverse('django.contrib.auth.views.logout'))
{% endcodeblock %}</p>

<p>This snippet does the following:</p>

<ul>
<li>Delete (or archive) all objects for the current user;</li>
<li>Delete the social auth profile(s) because there is no way to disable them.
DSA will create new objects if the user logs in again;</li>
<li>Disable the <code>User</code> object. You could also delete it but mind foreign keys;</li>
<li>Clear the email for the <code>User</code> object - if a new user is created after deletion
we don't want duplicated email addresses in the database;</li>
<li>Finally redirect the user to the logout view.</li>
</ul>

]]></content>
  </entry>
  
</feed>
