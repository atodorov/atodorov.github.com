<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-09-23T13:03:32+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip: Collecting Emails - Webhooks for UserVoice and WordPress.com]]></title>
    <link href="http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress/"/>
    <updated>2014-07-12T23:15:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress</id>
    <content type="html"><![CDATA[<p>In my practice I like to use webhooks and integrate auxiliary services with
my internal processes or businesses. One of these is the collection of emails.
In this short article I'll show you an example of how to collect email addresses
from the comments of a WordPress.com blog and the UserVoice feedback/ticketing system.</p>

<h2>WordPress.com</h2>

<p>For your WordPress.com blog from the Admin Dashboard navigate to
Settings -> Webhooks and add a new webhook with action <code>comment_post</code>
and fields <code>comment_author</code>, <code>comment_author_email</code>. A simple
Django view that handles the input is shown below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_wp_comment_post</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hook</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;hook&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">hook</span> <span class="o">!=</span> <span class="s">&quot;comment_post&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">first_name</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">last_name</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;first_name&#39;</span> <span class="p">:</span> <span class="n">first_name</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;last_name&#39;</span> <span class="p">:</span> <span class="n">last_name</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author_email&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>UserVoice</h2>

<p>For UserVoice navigate to Admin Dashboard -> Settings -> Integrations ->
Service Hooks and add a custom web hook for the New Ticket notification.
Then use a sample code like that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_uservoice_new_ticket</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;event&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">event</span> <span class="o">!=</span> <span class="s">&quot;new_ticket&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;ticket&#39;</span><span class="p">][</span><span class="s">&#39;contact&#39;</span><span class="p">][</span><span class="s">&#39;email&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>store_user_details()</code> is a function which handles the email/name received in the webhook,
possibly adding them to a database or anything else.</p>

<p>I find webhooks extremely easy to setup and develop and used them whenever they are
supported by the service provider. What other services do you use webhooks for? Please
share your story in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: How to Build updates.img for Fedora]]></title>
    <link href="http://atodorov.org/blog/2014/02/07/tip-how-to-build-updates.img-for-fedora/"/>
    <updated>2014-02-07T11:01:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/02/07/tip-how-to-build-updates.img-for-fedora</id>
    <content type="html"><![CDATA[<p>Anaconda the Fedora, CentOS and Red Hat Enterprise Linux installer has the
capability to incorporate
<a href="https://fedoraproject.org/wiki/Anaconda/Updates">updates at runtime</a>.
These updates are generally distributed as an <code>updates.img</code> file. Here is how
to easily build one from a working installation tree.</p>

<p>Instead of using the git sources to build an updates.img I prefer using the SRPM
from the tree which I am installing. <strike>This way the resulting updates image will be
more consistent with the anaconda version already available in the tree. And in theory
everything you need to build it should already be available as well.</strike>
<strong>UPDATE 2014-02-08:</strong> You can also build the <code>updates.img</code> from the git source tree
which is shown at the bottom of this article.</p>

<p>The following steps work for me on a Fedora 20 system.</p>

<ul>
<li>Download the source RPM for anaconda from the tree and extract the sources to a working
directory. Then;</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>anaconda-20.25.16-1
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;initial import&quot;</span>
</span><span class='line'>git tag anaconda-20.25.16-1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>The above steps will create a local git repository and tag the initial contents before
modification. The tag is required later by the script which creates the updates image;</p></li>
<li><p>After making your changes commit them and from the top anaconda directory execute:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./scripts/makeupdates -t anaconda-20.25.16-1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also add RPM contents to the updates.img but you need to download the packages first:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yumdownloader python-coverage python-setuptools&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;./scripts/makeupdates -t anaconda-20.25.16-1 -a ~/python-coverage-3.7-1.fc20.x86_64.rpm -a ~/python-setuptools-1.4.2-1.fc20.noarch.rpm
</span><span class='line'>BUILDDIR /home/atodorov/anaconda-20.25.16-1
</span><span class='line'>Including anaconda
</span><span class='line'>2 RPMs added manually:
</span><span class='line'>python-setuptools-1.4.2-1.fc20.noarch.rpm
</span><span class='line'>python-coverage-3.7-1.fc20.x86_64.rpm
</span><span class='line'><span class="nb">cd</span> /home/atodorov/anaconda-20.25.16-1/updates &amp;amp;&amp;amp; rpm2cpio /home/atodorov/python-setuptools-1.4.2-1.fc20.noarch.rpm | cpio -dium
</span><span class='line'>3534 blocks
</span><span class='line'><span class="nb">cd</span> /home/atodorov/anaconda-20.25.16-1/updates &amp;amp;&amp;amp; rpm2cpio /home/atodorov/python-coverage-3.7-1.fc20.x86_64.rpm | cpio -dium
</span><span class='line'>1214 blocks
</span><span class='line'>&lt;stdin&gt; to &lt;stdout&gt; 4831 blocks&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;updates.img ready
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the above example I have only modified the top level anaconda file (<code>/usr/sbin/anaconda</code>
inside the installation environment) experimenting with
<a href="http://nedbatchelder.com/code/coverage/">python-coverage</a> integration.</p>

<p>You are done! Make the <code>updates.img</code> available to Anaconda and start using it!</p>

<p><strong>UPDATE 2014-02-08:</strong> If you prefer working with the anaconda source tree here's
how to do it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://git.fedorahosted.org/git/anaconda.git
</span><span class='line'><span class="nb">cd </span>anaconda/
</span><span class='line'>git checkout anaconda-20.25.16-1 -b my_feature-branch&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;... make changes ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git commit -a -m <span class="s2">&quot;Fixed something&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;./scripts/makeupdates -t anaconda-20.25.16-1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Tip: Shrinking EBS Root Volume Size]]></title>
    <link href="http://atodorov.org/blog/2014/02/07/aws-tip-shrinking-ebs-root-volume-size/"/>
    <updated>2014-02-07T00:23:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/02/07/aws-tip-shrinking-ebs-root-volume-size</id>
    <content type="html"><![CDATA[<p>Amazon's Elastic Block Store volumes are easy to use and expand but notoriously
hard to shrink once their size has grown. Here is my tip for shrinking EBS size
and saving some money from over-provisioned storage. I'm assuming that you want to
shrink the root volume which is on EBS.</p>

<ul>
<li>Write down the block device name for the root volume (/dev/sda1) - <em>from AWS console:
Instances; Select instance; Look at Details tab; See Root device or Block devices</em>;</li>
<li>Write down the availability zone of your instance - <em>from AWS console: Instances;
column Availability Zone</em>;</li>
<li>Stop instance;</li>
<li>Create snapshot of the root volume;</li>
<li>From the snapshot, create a second volume, in the <strong>same availability zone</strong> as
your instance (you will have to attach it later). This will be your pristine source;</li>
<li>Create new empty EBS volume (not based on a snapshot), with smaller size,
in the same availability zone - <em>from AWS console: Volumes; Create Volume;
Snapshot == No Snapshot</em>; <strong>IMPORTANT</strong> - size should be large enough to hold
all the files from the source file system (try <code>df -h</code> on the source first);</li>
<li>Attach both volumes to instance while taking note of the block devices names
you assign for them in the AWS console;</li>
</ul>


<p>For example: In my case <code>/dev/sdc1</code> is the source snapshot and <code>/dev/sdd1</code> is the
empty target.</p>

<ul>
<li>Start instance;</li>
<li>Optionally check the source file system with <code>e2fsck -f /dev/sdc1</code>;</li>
<li>Create a file system for the empty volume - <code>mkfs.ext4 /dev/sdd1</code>;</li>
<li>Mount volumes at <code>/source</code> and <code>/target</code> respectively;</li>
<li>Now sync the files: <code>rsync -aHAXxSP /source/ /target</code>. <strong>Note the missing slash (/)
after <code>/target</code></strong>. If you add it you will end up with files inside <code>/target/source/</code>
which you don't want;</li>
<li>Quickly verify the new directory structure with <code>ls -l /target</code>;</li>
<li>Unmount <code>/target</code>;</li>
<li>Optionally check the new file system for consistency <code>e2fsck -f /dev/sdd1</code>;</li>
<li><strong>IMPORTANT</strong> - check how <code>/boot/grub/grub.conf</code> specifies the root volume -
by UUID, by LABEL, by device name, etc. You will have to duplicate the same for the
new smaller volume or update <code>/target/boot/grub/grub.conf</code> to match the new volume.
Check <code>/target/etc/fstab</code> as well!</li>
</ul>


<p>In my case I had to <code>e2label /dev/sdd1 /</code> because both <code>grub.conf</code> and <code>fstab</code> were
using the device label.</p>

<ul>
<li>Shutdown the instance;</li>
<li>Detach all volumes;</li>
<li><strong>IMPORTANT</strong> - attach the new smaller volume to the instance using the same block device
name from the first step (e.g. <code>/dev/sda1</code>);</li>
<li>Start the instance and verify it is working correctly;</li>
<li>DELETE auxiliary volumes and snapshots so they don't take space and accumulate costs!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Cut Leading or Trailing Fields From Strings in Bash]]></title>
    <link href="http://atodorov.org/blog/2013/11/19/tip-cut-leading-or-trailing-fields-from-strings-in-bash/"/>
    <updated>2013-11-19T00:16:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/11/19/tip-cut-leading-or-trailing-fields-from-strings-in-bash</id>
    <content type="html"><![CDATA[<p>Today I was looking for a command sequence to cut a string in two by predefined
delimiter (e.g. like <code>cut</code> does). I wanted to get the last field only and all
fields but the last as separate variables.</p>

<p>The proposed solutions I've found suggested using <code>awk</code> but I don't like it.
Here's a simple solution using <code>cut</code> and <code>rev</code> which can extract arbitrary
field counts from the end of the string.</p>

<pre><code>$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f1 -d. | rev
org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f-2 -d. | rev
fedoraproject.org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f-3 -d. | rev
phx2.fedoraproject.org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f2- -d. | rev
buildvm-08.phx2.fedoraproject
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f3- -d. | rev
buildvm-08.phx2
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f4- -d. | rev
buildvm-08
</code></pre>

<p>The magic here is done by <code>rev</code> which reverses the order of characters in every
line. It comes with the <em>util-linux-ng</em> package.</p>

<p><strong>Note to Self:</strong> <em>util-linux-ng</em> appears to contain more useful commands which
I wasn't aware of. Need to RTFM a little bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Extending Btrfs Filesystem for Fedora Virtual Machine]]></title>
    <link href="http://atodorov.org/blog/2013/10/13/tip-extending-btrfs-filesystem-for-fedora-virtual-machine/"/>
    <updated>2013-10-13T14:53:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/10/13/tip-extending-btrfs-filesystem-for-fedora-virtual-machine</id>
    <content type="html"><![CDATA[<p>I was testing Fedora 20 inside a KVM guest this week when the disk
space run out. The system was configured to use Btrfs filesystem and this is how
to extend it.</p>

<p>First you have to extend the underlying guest storage. On the host I'm using LVM
so this is a no brainer:</p>

<pre><code># pvs
  PV                                                    VG              Fmt  Attr PSize   PFree  
  /dev/mapper/luks-f3f6cea1-baba-4aaf-bca8-33a0ec540369 vg_redbull_mini lvm2 a--  289,11g 134,11g

# lvs
  LV            VG              Attr      LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vm_fedora     vg_redbull_mini -wi-ao---  15,00g                                             

# lvextend -L +5G /dev/mapper/vg_redbull_mini-vm_fedora 
  Extending logical volume vm_fedora to 20,00 GiB
  Logical volume vm_fedora successfully resized

# lvs
  LV            VG              Attr      LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vm_fedora     vg_redbull_mini -wi-ao---  20,00g                                             

# pvs
  PV                                                    VG              Fmt  Attr PSize   PFree  
  /dev/mapper/luks-f3f6cea1-baba-4aaf-bca8-33a0ec540369 vg_redbull_mini lvm2 a--  289,11g 129,11g
</code></pre>

<p>On the VM we have a default Btrfs layout:</p>

<pre><code># blkid
/dev/vda1: UUID="410ee563-e701-42ff-9d5f-5805dd103e35" TYPE="ext4" PARTUUID="0000330f-01" 
/dev/vda2: UUID="f4addad4-a0fc-482e-ad5a-240864b76f09" TYPE="swap" PARTUUID="0000330f-02" 
/dev/vda3: LABEL="fedora" UUID="f0b589ce-061c-4ac3-826e-7f3f8c8a6d30" UUID_SUB="11aa8414-3ce1-4fe7-a506-9a4f91ba5c30" TYPE="btrfs" PARTUUID="0000330f-03" 

# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda3        13G   11G  1.4G  89% /
devtmpfs        996M     0  996M   0% /dev
tmpfs          1002M   80K 1002M   1% /dev/shm
tmpfs          1002M  668K 1002M   1% /run
tmpfs          1002M     0 1002M   0% /sys/fs/cgroup
tmpfs          1002M   16K 1002M   1% /tmp
/dev/vda3        13G   11G  1.4G  89% /home
/dev/vda1       477M   72M  376M  17% /boot
</code></pre>

<p>Now power-off (not reboot) and power-on the VM guest so that it sees the new size
of the underlying storage. See the fdisk header (line 9 below), vda is now 20GiB!</p>

<p>Before extending the filesystem you have to extend the underlying disk partition! This is the
trickiest part. Using fdisk or parted you have to delete the partition and add it again.
Make sure to use the <strong>SAME</strong> starting sector for the new partition (line 33)!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>fdisk /dev/vda&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Welcome to fdisk (util-linux 2.24-rc1).
</span><span class='line'>Changes will remain in memory only, until you decide to write them.
</span><span class='line'>Be careful before using the write command.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Command (m for help): p
</span><span class='line'>Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors
</span><span class='line'>Units: sectors of 1 * 512 = 512 bytes
</span><span class='line'>Sector size (logical/physical): 512 bytes / 512 bytes
</span><span class='line'>I/O size (minimum/optimal): 512 bytes / 512 bytes
</span><span class='line'>Disk label type: dos
</span><span class='line'>Disk identifier: 0x0000330f&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Device    Boot     Start       End   Blocks  Id System
</span><span class='line'>/dev/vda1 *         2048   1026047   512000  83 Linux
</span><span class='line'>/dev/vda2        1026048   5253119  2113536  82 Linux swap / Solaris
</span><span class='line'>/dev/vda3        5253120  31457279 13102080  83 Linux&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Command (m for help): d
</span><span class='line'>Partition number (1-3, default 3): 3&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Partition 3 is deleted&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Command (m for help): n&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Partition type:
</span><span class='line'>   p   primary (2 primary, 0 extended, 2 free)
</span><span class='line'>   e   extended
</span><span class='line'>Select (default p): p
</span><span class='line'>Partition number (3,4, default 3): 3
</span><span class='line'>First sector (5253120-41943039, default 5253120):
</span><span class='line'>Last sector, +sectors or +size{K,M,G,T,P} (5253120-41943039, default 41943039):&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Created a new partition 3 of type 'Linux' and of size 17,5 GiB.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Command (m for help): p
</span><span class='line'>Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors
</span><span class='line'>Units: sectors of 1 * 512 = 512 bytes
</span><span class='line'>Sector size (logical/physical): 512 bytes / 512 bytes
</span><span class='line'>I/O size (minimum/optimal): 512 bytes / 512 bytes
</span><span class='line'>Disk label type: dos
</span><span class='line'>Disk identifier: 0x0000330f&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Device    Boot     Start       End   Blocks  Id System
</span><span class='line'>/dev/vda1 *         2048   1026047   512000  83 Linux
</span><span class='line'>/dev/vda2        1026048   5253119  2113536  82 Linux swap / Solaris
</span><span class='line'>/dev/vda3        5253120  41943039 18344960  83 Linux&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Command (m for help): w&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>The partition table has been altered.
</span><span class='line'>Calling ioctl() to re-read partition table.
</span><span class='line'>Re-reading the partition table failed.: Device or resource busy&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8).&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>partprobe&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Error: Partition(s) 3 on /dev/vda have been written, but we have been unable to inform the kernel of the change, probably because it/they are in use.  As a result, the old partition(s) will remain in use.  You should reboot now before making further changes.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>reboot&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>See lines 36 and 49 above. The new partition has a greater size.
After reboot just resize the filesystem and verify the new space has been added</p>

<pre><code># btrfs filesystem resize max /
Resize '/' of 'max'

# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda3        18G   11G  6.4G  63% /
devtmpfs        996M     0  996M   0% /dev
tmpfs          1002M   80K 1002M   1% /dev/shm
tmpfs          1002M  660K 1002M   1% /run
tmpfs          1002M     0 1002M   0% /sys/fs/cgroup
tmpfs          1002M   16K 1002M   1% /tmp
/dev/vda3        18G   11G  6.4G  63% /home
/dev/vda1       477M   72M  376M  17% /boot
</code></pre>

<p>This is it, more disk space available for the virtual machine. Let me know how it works
for you.</p>
]]></content>
  </entry>
  
</feed>
