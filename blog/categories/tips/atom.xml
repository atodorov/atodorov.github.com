<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-24T22:12:52+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip: Cut Leading or Trailing Fields From Strings in Bash]]></title>
    <link href="http://atodorov.org/blog/2013/11/19/tip-cut-leading-or-trailing-fields-from-strings-in-bash/"/>
    <updated>2013-11-19T00:16:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/11/19/tip-cut-leading-or-trailing-fields-from-strings-in-bash</id>
    <content type="html"><![CDATA[<p>Today I was looking for a command sequence to cut a string in two by predefined
delimiter (e.g. like <code>cut</code> does). I wanted to get the last field only and all
fields but the last as separate variables.</p>

<p>The proposed solutions I've found suggested using <code>awk</code> but I don't like it.
Here's a simple solution using <code>cut</code> and <code>rev</code> which can extract arbitrary
field counts from the end of the string.</p>

<pre><code>$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f1 -d. | rev
org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f-2 -d. | rev
fedoraproject.org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f-3 -d. | rev
phx2.fedoraproject.org
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f2- -d. | rev
buildvm-08.phx2.fedoraproject
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f3- -d. | rev
buildvm-08.phx2
$ echo 'buildvm-08.phx2.fedoraproject.org' | rev | cut -f4- -d. | rev
buildvm-08
</code></pre>

<p>The magic here is done by <code>rev</code> which reverses the order of characters in every
line. It comes with the <em>util-linux-ng</em> package.</p>

<p><strong>Note to Self:</strong> <em>util-linux-ng</em> appears to contain more useful commands which
I wasn't aware of. Need to RTFM a little bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Extending Btrfs Filesystem for Fedora Virtual Machine]]></title>
    <link href="http://atodorov.org/blog/2013/10/13/tip-extending-btrfs-filesystem-for-fedora-virtual-machine/"/>
    <updated>2013-10-13T14:53:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/10/13/tip-extending-btrfs-filesystem-for-fedora-virtual-machine</id>
    <content type="html"><![CDATA[<p>I was testing Fedora 20 inside a KVM guest this week when the disk
space run out. The system was configured to use Btrfs filesystem and this is how
to extend it.</p>

<p>First you have to extend the underlying guest storage. On the host I'm using LVM
so this is a no brainer:</p>

<pre><code># pvs
  PV                                                    VG              Fmt  Attr PSize   PFree  
  /dev/mapper/luks-f3f6cea1-baba-4aaf-bca8-33a0ec540369 vg_redbull_mini lvm2 a--  289,11g 134,11g

# lvs
  LV            VG              Attr      LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vm_fedora     vg_redbull_mini -wi-ao---  15,00g                                             

# lvextend -L +5G /dev/mapper/vg_redbull_mini-vm_fedora 
  Extending logical volume vm_fedora to 20,00 GiB
  Logical volume vm_fedora successfully resized

# lvs
  LV            VG              Attr      LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vm_fedora     vg_redbull_mini -wi-ao---  20,00g                                             

# pvs
  PV                                                    VG              Fmt  Attr PSize   PFree  
  /dev/mapper/luks-f3f6cea1-baba-4aaf-bca8-33a0ec540369 vg_redbull_mini lvm2 a--  289,11g 129,11g
</code></pre>

<p>On the VM we have a default Btrfs layout:</p>

<pre><code># blkid
/dev/vda1: UUID="410ee563-e701-42ff-9d5f-5805dd103e35" TYPE="ext4" PARTUUID="0000330f-01" 
/dev/vda2: UUID="f4addad4-a0fc-482e-ad5a-240864b76f09" TYPE="swap" PARTUUID="0000330f-02" 
/dev/vda3: LABEL="fedora" UUID="f0b589ce-061c-4ac3-826e-7f3f8c8a6d30" UUID_SUB="11aa8414-3ce1-4fe7-a506-9a4f91ba5c30" TYPE="btrfs" PARTUUID="0000330f-03" 

# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda3        13G   11G  1.4G  89% /
devtmpfs        996M     0  996M   0% /dev
tmpfs          1002M   80K 1002M   1% /dev/shm
tmpfs          1002M  668K 1002M   1% /run
tmpfs          1002M     0 1002M   0% /sys/fs/cgroup
tmpfs          1002M   16K 1002M   1% /tmp
/dev/vda3        13G   11G  1.4G  89% /home
/dev/vda1       477M   72M  376M  17% /boot
</code></pre>

<p>Now power-off (not reboot) and power-on the VM guest so that it sees the new size
of the underlying storage. See the fdisk header (line 9 below), vda is now 20GiB!</p>

<p>Before extending the filesystem you have to extend the underlying disk partition! This is the
trickiest part. Using fdisk or parted you have to delete the partition and add it again.
Make sure to use the <strong>SAME</strong> starting sector for the new partition (line 33)!</p>

<p>{% codeblock %}</p>

<h1>fdisk /dev/vda</h1>

<p>Welcome to fdisk (util-linux 2.24-rc1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.</p>

<p>Command (m for help): p
Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x0000330f</p>

<p>Device    Boot     Start       End   Blocks  Id System
/dev/vda1 *         2048   1026047   512000  83 Linux
/dev/vda2        1026048   5253119  2113536  82 Linux swap / Solaris
/dev/vda3        5253120  31457279 13102080  83 Linux</p>

<p>Command (m for help): d
Partition number (1-3, default 3): 3</p>

<p>Partition 3 is deleted</p>

<p>Command (m for help): n</p>

<p>Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p): p
Partition number (3,4, default 3): 3
First sector (5253120-41943039, default 5253120):
Last sector, +sectors or +size{K,M,G,T,P} (5253120-41943039, default 41943039):</p>

<p>Created a new partition 3 of type 'Linux' and of size 17,5 GiB.</p>

<p>Command (m for help): p
Disk /dev/vda: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x0000330f</p>

<p>Device    Boot     Start       End   Blocks  Id System
/dev/vda1 *         2048   1026047   512000  83 Linux
/dev/vda2        1026048   5253119  2113536  82 Linux swap / Solaris
/dev/vda3        5253120  41943039 18344960  83 Linux</p>

<p>Command (m for help): w</p>

<p>The partition table has been altered.
Calling ioctl() to re-read partition table.
Re-reading the partition table failed.: Device or resource busy</p>

<p>The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8).</p>

<h1>partprobe</h1>

<p>Error: Partition(s) 3 on /dev/vda have been written, but we have been unable to inform the kernel of the change, probably because it/they are in use.  As a result, the old partition(s) will remain in use.  You should reboot now before making further changes.</p>

<h1>reboot</h1>

<p>{% endcodeblock %}</p>

<p>See lines 36 and 49 above. The new partition has a greater size.
After reboot just resize the filesystem and verify the new space has been added</p>

<pre><code># btrfs filesystem resize max /
Resize '/' of 'max'

# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda3        18G   11G  6.4G  63% /
devtmpfs        996M     0  996M   0% /dev
tmpfs          1002M   80K 1002M   1% /dev/shm
tmpfs          1002M  660K 1002M   1% /run
tmpfs          1002M     0 1002M   0% /sys/fs/cgroup
tmpfs          1002M   16K 1002M   1% /tmp
/dev/vda3        18G   11G  6.4G  63% /home
/dev/vda1       477M   72M  376M  17% /boot
</code></pre>

<p>This is it, more disk space available for the virtual machine. Let me know how it works
for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Installing Missing debuginfo Packages for ABRT]]></title>
    <link href="http://atodorov.org/blog/2013/10/12/tip-installing-missing-debuginfo-packages-for-abrt/"/>
    <updated>2013-10-12T14:38:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/10/12/tip-installing-missing-debuginfo-packages-for-abrt</id>
    <content type="html"><![CDATA[<p><img src="/images/reporting_disabled.png" title="Reporting disabled" alt="&quot;Reporting disabled&quot;" /></p>

<p>Every once in a while ABRT will tell you that reporting is disabled because
backtrace is unusable. What it means is that it can't read some of the debugging
symbols and the most likely reason for that is debuginfo packages are missing.</p>

<p>To install them first locate the directory containing the files for that particular
crash. Use the <code>executable</code> file to find out if you are looking into the correct
directory. Then use this one liner to install the missing debuginfo packages.</p>

<pre><code># pwd
/var/tmp/abrt/ccpp-2013-10-10-15:55:18-15533
# cat backtrace | grep lib | tr -s ' ' | cut -f4 -d' ' | sort | uniq | grep "/" | xargs rpm -qf --qf "%{name}\n" | xargs debuginfo-install -y
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: How to Find Your Red Hat Account Number]]></title>
    <link href="http://atodorov.org/blog/2013/08/23/how-to-find-your-red-hat-account-number/"/>
    <updated>2013-08-23T11:55:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/08/23/how-to-find-your-red-hat-account-number</id>
    <content type="html"><![CDATA[<p><img src="http://atodorov.org/images/redhat_account_number.png" style="float:left;display:inline-block;margin-right:10px;" /></p>

<p>One thing you need to know when ordering Red Hat subscriptions is your
account number. It is available in the drop down menu at the top right
corner after you login at <a href="https://access.redhat.com">https://access.redhat.com</a>.</p>

<p>New accounts don't have an account number. It will be generated after
the first subscription activation.</p>

<p>If you need to know more about Red Hat's ordering process just ask me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH from Linux to BlackBerry Z10]]></title>
    <link href="http://atodorov.org/blog/2013/07/19/ssh-from-linux-to-blackberry-z10/"/>
    <updated>2013-07-19T23:31:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/07/19/ssh-from-linux-to-blackberry-z10</id>
    <content type="html"><![CDATA[<p>You can SSH into a <a href="http://amzn.to/12y4ewJ">BlackBerry Z10</a> device even on Linux.
I'm using Red Hat Enterprise Linux 6 and here is how to establish the connection.</p>

<p>1) <a href="/blog/2013/07/17/tip-how-to-enable-usb-networking-between-blackberry-z10-and-red-hat-enterprise-linux-6/">Enable USB networking</a>
between your Linux desktop and the Z10;</p>

<p>2) Install the <a href="https://developer.blackberry.com/develop/platform_choice/ndk.html">Momentics IDE</a>.
You need it to create debug tokens and to start the SSH daemon on the device;</p>

<p>3) Obtain <a href="https://www.blackberry.com/SignedKeys/codesigning.html">signing keys</a>
and create a debug token by following the wizard in the IDE.
I just started a new project and followed the instructions;</p>

<p>4) Install debug token on device using the IDE. From <code>Window - Preferences</code> select
<code>Blackberry - Signing</code>. Just create and deploy the debug token on the device. Mine was
automatically discovered so I just had to follow the prompts;</p>

<p>5) Reboot and re-enable development mode (I'm not sure if this was necessary);</p>

<p>6) Generate a <strong>4096 bit</strong> key for SSH. Smaller keys won't work. You can use your
current key if it is 4096 bit;</p>

<p>{% codeblock lang:bash %}
$ ssh-keygen -t rsa -b 4096
Generating public/private rsa key pair.
Enter file in which to save the key (/home/atodorov/.ssh/id_rsa): /home/atodorov/.rim/testKey_4096_rsa
/home/atodorov/.rim/testKey_4096_rsa already exists.
Overwrite (y/n)? y
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/atodorov/.rim/testKey_4096_rsa.
Your public key has been saved in /home/atodorov/.rim/testKey_4096_rsa.pub.
The key fingerprint is:
77:73:55:03:e1:fc:5b:df:a6:e9:2c:b4:d4:1e:0c:b2 atodorov@redbull.mini
The key's randomart image is:
+--[ RSA 4096]----+
|             oo..|
|            o   o|
|             o  .|
|          . . .. |
|        S .oo+...|
|         .E.oo+ =|
|           o o o+|
|            o..+ |
|             o=  |
+-----------------+
{% endcodeblock %}</p>

<p>7) Update key permissions, since ssh complains:</p>

<pre><code>    $ chmod 600 ~/.rim/testKey_4096_rsa.pub
</code></pre>

<p>8) By default SSH is not listening on your BlackBerry. Use the <code>blackberry-connect</code>
command to start the SSH daemon on the device. It will upload your public SSH key
to the device and start the SSH daemon on the other side. <code>password</code> is your device
password;</p>

<p>{% codeblock lang:bash %}
$ pwd
/home/atodorov/bbndk/host_10_1_0_231/linux/x86/usr/bin</p>

<p>$ ./blackberry-connect 169.254.0.1 -password 123456 -sshPublicKey ~/.rim/testKey_4096_rsa.pub
Info: Connecting to target 169.254.0.1:4455
Info: Authenticating with target 169.254.0.1:4455
Info: Encryption parameters verified
Info: Authenticating with target credentials.
Info: Successfully authenticated with target credentials.
Info: Sending ssh key to target 169.254.0.1:4455
Info: ssh key successfully transferred.
Info: Successfully connected. This application must remain running in order to use debug tools. Exiting the application will terminate this connection.
{% endcodeblock %}</p>

<p>9) Check if SSH is running on the device</p>

<p>{% codeblock lang:bash %}
$ nmap 169.254.0.1</p>

<p>Starting Nmap 5.51 ( http://nmap.org ) at 2013-07-18 10:19 EEST
Stats: 0:00:01 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan
Connect Scan Timing: About 14.30% done; ETC: 10:20 (0:00:06 remaining)
Nmap scan report for 169.254.0.1
Host is up (0.00097s latency).
Not shown: 991 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
139/tcp  open  netbios-ssn
443/tcp  open  https
445/tcp  open  microsoft-ds
1111/tcp open  lmsocialserver
5555/tcp open  freeciv
8000/tcp open  http-alt
8443/tcp open  https-alt</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 12.47 seconds
{% endcodeblock %}</p>

<p>10)  Use SSH with the specified key to connect to the Z10. Username is <code>devuser</code>.
Here's a simple session:</p>

<p>{% codeblock lang:bash %}
$ ssh -i ~/.rim/testKey_4096_rsa devuser@169.254.0.1
$
$ pwd
/accounts/devuser
$ uname -a
QNX atodorovZ10 8.0.0 2013/05/02-08:42:48EDT OMAP4470_ES1.0_HS_London_Rev:08 armle
$ date
Fri Jul 19 23:39:19 EEST 2013
$ ifconfig
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST> mtu 33192</p>

<pre><code>inet 127.0.0.1 netmask 0xff000000
inet6 ::1 prefixlen 128
inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1
</code></pre>

<p>tiw_drv0: flags=8c02&lt;BROADCAST,OACTIVE,SIMPLEX,MULTICAST> mtu 1500</p>

<pre><code>address: 1c:69:a5:d0:10:cd
</code></pre>

<p>tiw_sta0: flags=40008c43&lt;UP,BROADCAST,RUNNING,OACTIVE,SIMPLEX,MULTICAST,ACCEPTRTADV> mtu 1500</p>

<pre><code>address: 1c:69:a5:d0:10:cd
inet 192.168.0.100 netmask 0xffffff00 broadcast 192.168.0.255
inet6 fe80::1e69:a5ff:fed0:10cd%tiw_sta0 prefixlen 64 scopeid 0x12
</code></pre>

<p>tiw_p2pdev0: flags=8c02&lt;BROADCAST,OACTIVE,SIMPLEX,MULTICAST> mtu 1500</p>

<pre><code>address: 1c:69:a5:d0:10:cd
</code></pre>

<p>tiw_p2pgrp0: flags=8c02&lt;BROADCAST,OACTIVE,SIMPLEX,MULTICAST> mtu 1500</p>

<pre><code>address: 1c:69:a5:d0:10:cd
</code></pre>

<p>tiw_ibss0: flags=8c02&lt;BROADCAST,OACTIVE,SIMPLEX,MULTICAST> mtu 1500</p>

<pre><code>address: 1c:69:a5:d0:10:cd
</code></pre>

<p>pflog0: flags=0 mtu 33192
lo2: flags=8048&lt;LOOPBACK,RUNNING,MULTICAST> mtu 33192
cellular0: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST> mtu 1500
cellular1: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST> mtu 1500
cellular2: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST> mtu 1500
cellular3: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST> mtu 1500
cellular4: flags=8810&lt;POINTOPOINT,SIMPLEX,MULTICAST> mtu 1500
bptp0: flags=8043&lt;UP,BROADCAST,RUNNING,MULTICAST> mtu 1356</p>

<pre><code>inet6 fe80::1e69:a5ff:fed0:10cd%bptp0 prefixlen 64 scopeid 0x2d
inet6 fd02:42ac:77b2:d543:c158:fabb:6276:80e6 prefixlen 8
</code></pre>

<p>ecm0: flags=8a43&lt;UP,BROADCAST,RUNNING,ALLMULTI,SIMPLEX,MULTICAST> mtu 1500</p>

<pre><code>address: 1e:69:a5:d0:10:cd
inet 169.254.0.1 netmask 0xfffffffc broadcast 169.254.0.3
inet6 fe80::1c69:a5ff:fed0:10cd%ecm0 prefixlen 64 scopeid 0x2e
</code></pre>

<p>{% endcodeblock %}</p>

<p><strong>IMPORTANT:</strong> you can also use the WiFi address of the device to pass to
<code>backberry-connect</code> and ssh. It works for me.</p>

<p>I'm starting to explore the dark world of QNX in the next couple of days
and will keep you posted! Until then - happy hacking.</p>
]]></content>
  </entry>
  
</feed>
