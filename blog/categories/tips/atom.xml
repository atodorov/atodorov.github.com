<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | atodorov.org]]></title>
  <link href="http://atodorov.org/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2013-06-25T00:55:00+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip: Caching Large Objects for Celery and Amazon SQS ]]></title>
    <link href="http://atodorov.org/blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs/"/>
    <updated>2013-06-19T14:29:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs</id>
    <content type="html"><![CDATA[<p>Some time ago a guy called Matt
<a href="https://groups.google.com/forum/?fromgroups=#!topic/celery-users/RFAuGjZwtmg">asked</a>
about passing large objects through their messaging queue. They were switching from
RabbitMQ to Amazon SQS which has a limit of 64K total message size.</p>

<p>Recently I've made some changes in <a href="http://www.dif.io">Difio</a> which require passing
larger objects as parameters to a Celery task. Since Difio is also using SQS I faced the
same problem. Here is the solution using a cache back-end:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">celery.task</span> <span class="kn">import</span> <span class="n">task</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.core</span> <span class="kn">import</span> <span class="n">cache</span> <span class="k">as</span> <span class="n">cache_module</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">some_method</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span> <span class="n">skip</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">task_cache</span> <span class="o">=</span> <span class="n">cache_module</span><span class="o">.</span><span class="n">get_cache</span><span class="p">(</span><span class="s">&#39;taskq&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">task_cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle_data</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span> <span class="n">skip</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@task</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_data</span><span class="p">(</span><span class="n">uuid</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">task_cache</span> <span class="o">=</span> <span class="n">cache_module</span><span class="o">.</span><span class="n">get_cache</span><span class="p">(</span><span class="s">&#39;taskq&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">task_cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span> <span class="n">do</span> <span class="n">stuff</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Objects are persisted in a secondary cache back-end, not the default one, to avoid
accidental destruction. <code>uuid</code> parameter is a string.</p>

<p>Although the objects passed are smaller than 64K I haven't seen any issues
with this solution so far. Let me know if you are using something similar in your code
and how it works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Tips: Using Cache for Stateful HTTP]]></title>
    <link href="http://atodorov.org/blog/2013/06/19/django-tips-using-cache-for-stateful-http/"/>
    <updated>2013-06-19T13:50:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/19/django-tips-using-cache-for-stateful-http</id>
    <content type="html"><![CDATA[<p>How do you keep state when working with a stateless protocol like HTTP?
One possible answer is to use a cache back-end.</p>

<p>I'm working on an IVR application demo with Django and Twilio. The caller
will make multiple choices using the phone keyboard. All of this needs to be
put together and sent back to another server for processing. In my views
I've added a simple cache get/set lines to preserve the selection.</p>

<p>Here's how it looks with actual application logic omitted</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">incoming_call</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">caller_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;From&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;from&#39;</span> <span class="p">:</span> <span class="n">caller_id</span><span class="p">}</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;step2.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">step2</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Digits&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">state</span><span class="p">[</span><span class="s">&#39;step2_selection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;final_step.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">final_step</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Digits&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">state</span><span class="p">[</span><span class="s">&#39;final_step_selection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>
</span><span class='line'><span class="n">Backend</span><span class="o">.</span><span class="n">process_user_selections</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;thank_you.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At each step Django will update the current state associated with this call and return
a <a href="https://www.twilio.com/docs/api/twiml">TwiML</a> XML response. <code>CallSid</code> is a handy unique
identifier provided by Twilio.</p>

<p>I am using the latest <a href="http://github.com/atodorov/django-s3-cache">django-s3-cache</a> version
which properly works with directories. When going to production that will likely switch to
Amazon ElastiCache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nibbler - W3C Validator on Steroids]]></title>
    <link href="http://atodorov.org/blog/2013/06/18/nibbler-w3c-validator-on-steroids/"/>
    <updated>2013-06-18T23:59:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/18/nibbler-w3c-validator-on-steroids</id>
    <content type="html"><![CDATA[<p>I've recently found Nibbler which gives you a report scoring the website out of
10 for various important criteria including accessibility, SEO, social media
and technology.</p>

<p>The produced report is very interesting. Here is the
<a href="http://nibbler.silktide.com/reports/atodorov.org">report for this blog</a>.
There are things I definitely need to work on!</p>

<p>For comparison <a href="http://nibbler.silktide.com/reports/sofiavalley.com">SofiaValley</a>
scores far beyond this blog. It is stronger in marketing and popularity but
apparently weaker on the technology section. This is interesting!</p>

<p>PS: sorry for not producing technical content lately. I've been very busy
with some current projects however I've got lots of ideas and topics to blog about.
I hope to make it up to speed in the next few weeks. -- Alex</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Anonymous FTP Uploads On Red Hat Enterprise Linux 6]]></title>
    <link href="http://atodorov.org/blog/2013/05/30/configuring-anonymous-ftp-uploads-on-red-hat-enterprise-linux-6/"/>
    <updated>2013-05-30T13:07:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/05/30/configuring-anonymous-ftp-uploads-on-red-hat-enterprise-linux-6</id>
    <content type="html"><![CDATA[<p>Install related packages and make configuration changes:</p>

<pre><code>yum -y install vsftp policycoreutils-python
sed -i "s/#anon_upload_enable=YES/anon_upload_enable=YES/" /etc/vsftpd/vsftpd.conf
</code></pre>

<p>Configure writable directory for uploads:</p>

<pre><code>mkdir /var/ftp/pub/upload
chgrp ftp /var/ftp/pub/upload
chmod 730 /var/ftp/pub/upload
</code></pre>

<p>Configure SELinux - this is <strong><a href="https://bugzilla.redhat.com/show_bug.cgi?id=968935">MISSING</a></strong>
from Red Hat's official docs:</p>

<pre><code>setsebool -P allow_ftpd_anon_write=1
semanage fcontext -a -t public_content_rw_t '/var/ftp/pub/upload(/.*)'
chcon -t public_content_rw_t /var/ftp/pub/upload
</code></pre>

<p>Start the service:</p>

<pre><code>chkconfig vsftpd on
service vsftpd start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy Python Hotfix on RedHat OpenShift Cloud]]></title>
    <link href="http://atodorov.org/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud/"/>
    <updated>2013-04-24T11:58:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud</id>
    <content type="html"><![CDATA[<p>In this article I will show you how to deploy hotfix versions for
Python packages on the RedHat <a href="http://openshift.com">OpenShift</a> PaaS cloud.</p>

<h2>Background</h2>

<p>You are already running a Python application on your OpenShift instance.
You are using some 3rd party dependencies when you find a bug in one of them.
You go forward, fix the bug and submit a
<a href="https://github.com/ahupp/python-magic/pull/31">pull request</a>.
You don't want to wait for upstream to release a new version but rather
build a hotfix package yourself and deploy to production immediately.</p>

<h2>Solution</h2>

<p>There are two basic approaches to solving this problem:</p>

<ol>
<li>Include the hotfix package source code in your application, i.e.
add it to your git tree or;</li>
<li>Build the hotfix separately and deploy as a dependency. Don't
include it in your git tree, just add a requirement on the hotfix version.</li>
</ol>


<p>I will talk about the later. The tricky part here is to instruct the cloud environment
to use your package (including the proper location) and not upstream or their local
mirror.</p>

<p>Python applications hosted at <a href="http://openshift.com">OpenShift</a> don't support
<code>requirements.txt</code> which can point to various package sources and even install
packages directly from GitHub. They support <code>setup.py</code> which fetches packages
from <a href="http://pypi.python.org">http://pypi.python.org</a> but it is flexible enough to support other locations.</p>

<h2>Building the hotfix</h2>

<p>First of all we'd like to build a hotfix package. This will be the upstream
version that we are currently using plus the patch for our critical issue:</p>

<pre><code>$ wget https://pypi.python.org/packages/source/p/python-magic/python-magic-0.4.3.tar.gz
$ tar -xzvf python-magic-0.4.3.tar.gz 
$ cd python-magic-0.4.3
$ curl https://github.com/ahupp/python-magic/pull/31.patch | patch 
</code></pre>

<p>Verify the patch has been applied correctly and then modify <code>setup.py</code> to
increase the version string. In this case I will set it to <code>version='0.4.3.1'</code>.</p>

<p>Then build the new package using <code>python setup.py sdist</code> and upload it to a web server.</p>

<h2>Deploying to OpenShift</h2>

<p>Modify <code>setup.py</code> and specify the hotfix version. Because this version is not on PyPI
and will not be on OpenShift's local mirror you need to provide the location where it can
be found. This is done with the <code>dependency_links</code> parameter to <code>setup()</code>. Here's how it looks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/setup.py b/setup.py</span>
</span><span class='line'><span class="gh">index c6e837c..2daa2a9 100644</span>
</span><span class='line'><span class="gd">--- a/setup.py</span>
</span><span class='line'><span class="gi">+++ b/setup.py</span>
</span><span class='line'><span class="gu">@@ -6,5 +6,6 @@ setup(name=&#39;YourAppName&#39;,&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   author=&#39;Your Name&#39;,
</span><span class='line'>   author_email=&#39;example@example.com&#39;,
</span><span class='line'>   url=&#39;http://www.python.org/sigs/distutils-sig/&#39;,
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;   install_requires=[&#39;python-magic==0.4.3&#39;],&lt;/li&gt;
</span><span class='line'>&lt;li&gt;   dependency_links=[&#39;https://s3.amazonaws.com/atodorov/blog/python-magic-0.4.3.1.tar.gz&#39;],&lt;/li&gt;
</span><span class='line'>&lt;li&gt;   install_requires=[&#39;python-magic==0.4.3.1&#39;],
</span><span class='line'>  )
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>Now just git push to OpenShift and observe the console output:</p>

<pre><code>remote: Processing dependencies for YourAppName==1.0
remote: Searching for python-magic==0.4.3.1
remote: Best match: python-magic 0.4.3.1
remote: Downloading https://s3.amazonaws.com/atodorov/blog/python-magic-0.4.3.1.tar.gz
remote: Processing python-magic-0.4.3.1.tar.gz
remote: Running python-magic-0.4.3.1/setup.py -q bdist_egg --dist-dir /tmp/easy_install-ZRVMBg/python-magic-0.4.3.1/egg-dist-tmp-R_Nxie
remote: zip_safe flag not set; analyzing archive contents...
remote: Removing python-magic 0.4.3 from easy-install.pth file
remote: Adding python-magic 0.4.3.1 to easy-install.pth file
</code></pre>

<p>Congratulations! Your hotfix package has just been deployed.</p>

<p>This approach should work for other cloud providers and other programming languages
as well. Let me know if you have any experience with that.</p>
]]></content>
  </entry>
  
</feed>
