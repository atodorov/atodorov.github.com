<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: start-up | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/start-up/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2015-09-18T00:02:04+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shutdown Your Startup in 7 Steps]]></title>
    <link href="http://atodorov.org/blog/2014/10/13/shutdown-your-startup-in-7-steps/"/>
    <updated>2014-10-13T14:17:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/10/13/shutdown-your-startup-in-7-steps</id>
    <content type="html"><![CDATA[<p>A month ago one of my startups Difio stopped working forever.
This is the story of how to go about shutting down a working
web service and not about why it came around to this.</p>

<h2>Step #1: Disable new registrations</h2>

<p>You obviously need to make sure new customers
arriving at your web site will not sing up to only find the service is
shutting down later.</p>

<p>Disable whatever sign-on/registration system you have in place
but leave currently registered users to login as they wish.</p>

<h2>Step #2: Disable payments</h2>

<p>Difio had paying customers, just not enough of them and it was based on
a subscription model which was automatically renewed without any interaction
from the customer.</p>

<p>The first thing I did was to disable all payments for the service which
was quite easy (just a few comments) because Difio used an external payment
processor.</p>

<p>Next thing was to go through all subscriptions that were still active and
cancel them. This prevented the payment processor to automatically charge
the customers next time their subscription renewal was due.</p>

<p>Because all subscriptions were charged in advance and when canceled were
still considered active (due to expire at some later date) Difio had to
keep operating at least one month after all subscriptions have been canceled.</p>

<h2>Step #3: Notify all customers that you are shutting down</h2>

<p>I scheduled this to happen right after the last subscription was canceled.
An email to everyone who registered to the website and a blog post should work
for most startups. See ours <a href="http://www.dif.io/blog/2014/08/10/difio-is-shutting-down/">here</a>.</p>

<p>Make sure to provide a gratis period if necessary. Difio had a gratis period
of one month after the shutdown announcement.</p>

<h2>Step #4: Disable all external triggers</h2>

<p>Difio was a complex piece of software which relied on external triggers like
web hooks and repetitive tasks executed by cron.</p>

<p>Disabling these will prevent external services or hosting providers
getting errors about your URLs not being accessible. It is just polite
to do so.</p>

<p>You may want to keep these still operational during the gratis period
before the physical shutdown or disable them straight away. In Difio's
case they were left operational because there were customers who have paid
in advance and relied on this functionality.</p>

<h2>Step #5: Prepare your 'Service Disabled' banner</h2>

<p>You will probably want to let people know why something isn't working
as it used (or is expected) to be. A simple page explaining that
you're going to shut down should be enough.</p>

<p>Difio required the user to be logged in to see most of the website.
This made it very easy to redirect everything to the same page.
A few more places were linking to public URLs which were manually rewritten
to point to the same 'Service Disabled' page.</p>

<p>It is the same page used previously to redirect new registrations to.</p>

<h2>Step #6: Terminate all processing resources</h2>

<p>Difio used both AWS EC2 instances and an OpenShift PaaS instance to do its
processing. Simply terminating all of them was enough. The only thing left
is a couple of static HTML pages behind the domain.</p>

<h2>Step #7: Database archival</h2>

<p>The last thing you need to do is archive your database. Although the
startup is out of business already you have gathered additional information
which may come handy at a later time.</p>

<p>Difio didn't collect any personal information about its users, except email
and didn't store financial information either. This made it safe to just make
a backup of the database and leave it lurking around on disk.</p>

<p>However beware
if you have collected personal and/or financial information from your customers.
You may want to erase/anonymize some of it before doing your backups and
probably safeguard them from unauthorized access.</p>

<p>That's it, your startup is officially dead now! Let me know if I've missed
something in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traction: A Startup Guide to Getting Customers]]></title>
    <link href="http://atodorov.org/blog/2014/09/30/traction-a-startup-guide-to-getting-customers/"/>
    <updated>2014-09-30T10:43:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/09/30/traction-a-startup-guide-to-getting-customers</id>
    <content type="html"><![CDATA[<p><blockquote><p>Many entrepreneurs who build great products simply don't have a good distribution strategy.</p><footer><strong>Mark Andreessen</strong> <cite>Venture Capitalist</cite></footer></blockquote></p>

<p><a href="http://www.amazon.com/gp/product/B00N06Y2DW/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00N06Y2DW&linkCode=as2&tag=atodorovorg-20&linkId=4GDHEYN66CPL7L72">Traction: A Startup Guide to Getting Customers</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=B00N06Y2DW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
introduces startup founders and employees to the "Bullseye Framework,"
a five-step process successful companies use to get traction.
This framework helps founders find the marketing channel that will be key to unlocking the next stage of growth.</p>

<p>Too often, startups building a product struggle with traction once they launch.
This struggle has startups trying random tactics - some ads, a blog post or two - in an unstructured way that leads to failure.
Traction shows readers how to systematically approach marketing, and covers how successful businesses have grown through each of
the following 19 channels:</p>

<ul>
<li>Viral Marketing</li>
<li>Public Relations (PR)</li>
<li>Unconventional PR</li>
<li>Search Engine Marketing (SEM)</li>
<li>Social and Display Ads</li>
<li>Offline Ads</li>
<li>Search Engine Optimization (SEO)</li>
<li>Content Marketing</li>
<li>Email Marketing</li>
<li>Engineering as Marketing</li>
<li>Target Market Blogs</li>
<li>Business Development (BD)</li>
<li>Sales</li>
<li>Affiliate Programs</li>
<li>Existing Platforms</li>
<li>Trade Shows</li>
<li>Offline Events</li>
<li>Speaking Engagements</li>
<li>Community Building</li>
</ul>


<p>The book is very easy to read and full of practical advice which should serve as a starting point and give you
more ideas how to approach a particular distribution channel. It took me two days to read and
I already had some ideas to test even before reading the whole of it. My next steps are to apply the principles
to my current startup <a href="http://obuvki41plus.com">Obuvki 41 Plus</a> and a future one I have in mind.</p>

<p>To anyone building a startup of any kind I would recommend the following selection of books:</p>

<ul>
<li><a href="http://www.amazon.com/gp/product/1591847788/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1591847788&linkCode=as2&tag=atodorovorg-20&linkId=IR465SOS3KA4BJLF">Hooked: How to Build Habit-Forming Products</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=1591847788" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
to learn how to make products (especially mobile apps) that customers keep using on their own without
additional external marketing (<a href="/blog/2014/01/28/book-review-january-2014/">review here</a>)</li>
<li><a href="http://www.amazon.com/gp/product/1449334911/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449334911&linkCode=as2&tag=atodorovorg-20&linkId=MHLGJPMJDO4FJDQB">UX for Lean Startups</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=1449334911" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
lean product development (<a href="/blog/2013/12/09/book-review-ux-for-lean-startups/">review here</a>)</li>
<li><a href="http://www.amazon.com/gp/product/B00N06Y2DW/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00N06Y2DW&linkCode=as2&tag=atodorovorg-20&linkId=AYMPCBH4MP5PC6G5">Traction: A Startup Guide to Getting Customers</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=B00N06Y2DW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
customer growth development</li>
</ul>


<p>Start reading right now (and also support this blog) by following the links below:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=1591847788&asins=1591847788&linkId=SXJNPAOV2J4SKU4G&show_border=true&link_opens_in_new_window=true">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=1449334911&asins=1449334911&linkId=7UM2YUNUK5UNVPSI&show_border=true&link_opens_in_new_window=true">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=B00N06Y2DW&asins=B00N06Y2DW&linkId=WS2AWWLBNFAFA5PO&show_border=true&link_opens_in_new_window=true">
</iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Collecting Emails - Webhooks for UserVoice and WordPress.com]]></title>
    <link href="http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress/"/>
    <updated>2014-07-12T23:15:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress</id>
    <content type="html"><![CDATA[<p>In my practice I like to use webhooks and integrate auxiliary services with
my internal processes or businesses. One of these is the collection of emails.
In this short article I'll show you an example of how to collect email addresses
from the comments of a WordPress.com blog and the UserVoice feedback/ticketing system.</p>

<h2>WordPress.com</h2>

<p>For your WordPress.com blog from the Admin Dashboard navigate to
Settings -> Webhooks and add a new webhook with action <code>comment_post</code>
and fields <code>comment_author</code>, <code>comment_author_email</code>. A simple
Django view that handles the input is shown below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_wp_comment_post</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hook</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;hook&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">hook</span> <span class="o">!=</span> <span class="s">&quot;comment_post&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">first_name</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">last_name</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;first_name&#39;</span> <span class="p">:</span> <span class="n">first_name</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;last_name&#39;</span> <span class="p">:</span> <span class="n">last_name</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author_email&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>UserVoice</h2>

<p>For UserVoice navigate to Admin Dashboard -> Settings -> Integrations ->
Service Hooks and add a custom web hook for the New Ticket notification.
Then use a sample code like that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_uservoice_new_ticket</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;event&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">event</span> <span class="o">!=</span> <span class="s">&quot;new_ticket&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;ticket&#39;</span><span class="p">][</span><span class="s">&#39;contact&#39;</span><span class="p">][</span><span class="s">&#39;email&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>store_user_details()</code> is a function which handles the email/name received in the webhook,
possibly adding them to a database or anything else.</p>

<p>I find webhooks extremely easy to setup and develop and used them whenever they are
supported by the service provider. What other services do you use webhooks for? Please
share your story in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: UX for Lean Startups]]></title>
    <link href="http://atodorov.org/blog/2013/12/09/book-review-ux-for-lean-startups/"/>
    <updated>2013-12-09T10:09:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/09/book-review-ux-for-lean-startups</id>
    <content type="html"><![CDATA[<p>Recently I've finished reading <a href="http://amzn.to/1fi1KeE">UX for Lean Startups</a>
and strongly recommend this book to anyone who is <strong>OR</strong> wants to be an
entrepreneur. Here is a short review of the book.</p>

<p>This book is for anyone who is creating a product/service or is considering the
idea of doing so. It talks about validation, interaction design and subsequent
product measurement and iteration. The book demonstrates some techniques and tools
to validate, design and measure your business ideas and products.
Its goal is to teach you how to design products that deliver fantastic user
experience, e.g. ones that are intuitive and easy to use.
It has nothing to do with visual design.</p>

<p>The author Laura Klein summarizes the book as follows:</p>

<p><blockquote><p>User research</p></p><p><pre><code>Listen to your users. All the time. I mean it.<br/></code></pre></p><p><p>Validation</p></p><p><pre><code>When you make assumptions or create hypotheses,<br/>test them before spending lots of time building products around them.<br/></code></pre></p><p><p>Design</p></p><p><pre><code>Iterate. Iterate. Iterate.<br/></code></pre></p><p><p></p></blockquote></p>

<h2>Early Validation</h2>

<p>This chapter helped me a lot to understand what exactly is validation and how
to go about it. The flow is validating the problem you are trying to solve,
then the market and then the product.</p>

<p>I will also add that by using some of these research techniques around a
vague idea/area of interest you may come around a particular trend/pattern or problem
and develop your business from there.</p>

<p><blockquote><p>You’ll know that you’ve validated a problem when you start to hear<br/>particular groups of people complaining about something specific.</p></p><p><p>...</p></p><p><p>Your goal in validating your market is to begin to narrow down the<br/>group of people who will want their problems solved badly enough to buy<br/>your product. Your secondary goal is to understand exactly why they’re<br/>interested so you can find other markets that might be similarly motivated.</p></p><p><p>...</p></p><p><p>You’ll know that you’ve successfully validated your market when you can<br/>accurately predict that a particular type of person will have a specific<br/>problem and that the problem will be severe enough that that person is<br/>interested in purchasing a solution.</p></p><p><p>...</p></p><p><p>Just because you have discovered a real problem and have a group of people<br/>willing to pay you to solve their problem, that doesn’t necessarily mean that<br/>your product is the right solution.</p></p><p><p>...</p></p><p><p>You’ll know that you’ve validated your product when a large percentage of<br/>your target market offers to pay you money to solve their problem.</p></blockquote></p>

<h2>User Research</h2>

<p>Next few chapters talk about user research, the various kinds of it and when/how
to perform it. It talks how to properly run surveys, how to ask good questions,
etc.</p>

<h2>Qualitative vs. Quantitative Research</h2>

<p><blockquote><p>Quantitative research is about measuring what real people are actually<br/>doing with your product. It doesn’t involve speaking with specific humans.<br/>It’s about the data in aggregate. It should always be statistically significant.</p></p><p><p>...</p></p><p><p>Quantitative research tells you <strong>what</strong> your problem is. Qualitative<br/>research tells you <strong>why</strong> you have that problem.</p></p><p><p>...</p></p><p><p>If you want to measure something that exists, like traffic or revenue or how<br/>many people click on a particular button, then you want quantitative data.<br/>If you want to know why you lose people out of your purchase funnel or<br/>why people all leave once they hit a specific page, or why people seem not<br/>to click that button, then you need qualitative.</p></blockquote></p>

<h2>Part Two: Design</h2>

<p>The second part of this book talks about design - everything from building a
prototype to figuring out when you don’t want one. It assumes you have validated
the initial idea and now move on to designing the product and validating that
design before you start building it. It talks about diagrams, sketches, wireframes,
prototypes and of course MVPs.</p>

<p>I think you can safely skip some of these steps when it comes to small applications
because it may be easier/faster to build the application instead of a prototype.
Definitely not to be skipped if you're building a more complex product!</p>

<h2>Part Three: Product</h2>

<p>This section talks about metrics and measuring the product once it is out of the door.
Supposedly based on these metrics you will refine your design and update the product
accordingly.  Most of the time it focuses on A/B testing and which metrics are
important and which are so called "vanity metrics".</p>

<p>I particularly liked the examples of A/B testing and explanations what it is good for
and what it does poorly. Definitely a mistake I've happened to made myself. I'm sure you too.</p>

<p>Let me know if you have read this book and what your thoughts are. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Taking Orders By Phone Works for My Start-up]]></title>
    <link href="http://atodorov.org/blog/2013/08/01/why-taking-orders-by-phone-works-for-my-start-up/"/>
    <updated>2013-08-01T09:48:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/08/01/why-taking-orders-by-phone-works-for-my-start-up</id>
    <content type="html"><![CDATA[<p>Yesterday I've
<a href="/blog/2013/07/31/how-i-created-a-website-in-two-days-without-coding/">mentioned</a>
a start-up project called
<a href="http://obuvki41plus.com">obuvki41plus.com</a> and that it accepts phone orders
instead of online electronic orders like everyone else. I will tell you why.</p>

<p><img src="http://atodorov.org/images/phone_order.jpg" alt="Taking phone orders" style="clear:both;display:block;" />
<em>Image CC-BY <a href="http://www.flickr.com/photos/southernfoodwaysalliance/3291060837/">Southern Foodways Alliance</a></em></p>

<p><a href="http://obuvki41plus.com/">obuvki41plus.com</a> is a
re-seller business my spouse runs. It specializes in large size, elegant
ladies shoes - Europe size 41 plus, which are hard to find in Bulgaria.
There is a shopping cart component on the website which at the end redirects to
a simple page with instructions how to order via phone. Why not online
orders like everyone else? Several reasons!</p>

<p>The business target group is very limited - women who wear large shoe size
and like the proposed shoe style and can afford the higher price (quality shoes
only, sorry). On top of
that the business model is <strong>online only</strong>. The rule of thumb is to <strong>make
everything possible to lower barrier to entry for customers</strong>!
Also don't make our lives harder in doing so.</p>

<ul>
<li><p>Phone ordering is the easiest way for customers in Bulgaria.
I myself often prefer it because of the too many steps and too many fields
to fill-in when ordering online. The reality is that most local websites
are horribly made with respect to user experience and many users are not
that fluent with Internet as it may seem. No need to get people frustrated
if they are about to spend their money with you!</p></li>
<li><p>Phone ordering, especially in the early business stage lets you know
your customers. This is invaluable feedback for you as the owner and you
can't get that from an online ordering system. It just doesn't work,
I've tried!</p></li>
<li><p>A phone ordering system is just so easy to implement. Later that can
be scaled with some automated IVR system and a call center; Or just
migrate it to online ordering system;</p></li>
<li><p>The website in question is supposed to be no-maintenance as much
as possible. It is static HTML and no database at all. Introducing
online ordering is just too much of a technological overhead in this case;</p></li>
<li><p>Last but probably most important is customer care - not only we want to
make it easy for them to order but want to prevent frequent returns
caused by wrong product expectations or incorrect size. After all shoes
need to be tried first.</p></li>
</ul>


<p>So to summarize - the orders are taken in person via phone
including objection handling and questions answering. An order may consist
of up to 3 pairs of shoes which are shipped to the customer with the option
to try them out upon delivery! Buy all or just a pair - it's a customer call!
Small return fee is imposed to prevent abuse!</p>

<p>For that kind of business this seems to be the best solution so far.
I'd love to hear other owners experience and decision logic. Please use
the comments to tell us how you've organized the sales/ordering/delivery
process in your company and why so. Thanks!</p>
]]></content>
  </entry>
  
</feed>
