<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-02-21T14:40:02+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Skip or Render Specific Blocks from Jinja2 Templates]]></title>
    <link href="http://atodorov.org/blog/2014/02/21/skip-or-render-specific-blocks-from-jinja2-templates/"/>
    <updated>2014-02-21T00:08:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/02/21/skip-or-render-specific-blocks-from-jinja2-templates</id>
    <content type="html"><![CDATA[<p>I wasn't able to find detailed information on how to skip rendering
or only render specific blocks from Jinja2 templates so here's my solution.
Hopefully you find it useful too.</p>

<p>With below template I want to be able to render <strong>only</strong> <em>kernel_options</em> block
as a single line and then render the rest of the template <strong>excluding</strong> <em>kernel_options</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>base.j2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="cp">{%</span> <span class="k">block</span> <span class="nv">kernel_options</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">console=tty0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;</span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">debug</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    debug=1</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span><span class="cp">{%</span> <span class="k">endblock</span> <span class="nv">kernel_options</span> <span class="cp">%}</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">OS_MAJOR</span> <span class="o">==</span> <span class="m">5</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">key --skip</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;%packages</span>
</span><span class='line'><span class="x">@base</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">if</span> <span class="nv">OS_MAJOR</span> <span class="o">&gt;</span> <span class="m">5</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">%end</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To render a particular block you have to use the low level Jinja API
<em><a href="http://jinja.pocoo.org/docs/api/#jinja2.Template.blocks">template.blocks</a></em>.
This will return a dict of block rendering functions which need a <em>Context</em> to work with.</p>

<p>The second part is trickier. To remove a block we have to create an extension
which will filter it out. The provided <em>SkipBlockExtension</em> class does
exactly this.</p>

<p>Last but not least - if you'd like to use both together you have to disable
caching in the <em>Environment</em> (so you get a fresh template every time), render
your blocks first, configure <em>env.skip_blocks</em> and render the entire template
without the specified blocks.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>jinja2-render </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">jinja2.ext</span> <span class="kn">import</span> <span class="n">Extension</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">jinja2</span> <span class="kn">import</span> <span class="n">Environment</span><span class="p">,</span> <span class="n">FileSystemLoader</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">SkipBlockExtension</span><span class="p">(</span><span class="n">Extension</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">environment</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">(</span><span class="n">SkipBlockExtension</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">environment</span><span class="p">)</span>
</span><span class='line'>    <span class="n">environment</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">skip_blocks</span><span class="o">=</span><span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filter_stream</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
</span><span class='line'>    <span class="n">block_level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">skip_level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">in_endblock</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">stream</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s">&#39;block_begin&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">stream</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="s">&#39;block&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">block_level</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">stream</span><span class="o">.</span><span class="n">look</span><span class="p">()</span><span class="o">.</span><span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">environment</span><span class="o">.</span><span class="n">skip_blocks</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">skip_level</span> <span class="o">=</span> <span class="n">block_level</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="s">&#39;endblock&#39;</span> <span class="p">):</span>
</span><span class='line'>            <span class="n">in_endblock</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">skip_level</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">token</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="s">&#39;block_end&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">in_endblock</span><span class="p">:</span>
</span><span class='line'>                <span class="n">in_endblock</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                <span class="n">block_level</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="n">skip_level</span> <span class="o">==</span> <span class="n">block_level</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">skip_level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="s">&quot;&lt;strong&gt;main&lt;/strong&gt;&quot;</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;OS_MAJOR&#39;</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&#39;ARCH&#39;</span> <span class="p">:</span> <span class="s">&#39;x86_64&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">abs_path</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">dir_name</span>  <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">abs_path</span><span class="p">)</span>
</span><span class='line'><span class="n">base_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">abs_path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span> <span class="o">=</span> <span class="n">Environment</span><span class="p">(</span>
</span><span class='line'>            <span class="n">loader</span> <span class="o">=</span> <span class="n">FileSystemLoader</span><span class="p">(</span><span class="n">dir_name</span><span class="p">),</span>
</span><span class='line'>            <span class="n">extensions</span> <span class="o">=</span> <span class="p">[</span><span class="n">SkipBlockExtension</span><span class="p">],</span>
</span><span class='line'>            <span class="n">cache_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="c"># disable cache b/c we do 2 get_template()</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># first render only the block we want</span>
</span><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="n">base_name</span><span class="p">)</span>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">template</span><span class="o">.</span><span class="n">blocks</span><span class="p">[</span><span class="s">&#39;kernel_options&#39;</span><span class="p">](</span><span class="n">template</span><span class="o">.</span><span class="n">new_context</span><span class="p">(</span><span class="n">context</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Boot Args:&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;---------------------------&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now instruct SkipBlockExtension which blocks we don&#39;t want</span>
</span><span class='line'><span class="c"># and get a new instance of the template with these blocks removed</span>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">skip_blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;kernel_options&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="n">base_name</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;---------------------------&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code results in the following output:</p>

<pre><code>$ ./jinja2-render ./base.j2 
Boot Args: console=tty0 debug=1 
---------------------------

key --skip

%packages
@base
---------------------------
</code></pre>

<p>Teaser: this is part of my effort to replace SNAKE with a client side
kickstart template engine for
<a href="/blog/2013/11/19/open-source-quality-assurance-infrastructure-for-fedora-qa/">Beaker</a>
so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Template Tag Inheritance How-to]]></title>
    <link href="http://atodorov.org/blog/2013/12/22/django-template-tag-inheritance-howto/"/>
    <updated>2013-12-22T23:02:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/22/django-template-tag-inheritance-howto</id>
    <content type="html"><![CDATA[<p>While working on open-sourcing <a href="http://www.dif.io">Difio</a> I needed to remove
all hard-coded URL references from the templates. My solution was to essentially
inherit from the standard <code>{% url %}</code> template tag. Here is how to do it.</p>

<h2>Background History</h2>

<p>Difio is not hosted on a single server. Parts of the website are static HTML,
hosted on Amazon S3. Other parts are dynamic - hosted on OpenShift. It's also
possible but not required at the moment to host at various PaaS providers for
redundancy and simple load balancing.</p>

<p>As an easy fix I had hard-coded some URLs to link to the static S3 pages and others
go link to my PaaS provider.</p>

<p>I needed a simple solution which can be extended to allow for multiple domain hosting.</p>

<h2>The Solution</h2>

<p>The solution I came up with is to override the standard <code>{% url %}</code>
tag and use it everywhere in my templates. The new tag will produce absolute URLs containing
the specified protocol plus domain name and view path. For this to work you have to
inherit the standard <code>URLNode</code> class and override the <code>render()</code> method to include the new
values.</p>

<p>You also need to register a tag method to utilize the new class. My approach was to use
the existing <code>url()</code> method to do all background processing and simply casting the result
object to the new class.</p>

<p>All code is available at <a href="https://djangosnippets.org/snippets/3013/">https://djangosnippets.org/snippets/3013/</a>.</p>

<p>To use in your templates simply add</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% load fqdn_url from fqdn_url %}
</span><span class='line'>&lt;a href="{% fqdn_url 'dashboard' %}">Dashboard&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idempotent Django Email Sender with Amazon SQS and Memcache]]></title>
    <link href="http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/"/>
    <updated>2013-12-11T23:29:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache</id>
    <content type="html"><![CDATA[<p>Recently I wrote about my problem with
<a href="/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/">duplicate Amazon SQS messages causing multiple emails</a>
for <a href="http://www.dif.io">Difio</a>. After considering several options and
feedback from
<a href="https://twitter.com/atodorov_/status/409429840820199424">@Answers4AWS</a>
I wrote a small decorator to fix this.</p>

<p>It uses the cache backend to prevent the task from executing twice
during the specified time frame. The code is available at
<a href="https://djangosnippets.org/snippets/3010/">https://djangosnippets.org/snippets/3010/</a>.</p>

<p>As stated on Twitter you should use Memcache (or ElastiCache) for this.
If using Amazon S3 with my
<a href="https://github.com/atodorov/django-s3-cache">django-s3-cache</a> don't use the
<code>us-east-1</code> region because it is eventually consistent.</p>

<p>The solution is fast and simple on the development side and uses my existing
cache infrastructure so it doesn't cost anything more!</p>

<p>There is still a race condition between marking the message as processed
and the second check but nevertheless this should minimize the possibility of
receiving duplicate emails to an accepted level. Only time will tell though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Tips: Using Cache for Stateful HTTP]]></title>
    <link href="http://atodorov.org/blog/2013/06/19/django-tips-using-cache-for-stateful-http/"/>
    <updated>2013-06-19T13:50:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/19/django-tips-using-cache-for-stateful-http</id>
    <content type="html"><![CDATA[<p>How do you keep state when working with a stateless protocol like HTTP?
One possible answer is to use a cache back-end.</p>

<p>I'm working on an IVR application demo with Django and Twilio. The caller
will make multiple choices using the phone keyboard. All of this needs to be
put together and sent back to another server for processing. In my views
I've added a simple cache get/set lines to preserve the selection.</p>

<p>Here's how it looks with actual application logic omitted</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">incoming_call</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">caller_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;From&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;from&#39;</span> <span class="p">:</span> <span class="n">caller_id</span><span class="p">}</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;step2.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">step2</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Digits&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">state</span><span class="p">[</span><span class="s">&#39;step2_selection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;final_step.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">final_step</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">call_sid</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CallSid&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">selection</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Digits&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">call_sid</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="n">state</span><span class="p">[</span><span class="s">&#39;final_step_selection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>
</span><span class='line'><span class="n">Backend</span><span class="o">.</span><span class="n">process_user_selections</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;thank_you.xml&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At each step Django will update the current state associated with this call and return
a <a href="https://www.twilio.com/docs/api/twiml">TwiML</a> XML response. <code>CallSid</code> is a handy unique
identifier provided by Twilio.</p>

<p>I am using the latest <a href="http://github.com/atodorov/django-s3-cache">django-s3-cache</a> version
which properly works with directories. When going to production that will likely switch to
Amazon ElastiCache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Django built-in template tags and filters in code]]></title>
    <link href="http://atodorov.org/blog/2013/04/06/using-django-built-in-template-tags-and-filters-in-code/"/>
    <updated>2013-04-06T22:26:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/04/06/using-django-built-in-template-tags-and-filters-in-code</id>
    <content type="html"><![CDATA[<p>In case you are wondering how to use Django's
<a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/">built-in template tags and filters</a>
in your source code, not inside a template here is how:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">django.template.defaultfilters</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">filesizeformat</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="s">u&#39;1.0 KB&#39;</span>
</span><span class='line'><span class="n">filesizeformat</span><span class="p">(</span><span class="mi">1020</span><span class="p">)</span>
</span><span class='line'><span class="s">u&#39;1020 bytes&#39;</span>
</span><span class='line'><span class="n">filesizeformat</span><span class="p">(</span><span class="mi">102412354</span><span class="p">)</span>
</span><span class='line'><span class="s">u&#39;97.7 MB&#39;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote></blockquote>

<p>All built-ins live in <code>pythonX.Y/site-packages/django/template/defaultfilters.py</code>.</p>
]]></content>
  </entry>
  
</feed>
