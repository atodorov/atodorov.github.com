<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Amazon | atodorov.org]]></title>
  <link href="http://atodorov.org/blog/categories/amazon/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-02T23:24:11+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Idempotent Django Email Sender with Amazon SQS and Memcache]]></title>
    <link href="http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/"/>
    <updated>2013-12-11T23:29:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache</id>
    <content type="html"><![CDATA[<p>Recently I wrote about my problem with
<a href="/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/">duplicate Amazon SQS messages causing multiple emails</a>
for <a href="http://www.dif.io">Difio</a>. After considering several options and
feedback from
<a href="https://twitter.com/atodorov_/status/409429840820199424">@Answers4AWS</a>
I wrote a small decorator to fix this.</p>

<p>It uses the cache backend to prevent the task from executing twice
during the specified time frame. The code is available at
<a href="https://djangosnippets.org/snippets/3010/">https://djangosnippets.org/snippets/3010/</a>.</p>

<p>As stated on Twitter you should use Memcache (or ElastiCache) for this.
If using Amazon S3 with my
<a href="https://github.com/atodorov/django-s3-cache">django-s3-cache</a> don't use the
<code>us-east-1</code> region because it is eventually consistent.</p>

<p>The solution is fast and simple on the development side and uses my existing
cache infrastructure so it doesn't cost anything more!</p>

<p>There is still a race condition between marking the message as processed
and the second check but nevertheless this should minimize the possibility of
receiving duplicate emails to an accepted level. Only time will tell though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Duplicate Amazon SQS Messages Cause Multiple Emails]]></title>
    <link href="http://atodorov.org/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/"/>
    <updated>2013-12-06T22:47:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails</id>
    <content type="html"><![CDATA[<p>Beware if using Amazon Simple Queue Service to send email messages!
Sometime SQS messages are duplicated which results in multiple copies of
the messages being sent. This happened today at <a href="http://www.dif.io">Difio</a>
and is really annoying to users. In this post I will explain why there is no easy
way of fixing it.</p>

<p><blockquote><p>Q: Can a deleted message be received again?</p></p><p><p>Yes, under rare circumstances you might receive a previously deleted message again.<br/>This can occur in the rare situation in which a DeleteMessage operation doesn't<br/>delete all copies of a message because one of the servers in the distributed<br/>Amazon SQS system isn't available at the time of the deletion. That message copy<br/>can then be delivered again. You should design your application so that no errors<br/>or inconsistencies occur if you receive a deleted message again.</p><footer><strong>Amazon FAQ</strong></footer></blockquote></p>

<p>In my case the cron scheduler logs say:</p>

<pre><code>&gt;&gt;&gt; &lt;AsyncResult: a9e5a73a-4d4a-4995-a91c-90295e27100a&gt;
</code></pre>

<p>While on the worker nodes the logs say:</p>

<pre><code>[2013-12-06 10:13:06,229: INFO/MainProcess] Got task from broker: tasks.cron_monthly_email_reminder[a9e5a73a-4d4a-4995-a91c-90295e27100a]
[2013-12-06 10:18:09,456: INFO/MainProcess] Got task from broker: tasks.cron_monthly_email_reminder[a9e5a73a-4d4a-4995-a91c-90295e27100a]
</code></pre>

<p>This clearly shows the same message (see the UUID) has been processed twice!
This resulted in hundreds of duplicate emails :(.</p>

<h2>Why This Is Hard To Fix</h2>

<p>There are two basic approaches to solve this issue:</p>

<ul>
<li>Check some log files or database for previous record of the message having
been processed;</li>
<li>Use idempotent operations that if you process the message again, you
get the same results, and that those results don't create duplicate files/records.</li>
</ul>


<p>The problem with checking for duplicate messages is:</p>

<ul>
<li>There is a race condition between marking the message as processed and the
second check;</li>
<li>You need to use some sort of locking mechanism to safe-guard against the race condition;</li>
<li>In the event of an eventual consistency of the log/DB you can't guarantee that
the previous attempt will show up and so can't guarantee that you won't process
the message twice.</li>
</ul>


<p>All of the above don't seem to work well for distributed applications not to mention
Difio processes millions of messages per month, per node and the logs are quite big.</p>

<p>The second option is to have control of the Message-Id or some other email header
so that the second message will be discarded either at the server (Amazon SES in my case)
or at the receiving MUA. I like this better but I don't think it is technically possible
with the current environment. Need to check though.</p>

<p>I've asked AWS support to look into
<a href="https://forums.aws.amazon.com/thread.jspa?threadID=140782">this thread</a> and hopefully
they will have some more hints. If you have any other ideas please post in the comments!
Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Created a Website In Two Days Without Coding]]></title>
    <link href="http://atodorov.org/blog/2013/07/31/how-i-created-a-website-in-two-days-without-coding/"/>
    <updated>2013-07-31T21:55:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/07/31/how-i-created-a-website-in-two-days-without-coding</id>
    <content type="html"><![CDATA[<p><img src="/images/logos/obuvki41plus_header.png" title="header image" alt="header image" /></p>

<p>This is a simple story about a website I helped create without using any
programming at all. It took me two days because of the images and the logo
design which I've commissioned to a friend.</p>

<p>The website is <a href="http://obuvki41plus.com/">obuvki41plus.com</a> which is a
re-seller business my spouse runs. It specializes in large size, elegant
ladies shoes - Europe size 41 plus (hard to find in Bulgaria),
hence the name.</p>

<h2>Required Functionality</h2>

<ul>
<li>Display a catalog of items for sale with detailed information about
each item;</li>
<li>Make it possible for people to comment and share the items;</li>
<li>Very basic shopping cart which stores the selected items and then
redirects to a page with order instructions. Actual order is made via
phone for several reasons which I will explain in
<a href="/blog/2013/08/01/why-taking-orders-by-phone-works-for-my-start-up/">another post</a>;</li>
<li>Add a feedback/contact form;</li>
<li>Look nice on mobile devices.</li>
</ul>


<h2>Technology</h2>

<ul>
<li>The website is static, all pages are simple HTML and is hosted in
Amazon S3;</li>
<li>Comments are provided by Facebook's
<a href="https://developers.facebook.com/docs/reference/plugins/comments/">Comments Box</a>
plug-in;</li>
<li>Social media buttons and tracking are provided by
<a href="https://www.addthis.com/">AddThis</a>;</li>
<li>Visitors analytics is standard and is from
<a href="http://www.google.com/analytics/">Google Analytics</a>;</li>
<li>Template is from <a href="http://pages.github.com/">GitHub Pages</a> with slight
modifications; Works on mobile too;</li>
<li>Logo is custom designed by my friend
<a href="https://www.facebook.com/aluinpoli">Polina Valerieva</a>;</li>
<li>Feedback/contact form is by <a href="https://www.uservoice.com/">UserVoice</a>;</li>
<li>Shopping cart is by <a href="http://simplecartjs.org/">simpleCart(js)</a>.
I've created a simple animation effect when pressing the "ADD TO CART"
link to visually alert the user. This is done with jQuery.</li>
</ul>


<p>I could have used some JavaScript templating engine like
<a href="http://handlebarsjs.com/">Handlebars</a> but at the time I didn't know about
it and I prefer not to write JavaScript if possible :).</p>

<h2>Colophon</h2>

<p>I did some coding after the initial release eventually.
I've transformed the website to a Django
based site which is exported as static HTML.</p>

<p>This helps me with faster deployment/management as everything is stored
in git, allows templates inheritance and also makes the site ready to
add more functionality if required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Runs Your Start-up - Imagga]]></title>
    <link href="http://atodorov.org/blog/2013/07/29/what-runs-your-startup-imagga/"/>
    <updated>2013-07-29T12:32:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/07/29/what-runs-your-startup-imagga</id>
    <content type="html"><![CDATA[<p><img src="http://atodorov.org/images/startup/imagga.png" alt="Imagga" style="float:left; margin-right:10px;" /></p>

<p><a href="http://imagga.com/">Imagga</a> is a cloud platform that helps businesses and
individuals organize their images in a fast and cost-effective way. They
develop a range of advanced proprietary image recognition and image processing
technologies, which are built into several services such as smart image
cropping, color extraction and multi-color search, visual similarity search and
auto-tagging.</p>

<p>During
<a href="/blog/2013/05/23/balkan-venture-forum-sofia-post-mortem/">Balkan Venture Forum</a>
in Sofia I sat down with Georgi Kadrev to talk about technology.
Surprisingly this hi-tech service is built on top of standard low-tech components
and lots of hard work.</p>

<h2>Main Technologies</h2>

<p>Core functionality is developed in C and C++ with the OpenCV library.
Imagga relies heavily on own image processing algorithms for their core
features. These were built as a combination of their own research activities
and publications from other researchers.</p>

<p>Image processing is executed by worker nodes configured with their own
software stack. Nodes are distributed among Amazon EC2 and other data centers.</p>

<p>Client libraries to access Imagga API are available in PHP, Ruby and Java.</p>

<p>Imagga has built several websites to showcase their technology.
<a href="http://cropp.me/">Cropp.me</a>, <a href="http://colorslike.me/">ColorsLike.me</a>,
<a href="http://www.stockpodium.com">StockPodium</a> and <a href="http://autotag.me/">AutoTag.me</a>
were built with PHP, JavaScript and jQuery above a standard LAMP stack.</p>

<p>Recently Imagga also started using GPU computing with nVidia Tesla cards.
They use C++ and Python bindings for
<a href="https://developer.nvidia.com/what-cuda">CUDA</a>.</p>

<h2>Why Not Something Else?</h2>

<p><blockquote><p>As an initially bootstrapping start-up we chose something that is basically free,<br/>reliable and popular - that's why started with the LAMP stack. It proved to be<br/>stable and convenient for our web needs and we preserved it.<br/>The use of C++ is a natural choice for computational intensive tasks that we<br/>need to perform for the purpose of our core expertise - image processing.<br/>Though we initially wrote the whole core technology code from scratch, we later<br/>switched to OpenCV for some of the building blocks as it is very well optimized<br/>and continuously extended image processing library.</p></p><p><p>With the raise of affordable high-performance GPU processors and their availability<br/>in server instances, we decided it's time to take advantage of this highly parallel<br/>architecture, perfectly suitable for image processing tasks.</p><footer><strong>Georgi Kadrev</strong></footer></blockquote></p>

<h2>Want More Info?</h2>

<p>If you’d like to hear more from Imagga please comment below.
I will ask them to follow this thread and reply to your questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance test: Amazon ElastiCache vs Amazon S3]]></title>
    <link href="http://atodorov.org/blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3/"/>
    <updated>2013-06-26T21:22:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3</id>
    <content type="html"><![CDATA[<p>Which Django cache backend is faster? Amazon ElastiCache or Amazon S3 ?</p>

<p>Previously I've mentioned about
<a href="/blog/2013/06/19/django-tips-using-cache-for-stateful-http/">using Django's cache to keep state between HTTP requests</a>.
In my demo described there I was using <a href="http://github.com/atodorov/django-s3-cache">django-s3-cache</a>.
It is time to move to production so I decided to measure the performance difference between the two
cache options available at Amazon Web Services.</p>

<p><strong>Update 2013-07-01</strong>: my initial test may have been false since I had not configured
ElastiCache access properly. I saw no errors but discovered the issue today on another
system which was failing to store the cache keys but didn't show any errors either.
I've re-run the tests and updated times are shown below.</p>

<h2>Test infrastructure</h2>

<ul>
<li>One Amazon S3 bucket, located in US Standard (aka US East) region;</li>
<li>One Amazon ElastiCache cluster with one Small Cache Node (cache.m1.small) with Moderate I/O capacity;</li>
<li>One Amazon Elasticache cluster with one Large Cache Node (cache.m1.large) with High I/O Capacity;</li>
<li><strong>Update:</strong> I've tested both <code>python-memcached</code> and <code>pylibmc</code> client libraries for Django;</li>
<li><strong>Update:</strong> Test is executed from an EC2 node in the us-east-1a availability zone;</li>
<li><strong>Update:</strong> Cache clusters are in the us-east-1a availability zone.</li>
</ul>


<h2>Test Scenario</h2>

<p>The test platform is Django. I've created a
<a href="https://github.com/atodorov/Amazon-ElastiCache-vs-Amazon-S3-Django">skeleton project</a>
with only <code>CACHES</code> settings
defined and necessary dependencies installed. A file called <code>test.py</code> holds the
test cases, which use the standard timeit module. The object which is stored in cache
is very small - it holds a phone/address identifiers and couple of user made selections.
The code looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">timeit</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s3_set</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">for i in range(1000):&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;pre&gt;&lt;code&gt;my_cache.set(i, MyObject)</span>
</span><span class='line'><span class="sd">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">,</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">from django.core import cache&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;my_cache = cache.get_cache(&#39;default&#39;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;MyObject = {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;pre&gt;&lt;code&gt;&#39;from&#39; : &#39;359123456789&#39;,</span>
</span><span class='line'><span class="sd">&#39;address&#39; : &#39;6afce9f7-acff-49c5-9fbe-14e238f73190&#39;,</span>
</span><span class='line'><span class="sd">&#39;hour&#39; : &#39;12:30&#39;,</span>
</span><span class='line'><span class="sd">&#39;weight&#39; : 5,</span>
</span><span class='line'><span class="sd">&#39;type&#39; : 1,</span>
</span><span class='line'><span class="sd">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;}</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s3_get</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">for i in range(1000):&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;pre&gt;&lt;code&gt;MyObject = my_cache.get(i)</span>
</span><span class='line'><span class="sd">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">,</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">from django.core import cache&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&lt;p&gt;my_cache = cache.get_cache(&#39;default&#39;)</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">skip</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Tests were executed from the Django shell <del>on my laptop</del>
on an EC2 instance in the us-east-1a availability zone. ElastiCache nodes
were freshly created/rebooted before test execution. S3 bucket had no objects.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">$</span> <span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">shell</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">2.6</span><span class="o">.</span><span class="mi">8</span> <span class="p">(</span><span class="n">unknown</span><span class="p">,</span> <span class="n">Mar</span> <span class="mi">14</span> <span class="mi">2013</span><span class="p">,</span> <span class="mi">09</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">22</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.6</span><span class="o">.</span><span class="mi">2</span> <span class="mi">20111027</span> <span class="p">(</span><span class="n">Red</span> <span class="n">Hat</span> <span class="mf">4.6</span><span class="o">.</span><span class="mi">2</span><span class="o">-</span><span class="mi">2</span><span class="p">)]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="p">(</span><span class="n">InteractiveConsole</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">test</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s3_set</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">68.089607000350952</span><span class="p">,</span> <span class="mf">70.806712865829468</span><span class="p">,</span> <span class="mf">72.49261999130249</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">s3_get</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">43.778793096542358</span><span class="p">,</span> <span class="mf">43.054368019104004</span><span class="p">,</span> <span class="mf">36.19232702255249</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pymc_set</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.40637087821960449</span><span class="p">,</span> <span class="mf">0.3568730354309082</span><span class="p">,</span> <span class="mf">0.35815882682800293</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pymc_get</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.35759496688842773</span><span class="p">,</span> <span class="mf">0.35180497169494629</span><span class="p">,</span> <span class="mf">0.39198613166809082</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">libmc_set</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.3902890682220459</span><span class="p">,</span> <span class="mf">0.30157709121704102</span><span class="p">,</span> <span class="mf">0.30596804618835449</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">libmc_get</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.28874802589416504</span><span class="p">,</span> <span class="mf">0.30520200729370117</span><span class="p">,</span> <span class="mf">0.29050207138061523</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">libmc_large_set</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">1.0291709899902344</span><span class="p">,</span> <span class="mf">0.31709098815917969</span><span class="p">,</span> <span class="mf">0.32010698318481445</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">libmc_large_get</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mf">0.2957158088684082</span><span class="p">,</span> <span class="mf">0.29067802429199219</span><span class="p">,</span> <span class="mf">0.29692888259887695</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote></blockquote>

<h2>Results</h2>

<p>As expected ElastiCache is much faster (10x) compared to S3. However the difference
between the two ElastiCache node types is subtle. I will stay with the smallest
possible node to minimize costs. Also as seen, pylibmc is a bit faster compared to
the pure Python implementation.</p>

<p>Depending on your objects size or how many set/get operations you perform per
second you may need to go with the larger nodes. Just test it!</p>

<p><del>It surprised me how slow django-s3-cache is.</del>
The false test showed django-s3-cache to be 100x slower but new results are better.
10x decrease in performance sounds about right for a filesystem backed cache.</p>

<p>A quick look at the code
of the two backends shows some differences. The one I immediately see is that
for every cache key django-s3-cache creates an sha1 hash which is used as the
storage file name. This was modeled after the filesystem backend but I think the
design is wrong - the memcached backends don't do this.</p>

<p>Another one is that django-s3-cache time-stamps all objects and uses pickle to serialize them.
I wonder if it can't just write them as binary blobs directly. There's definitely lots
of room for improvement of django-s3-cache. I will let you know my findings once I
get to it.</p>
]]></content>
  </entry>
  
</feed>
