<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Amazon | atodorov.org]]></title>
  <link href="http://atodorov.org/blog/categories/amazon/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2013-06-25T00:56:06+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Twilio is Located in Amazon Web Services US East]]></title>
    <link href="http://atodorov.org/blog/2013/06/24/twilio-is-located-in-amazon-web-services-us-east/"/>
    <updated>2013-06-24T23:43:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/24/twilio-is-located-in-amazon-web-services-us-east</id>
    <content type="html"><![CDATA[<p><blockquote><p>Where do I store my audio files in order to minimize download and call wait time?</p></blockquote></p>

<p>Twilio is a cloud vendor that provides telephony services.
It can download and <code>&lt;Play&gt;</code> arbitrary audio files and will cache the files
for better performance.</p>

<p>Twilio support told me they are not disclosing the location of their servers,
so from my web application hosted in AWS US East:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ivr-otb.rhcloud.com logs<span class="o">]</span>&gt; grep TwilioProxy access_log-* | cut -f 1 -d <span class="s1">&#39;-&#39;</span> | sort | uniq
</span><span class='line'>10.125.90.172
</span><span class='line'>10.214.183.239
</span><span class='line'>10.215.187.220
</span><span class='line'>10.245.155.18
</span><span class='line'>10.255.119.159
</span><span class='line'>10.31.197.102
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let's map these addresses to host names. From another EC2 system, also in Amazon US East:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-10-29-206-86 ~<span class="o">]</span><span class="nv">$ </span>dig -x 10.125.90.172 -x 10.214.183.239 -x 10.215.187.220 -x 10.245.155.18 -x 10.255.119.159 -x 10.31.197.102&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;; &amp;lt;&amp;lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.29.amzn1 &amp;lt;&amp;lt;&gt;&gt; -x 10.125.90.172 -x 10.214.183.239 -x 10.215.187.220 -x 10.245.155.18 -x 10.255.119.159 -x 10.31.197.102
</span><span class='line'>;; global options: +cmd
</span><span class='line'>;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 43245
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;172.90.125.10.in-addr.arpa.    IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>172.90.125.10.in-addr.arpa. 113 IN      PTR     ip-10-125-90-172.ec2.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 1 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 87&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 52693
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;239.183.214.10.in-addr.arpa.   IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>239.183.214.10.in-addr.arpa. 42619 IN   PTR     domU-12-31-39-0B-B0-01.compute-1.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 0 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 100&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 25255
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;220.187.215.10.in-addr.arpa.   IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>220.187.215.10.in-addr.arpa. 43140 IN   PTR     domU-12-31-39-0C-B8-2E.compute-1.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 0 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 100&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 15099
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;18.155.245.10.in-addr.arpa.    IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>18.155.245.10.in-addr.arpa. 840 IN      PTR     ip-10-245-155-18.ec2.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 0 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 87&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 28878
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;159.119.255.10.in-addr.arpa.   IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>159.119.255.10.in-addr.arpa. 43140 IN   PTR     domU-12-31-39-01-70-51.compute-1.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 0 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 100&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 28727
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; QUESTION SECTION:
</span><span class='line'>;102.197.31.10.in-addr.arpa.    IN      PTR&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; ANSWER SECTION:
</span><span class='line'>102.197.31.10.in-addr.arpa. 840 IN      PTR     ip-10-31-197-102.ec2.internal.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;;; Query <span class="nb">time</span>: 0 msec
</span><span class='line'>;; SERVER: 172.16.0.23#53<span class="o">(</span>172.16.0.23<span class="o">)</span>
</span><span class='line'>;; WHEN: Mon Jun 24 20:48:21 2013
</span><span class='line'>;; MSG SIZE  rcvd: 87
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In short:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip-10-125-90-172.ec2.internal.
</span><span class='line'>ip-10-245-155-18.ec2.internal.
</span><span class='line'>ip-10-31-197-102.ec2.internal.
</span><span class='line'>domU-12-31-39-01-70-51.compute-1.internal.
</span><span class='line'>domU-12-31-39-0B-B0-01.compute-1.internal.
</span><span class='line'>domU-12-31-39-0C-B8-2E.compute-1.internal.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>ip-*.ec2.internal</code> are clearly in US East. The <code>domU-*.computer-1.internal</code> also
look like US East although I'm not 100% sure what is the difference between the two.
The later ones look like HVM guests while the former ones are para-virtualized.</p>

<p>For comparison here are some internal addresses from my own EC2 systems:</p>

<ul>
<li>ip-10-228-237-207.eu-west-1.compute.internal - EU Ireland</li>
<li>ip-10-248-19-46.us-west-2.compute.internal - US West Oregon</li>
<li>ip-10-160-58-141.us-west-1.compute.internal - US West N. California</li>
</ul>


<p>After relocating my audio files to an S3 bucket in US East the average call length
dropped from 2:30 min to 2:00 min for the same IVR choices. This also minimizes
the costs since Twilio charges per minute of incoming/outgoing calls.
I think the audio quality has improved as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Caching Large Objects for Celery and Amazon SQS ]]></title>
    <link href="http://atodorov.org/blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs/"/>
    <updated>2013-06-19T14:29:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs</id>
    <content type="html"><![CDATA[<p>Some time ago a guy called Matt
<a href="https://groups.google.com/forum/?fromgroups=#!topic/celery-users/RFAuGjZwtmg">asked</a>
about passing large objects through their messaging queue. They were switching from
RabbitMQ to Amazon SQS which has a limit of 64K total message size.</p>

<p>Recently I've made some changes in <a href="http://www.dif.io">Difio</a> which require passing
larger objects as parameters to a Celery task. Since Difio is also using SQS I faced the
same problem. Here is the solution using a cache back-end:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">celery.task</span> <span class="kn">import</span> <span class="n">task</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.core</span> <span class="kn">import</span> <span class="n">cache</span> <span class="k">as</span> <span class="n">cache_module</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">some_method</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;...</span> <span class="n">skip</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">task_cache</span> <span class="o">=</span> <span class="n">cache_module</span><span class="o">.</span><span class="n">get_cache</span><span class="p">(</span><span class="s">&#39;taskq&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">task_cache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">handle_data</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span> <span class="n">skip</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@task</span>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_data</span><span class="p">(</span><span class="n">uuid</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">task_cache</span> <span class="o">=</span> <span class="n">cache_module</span><span class="o">.</span><span class="n">get_cache</span><span class="p">(</span><span class="s">&#39;taskq&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">task_cache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span> <span class="n">do</span> <span class="n">stuff</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Objects are persisted in a secondary cache back-end, not the default one, to avoid
accidental destruction. <code>uuid</code> parameter is a string.</p>

<p>Although the objects passed are smaller than 64K I haven't seen any issues
with this solution so far. Let me know if you are using something similar in your code
and how it works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Runs Your Start-up - Useful at Night]]></title>
    <link href="http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night/"/>
    <updated>2013-03-27T12:00:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night</id>
    <content type="html"><![CDATA[<p><img style="float: left; margin-right: 10px;" src="http://atodorov.org/images/startup/usefulatnight.png" alt="Useful at Night logo" /></p>

<p><a href="http://usefulatnight.com/">Useful at Night</a> is a mobile guide for nightlife
empowering real time discovery of cool locations, allowing nightlife players
to identify opinion leaders. Through geo-location and data aggregation
capabilities, the application allows useful exploration of cities, places and
parties.</p>

<p><a href="http://about.me/velev">Evelin Velev</a> was kind enough to share what technologies
his team uses to run their star-up.</p>

<br/>


<h2>Main Technologies</h2>

<p>Main technologies used are Node.js, HTML 5 and NoSQL.</p>

<p>Back-end application servers are written in Node.js and hosted at Heroku,
coupled with <a href="http://www.redistogo.com/">RedisToGo</a> for caching and
CouchDB served by <a href="https://cloudant.com/">Cloudant</a> for storage.</p>

<p>Their mobile front-end supports both iOS and Android platforms and is built using
HTML5 and a homemade UI framework called RAPID. There are some native parts developed
in Objective-C and Java respectively.</p>

<p>In addition <em>Useful at Night</em> uses MongoDB for metrics data with a custom metrics solution
written in Node.js; Amazon S3 for storing different assets; and a custom storage solution
called Divan (simple CouchDB like).</p>

<h2>Why Not Something Else?</h2>

<p><blockquote><p>We chose Node.js for our application servers, because it enables us to build efficient<br/>distributed systems while sharing significant amounts of code between client and server.<br/>Things get really interesting when you couple Node.js with Redis for data structure<br/>sharing and message passing, as the two technologies play very well together.</p></p><p><p>We chose CouchDB as our main back-end because it is the most schema-less data-store that<br/>supports secondary indexing. Once you get fluent with its map-reduce views, you can<br/>compute an index out of practically anything. For comparison, even MongoDB requires<br/>that you design your documents as to enable certain indexing patterns. Put otherwise,<br/>we'd say CouchDB is a data-store that enables truly lean engineering - we have never had<br/>to re-bake or migrate our data since day one, while we're constantly experimenting with<br/>new ways to index, aggregate and query it.</p></p><p><p>We chose HTML5 as our front-end technology, because it's cross-platform and because we<br/>believe it's ... almost ready. Things are still really problematic on Android, but iOS<br/>boasts a gorgeous web presentation platform, and Windows 8 is also joining the game with<br/>a very good web engine. Obviously we're constantly running into issues and limitations,<br/>mostly related to the unfortunate fact that in spite of some recent developments,<br/>a web app is still mostly single threaded. However, we're getting there, and we're proud<br/>to say we're running a pretty graphically complex hybrid app with near-native GUI performance<br/>on the iPhone 4S and above.</p></blockquote></p>

<h2>Want More Info?</h2>

<p>If you'd like to hear more from <em>Useful at Night</em> please comment below. I will ask them
to follow this thread and reply to your questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Email Logging for Django on RedHat OpenShift with Amazon SES]]></title>
    <link href="http://atodorov.org/blog/2013/02/28/email-logging-django-redhat-openshift-amazon-ses/"/>
    <updated>2013-02-28T23:19:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/02/28/email-logging-django-redhat-openshift-amazon-ses</id>
    <content type="html"><![CDATA[<p>Sending email in the cloud can be tricky. IPs of cloud providers are blacklisted
because of frequent abuse. For that reason I use
<a href="http://aws.amazon.com/ses/">Amazon SES</a> as my email backend. Here is how to
configure <a href="https://www.djangoproject.com/">Django</a> to send emails to site admins
when something goes wrong.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>settings.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Valid</span> <span class="n">addresses</span> <span class="n">only</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ADMINS</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&#39;Alexander Todorov&#39;</span><span class="p">,</span> <span class="s">&#39;atodorov@example.com&#39;</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">LOGGING</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&#39;version&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;disable_existing_loggers&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;mail_admins&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;level&#39;</span><span class="p">:</span> <span class="s">&#39;ERROR&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;django.utils.log.AdminEmailHandler&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s">&#39;loggers&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;django.request&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;mail_admins&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;level&#39;</span><span class="p">:</span> <span class="s">&#39;ERROR&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;propagate&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Used</span> <span class="k">as</span> <span class="n">the</span> <span class="n">From</span><span class="p">:</span> <span class="n">address</span> <span class="n">when</span> <span class="n">reporting</span> <span class="n">errors</span> <span class="n">to</span> <span class="n">admins</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Needs</span> <span class="n">to</span> <span class="n">be</span> <span class="n">verified</span> <span class="ow">in</span> <span class="n">Amazon</span> <span class="n">SES</span> <span class="k">as</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">sender</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SERVER_EMAIL</span> <span class="o">=</span> <span class="s">&#39;django@example.com&#39;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Amazon</span> <span class="n">Simple</span> <span class="n">Email</span> <span class="n">Service</span> <span class="n">settings</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">AWS_SES_ACCESS_KEY_ID</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxxxxxx&#39;</span>
</span><span class='line'><span class="n">AWS_SES_SECRET_ACCESS_KEY</span> <span class="o">=</span> <span class="s">&#39;xxxxxxxx&#39;</span>
</span><span class='line'><span class="n">EMAIL_BACKEND</span> <span class="o">=</span> <span class="s">&#39;django_ses.SESBackend&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You also need the <a href="https://github.com/hmarr/django-ses">django-ses</a>
dependency.</p>

<p>See <a href="http://docs.djangoproject.com/en/dev/topics/logging">http://docs.djangoproject.com/en/dev/topics/logging</a> for
more details on how to customize your logging configuration.</p>

<p>I am using this configuration successfully at RedHat's OpenShift PaaS environment.
Other users have
<a href="https://openshift.redhat.com/community/forums/express/missing-email-on-500-ise-w-django">reported</a>
it works for them too. Should work with any other PaaS provider.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Test: Amazon EBS vs. Instance Storage, Pt.1]]></title>
    <link href="http://atodorov.org/blog/2013/02/26/performance-test-amazon-ebs-vs-instance-storage-pt1/"/>
    <updated>2013-02-26T23:02:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/02/26/performance-test-amazon-ebs-vs-instance-storage-pt1</id>
    <content type="html"><![CDATA[<p>I'm exploring the possibility to speed-up my cloud database so I've run some
basic tests against storage options available to Amazon EC2 instances.
The instance was <a href="http://aws.amazon.com/ec2/instance-types/">m1.large</a>
with High I/O performance and two additional disks with the same size:</p>

<ul>
<li>/dev/xvdb - type EBS</li>
<li>/dev/xvdc - type instance storage</li>
</ul>


<p>Both are Xen para-virtual disks. The difference is that EBS is persistent
across reboots while instance storage is ephemeral.</p>

<h2>hdparm</h2>

<p>For a quick test I used <code>hdparm</code>. The manual says:</p>

<pre><code>-T  Perform timings of cache reads for benchmark and comparison purposes.
    This displays the speed of reading directly from the Linux buffer cache
    without disk access. This measurement is essentially an indication of
    the throughput of the processor, cache, and memory of the system under test.

-t  Perform timings of device reads for benchmark and comparison purposes.
    This displays the speed of reading through the buffer cache to the disk
    without any prior caching of data. This measurement is an indication of how
    fast the drive can sustain sequential data reads under Linux, without any
    filesystem overhead.
</code></pre>

<p>The results of 3 runs of hdparm are shown below:</p>

<pre><code># hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11984 MB in  1.98 seconds = 6038.36 MB/sec
 Timing buffered disk reads:  158 MB in  3.01 seconds =  52.52 MB/sec

/dev/xvdc:
 Timing cached reads:   11988 MB in  1.98 seconds = 6040.01 MB/sec
 Timing buffered disk reads:  1810 MB in  3.00 seconds = 603.12 MB/sec


# hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11892 MB in  1.98 seconds = 5991.51 MB/sec
 Timing buffered disk reads:  172 MB in  3.00 seconds =  57.33 MB/sec

/dev/xvdc:
 Timing cached reads:   12056 MB in  1.98 seconds = 6075.29 MB/sec
 Timing buffered disk reads:  1972 MB in  3.00 seconds = 657.11 MB/sec


# hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11994 MB in  1.98 seconds = 6042.39 MB/sec
 Timing buffered disk reads:  254 MB in  3.02 seconds =  84.14 MB/sec

/dev/xvdc:
 Timing cached reads:   11890 MB in  1.99 seconds = 5989.70 MB/sec
 Timing buffered disk reads:  1962 MB in  3.00 seconds = 653.65 MB/sec
</code></pre>

<p><strong>Result:</strong>
Sequential reads from instance storage are 10x faster compared to EBS on average.</p>

<h2>IOzone</h2>

<p>I'm running MySQL and sequential data reads are probably over idealistic scenario.
So I found another benchmark suite, called <a href="http://iozone.org">IOzone</a>.
I used the 3-414 version built from the official SRPM.</p>

<p>IOzone performs multiple tests. I'm interested in read/re-read, random-read/write,
read-backwards and stride-read.</p>

<p>For this round of testing I've tested with ext4 filesystem with and without journal
on both types of disks. I also experimented running Iozone inside a ramfs mounted
directory. However I didn't have the time to run the test suite multiple times.</p>

<p>Then I used
<a href="http://code.google.com/p/iozone-results-comparator/">iozone-results-comparator</a> to
visualize the results. (I had to do a minor fix to the code to run inside virtualenv
and install all missing dependencies).</p>

<p>Raw IOzone output, data visualization and the modified tools are available in the
<a href="http://s3.amazonaws.com/atodorov/blog/aws_disk_benchmark_w_iozone.tar.bz2">aws_disk_benchmark_w_iozone.tar.bz2</a>
file (size 51M).</p>

<p><strong>Graphics</strong></p>

<p>EBS without journal(Baseline) vs. Instance Storage without journal(Set1)
<img src="/images/aws_iozone/ebs_woj_vs_is_woj.png" title="EBS vs. Instance Storage" alt="EBS vs. Instance Storage" /></p>

<p>Instance Storage without journal(Baseline) vs. Ramfs(Set1)
<img src="/images/aws_iozone/ebs_woj_vs_is_woj.png" title="IS vs. Ramfs" alt="IS vs. Ramfs" /></p>

<p><strong>Results</strong></p>

<ul>
<li>ext4 journal has no effect on reads, causes slow down when writing to disk. This
is expected;</li>
<li>Instance storage is faster compared to EBS but not much.
If I understand the results correctly, read performance is similar in some cases;</li>
<li>Ramfs is definitely the fastest but read performance compared to instance storage
is not two-fold (or more) as I expected;</li>
</ul>


<p><strong>Conclusion</strong></p>

<p>Instance storage appears to be faster (and this is expected) but I'm still not sure if
my application will gain any speed improvement or how much if migrated to read from
instance storage (or ramfs) instead of EBS. I will be performing more real-world
test next time, by comparing execution time for some of my largest SQL queries.</p>

<p>If you have other ideas how to adequately measure I/O performance in the AWS cloud,
please use the comments below.</p>
]]></content>
  </entry>
  
</feed>
