<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-02-10T14:18:32+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FOSDEM 2014 Report - Day #1 Python, Stands and Lightning Talks]]></title>
    <link href="http://atodorov.org/blog/2014/02/03/fosdem-2014-report-day-1-python-stands-lightning-talks/"/>
    <updated>2014-02-03T21:37:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/02/03/fosdem-2014-report-day-1-python-stands-lightning-talks</id>
    <content type="html"><![CDATA[<p>As promised I'm starting catching up on blogging after being sick and traveling.
Here's my report of what I saw and found interesting at this year's
<a href="https://fosdem.org/2014/">FOSDEM</a> which was held the last weekend in Brussels.</p>

<p>On Friday evening I've tried to attend the FOSDEM beer event at Delirium Cafe but
had a bad luck. At 21:30 the place was already packed with people. I managed to get
access to only one of the rooms but it looked like the wrong one :(. I think the space
is definitely small for all who are willing to attend.</p>

<p>During Saturday morning I did a quick sight-seeing most notably
<a href="www.migsworldwines.be/">Mig's wine shop</a> and the area around it since I've never
been to this part of the city before. Then I took off to FOSDEM arriving at noon
(IOW not too late).</p>

<p>I've spent most of my day at building K where project stands were and I stayed quite
a long time around the Python and Perl stands meeting new people and talking to them
about their upgrade practices and how they manage package dependencies
(aka promoting <a href="http://www.dif.io">Difio</a>).</p>

<p><img src="/images/fosdem/2014/fedora_octopus.jpg" title="Fedora Octopus" alt="Fedora Octopus" /></p>

<p>Fedora stand was busy with 3D printing this year. I've seen 3D printing
before but here I was amazed of the fine-grained quality of the pieces produced.
This is definitely something to have in mind if you are building physical products.</p>

<p>Red Hat's presence was very strong this year. In addition to the numerous talks they
gave there were also oVirt and OpenShift Origin stands which were packed with people.
I couldn't even get close to say hi or take a picture.</p>

<p><img src="http://atodorov.org/images/fosdem/2014/doudou_linux.png" alt="DoudouLinux" style="float:left;margin-right:10px;"/></p>

<p>Near the end of the day I went to listen to some of the lightning talks. The ones that
I liked the most were MATE Desktop and DoudouLinux.</p>

<p>The thing about MATE which I liked
is that they have a <a href="https://github.com/mate-desktop/mate-university">MATE University</a>
initiative which is targeting developers who want to learn how to develop MATE extensions.
This is pretty cool with respect to community and developers on-boarding.</p>

<p><a href="http://www.doudoulinux.org">DoudouLinux</a> is a Debian based distribution targeted at
small children (2 or 3 years old) based on simple desktop and educational activities.
I've met project leader and founder Jean-Michel Philippe who gave the talk. We chatted for
a while when Alejandro Simon from <a href="http://www.kano.me/">Kano</a> came around and showed us a prototype
of their computer for children. I will definitely give DoudouLinux a try and maybe pre-order Kano as well.</p>

<p>In the evening there was a Python beer event at Delirium and after that dinner at
Chez Leon where I had snails and rabbit with cherries in cherry beer sauce.
I've had a few beers with Marc-Andre from <a href="http://egenix.com">eGenix</a>
and Charlie from <a href="http://www.clark-consulting.eu/">Clark Consulting</a> and the talk
was mostly about non-technical stuff which was nice.</p>

<p>After that we went back to Delirium and
re-united with <a href="http://akurtakov.blogspot.com">Alexander Kurtakov</a> and other folks from
Red Hat for more cherry beer!</p>

<p>Report of the second day of FOSDEM'14 on Sunday is
<a href="/blog/2014/02/03/fosdem-2014-report-day-2-testing-and-automation/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idempotent Django Email Sender with Amazon SQS and Memcache]]></title>
    <link href="http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/"/>
    <updated>2013-12-11T23:29:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache</id>
    <content type="html"><![CDATA[<p>Recently I wrote about my problem with
<a href="/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/">duplicate Amazon SQS messages causing multiple emails</a>
for <a href="http://www.dif.io">Difio</a>. After considering several options and
feedback from
<a href="https://twitter.com/atodorov_/status/409429840820199424">@Answers4AWS</a>
I wrote a small decorator to fix this.</p>

<p>It uses the cache backend to prevent the task from executing twice
during the specified time frame. The code is available at
<a href="https://djangosnippets.org/snippets/3010/">https://djangosnippets.org/snippets/3010/</a>.</p>

<p>As stated on Twitter you should use Memcache (or ElastiCache) for this.
If using Amazon S3 with my
<a href="https://github.com/atodorov/django-s3-cache">django-s3-cache</a> don't use the
<code>us-east-1</code> region because it is eventually consistent.</p>

<p>The solution is fast and simple on the development side and uses my existing
cache infrastructure so it doesn't cost anything more!</p>

<p>There is still a race condition between marking the message as processed
and the second check but nevertheless this should minimize the possibility of
receiving duplicate emails to an accepted level. Only time will tell though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug in Python URLGrabber/cURL on Fedora and Amazon Linux]]></title>
    <link href="http://atodorov.org/blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux/"/>
    <updated>2013-11-29T14:05:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux</id>
    <content type="html"><![CDATA[<p>Accidentally I have discovered a bug for Python's
URLGrabber module which has to do with change in behavior in libcurl.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">urlgrabber.grabber</span> <span class="kn">import</span> <span class="n">URLGrabber</span>
</span><span class='line'><span class="n">g</span> <span class="o">=</span> <span class="n">URLGrabber</span><span class="p">(</span><span class="n">reget</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">urlgrab</span><span class="p">(</span><span class="s">&#39;https://s3.amazonaws.com/production.s3.rubygems.org/gems/columnize-0.3.6.gem&#39;</span><span class="p">,</span> <span class="s">&#39;/tmp/columnize.gem&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;console&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">976</span><span class="p">,</span> <span class="ow">in</span> <span class="n">urlgrab</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_retry</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">retryfunc</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">880</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_retry</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">r</span> <span class="o">=</span> <span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="p">(</span><span class="n">opts</span><span class="p">,)</span> <span class="o">+</span> <span class="n">args</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">962</span><span class="p">,</span> <span class="ow">in</span> <span class="n">retryfunc</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fo</span> <span class="o">=</span> <span class="n">PyCurlFileObject</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1056</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">self</span><span class="o">.</span><span class="n">_do_open</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1307</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_do_open</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">self</span><span class="o">.</span><span class="n">_set_opts</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">File</span> <span class="s">&quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1161</span><span class="p">,</span> <span class="ow">in</span> <span class="n">_set_opts</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">self</span><span class="o">.</span><span class="n">curl_obj</span><span class="o">.</span><span class="n">setopt</span><span class="p">(</span><span class="n">pycurl</span><span class="o">.</span><span class="n">SSL_VERIFYHOST</span><span class="p">,</span> <span class="n">opts</span><span class="o">.</span><span class="n">ssl_verify_host</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">error</span><span class="p">:</span> <span class="p">(</span><span class="mi">43</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote></blockquote>

<p>The code above works fine with curl-7.27 or older while it breaks with curl-7.29 and
newer. As explained by
<a href="http://lists.baseurl.org/pipermail/yum-devel/2013-November/010428.html">Zdenek Pavlas</a>
the reason is an internal change in libcurl which doesn't accept a value of 1 anymore!</p>

<p>The bug is reproducible with a newer libcurl version and a vanilla urlgrabber==3.9.1
from PyPI (e.g. inside a virtualenv). The latest python-urlgrabber RPM packages in both
Fedora and Amazon Linux already have the fix.</p>

<p>I have tested the patch proposed by Zdenek and it works for me. I still have no idea why
there aren't any updates released on PyPI though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week: Python Testing, Chris DiBona on Open Source and OpenShift ENV Variables]]></title>
    <link href="http://atodorov.org/blog/2013/10/11/this-week-python-chris-dibona-openshift/"/>
    <updated>2013-10-11T10:45:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/10/11/this-week-python-chris-dibona-openshift</id>
    <content type="html"><![CDATA[<p>Here is a random collection of links I came across this week which
appear interesting to me but I don't have time to blog about in details.</p>

<h2>Making a Multi-branch Test Server for Python Apps</h2>

<p>If you are wondering how to test different feature branches of your Python
application but don't have the resources to create separate test servers this
is for you:
<a href="http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server">http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server</a>!</p>

<p><em>Kudos to the python-django-bulgaria Google group for finding this link!</em></p>

<h2>OpenSource.com Interview with Chris DiBona</h2>

<p>Just read it at
<a href="http://opensource.com/business/13/10/interview-chris-dibona">http://opensource.com/business/13/10/interview-chris-dibona</a>.</p>

<p>I particularly like the part where he called open source "brutal".</p>

<p><blockquote><p>You once called open source “brutal”. What did you mean by that?</p></p><p><p>...</p></p><p><p>I think that it is because open source projects are able to only work with the<br/>productive people and ignore everyone else. That behavior can come across as<br/>very harsh or exclusionary, and that's because it is that: brutally harsh and<br/>exclusionary of anyone who isn't contributing.</p></p><p><p>...</p></p><p><p>So, I guess what I'm saying is that survival of the fittest as practiced in the<br/>open source world is a pretty brutal mechanism, but it works very very well for<br/>producing quality software. Boy is it hard on newcomers though...</p></blockquote></p>

<h2>OpenShift Finally Introduces Environment Variables</h2>

<p>Yes! Finally!</p>

<pre><code>    rhc set-env VARIABLE1=VALUE1 -a myapp
</code></pre>

<p>No need for
<a href="/blog/2013/07/08/tip-setting-secure-env-variables-on-red-hat-openshift/">my work around</a>
anymore! I will give the new feature a go very soon.</p>

<p>Read more about it at the OpenShift blog:
<a href="https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps">https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps</a>.</p>

<p>Have you found anything interesting this week? Please share in the comments below! Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux and Python Tools To Compare Images]]></title>
    <link href="http://atodorov.org/blog/2013/05/17/linux-and-python-tools-to-compare-images/"/>
    <updated>2013-05-17T21:13:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/05/17/linux-and-python-tools-to-compare-images</id>
    <content type="html"><![CDATA[<p>How to compare two images in Python? A tricky question with quite a few answers.
Since my needs are simple, my solution is simpler!</p>

<p><img src="http://atodorov.org/images/difio_compare.png" alt="Difio Google +1 changes" style="clear:both;display:block"/>
<a href="http://www.dif.io">dif.io</a> homepage before and after it got a G+1.</p>

<h2>ImageMagic is magic</h2>

<p>If you haven't heard of <a href="http://www.imagemagick.org/">ImageMagic</a> then you've been
living in a cave on a deserted island! The suite contains the <code>compare</code> command
which mathematically and visually annotates the difference between two images.</p>

<p>The third image above was produced with:</p>

<pre><code>$ compare difio_10.png difio_11.png difio_diff.png
</code></pre>

<p>Differences are displayed in red (default) and the original image is seen in the
background. As shown, the Google +1 button and count has changed between the two
images. <code>compare</code> is a nice tool for manual inspection and debugging.
It works well in this case because the images are lossless PNGs and are regions of
screen shots where most objects are the same.</p>

<p><img src="http://atodorov.org/images/chestnut_compare.jpg" alt="JPEG quality reduction" style="clear:both;display:block"/>
Chestnuts I had in Rome. 100% to 99% quality reduction.</p>

<p>As seen on the second image set only 1% of JPEG quality change leads to many small
differences in the image, which are invisible to the naked eye.</p>

<h2>Python Imaging Library aka PIL</h2>

<p><a href="http://www.pythonware.com/products/pil/">PIL</a> is another powerful tool for
image manipulation. I googled around and found some answers to my original
questions
<a href="http://stackoverflow.com/questions/1927660/compare-two-images-the-python-linux-way">here</a>.
The proposed solution is to calculate
<a href="https://en.wikipedia.org/wiki/Root_mean_square">RMS</a> of the two images
and compare that with some threshold to establish the level of certainty that
two images are identical.</p>

<h2>Simple solution</h2>

<p>I've been working on a script lately which needs to know what is displayed on
the screen and recognize some of the objects. Calculating image similarity is
quite complex but comparing if two images are <strong>exactly</strong> identical is not.
Given my environment and the fact
that I'm comparing screen shots where only few areas changed
(see first image above for example) led to the following solution:</p>

<ul>
<li>Take a screen shot;</li>
<li>Crop a particular area of the image which needs to be examined;</li>
<li>Compare to a baseline image of the same area created manually;</li>
<li>Don't use RMS, use the image histogram only to speed up calculation.</li>
</ul>


<p>I've prepared the baseline images with GIMP and tested couple of scenarios
using <code>compare</code>. Here's how it looks in code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">dogtail.utils</span> <span class="kn">import</span> <span class="n">screenshot</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">baseline_histogram</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;/home/atodorov/baseline.png&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">histogram</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">screenshot</span><span class="p">())</span>
</span><span class='line'><span class="n">region</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">crop</span><span class="p">((</span><span class="mi">860</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">950</span><span class="p">,</span> <span class="mi">320</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span> <span class="n">region</span><span class="o">.</span><span class="n">histogram</span><span class="p">()</span> <span class="o">==</span> <span class="n">baseline_histogram</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Results</h2>

<p>The presented solution was easy to program, works fast and reliably for my use case.
In fact after several iterations I've added a second baseline image to account for some
unidentified noise which appears randomly in the first region. As far as I can tell
the two checks combined are 100% accurate.</p>

<h2>Field of application</h2>

<p>I'm working on QA automation where this comes handy. However you may try some
lame CAPTCHA recognition by comparing regions to a pre-defined baseline. Let me know
if you come up with a cool idea or actually used this in code.</p>

<p>I'd love to hear
about interesting projects which didn't get too complicated because of image
recognition.</p>
]]></content>
  </entry>
  
</feed>
