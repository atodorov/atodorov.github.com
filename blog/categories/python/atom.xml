<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-24T22:12:52+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Idempotent Django Email Sender with Amazon SQS and Memcache]]></title>
    <link href="http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/"/>
    <updated>2013-12-11T23:29:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache</id>
    <content type="html"><![CDATA[<p>Recently I wrote about my problem with
<a href="/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/">duplicate Amazon SQS messages causing multiple emails</a>
for <a href="http://www.dif.io">Difio</a>. After considering several options and
feedback from
<a href="https://twitter.com/atodorov_/status/409429840820199424">@Answers4AWS</a>
I wrote a small decorator to fix this.</p>

<p>It uses the cache backend to prevent the task from executing twice
during the specified time frame. The code is available at
<a href="https://djangosnippets.org/snippets/3010/">https://djangosnippets.org/snippets/3010/</a>.</p>

<p>As stated on Twitter you should use Memcache (or ElastiCache) for this.
If using Amazon S3 with my
<a href="https://github.com/atodorov/django-s3-cache">django-s3-cache</a> don't use the
<code>us-east-1</code> region because it is eventually consistent.</p>

<p>The solution is fast and simple on the development side and uses my existing
cache infrastructure so it doesn't cost anything more!</p>

<p>There is still a race condition between marking the message as processed
and the second check but nevertheless this should minimize the possibility of
receiving duplicate emails to an accepted level. Only time will tell though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug in Python URLGrabber/cURL on Fedora and Amazon Linux]]></title>
    <link href="http://atodorov.org/blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux/"/>
    <updated>2013-11-29T14:05:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux</id>
    <content type="html"><![CDATA[<p>Accidentally I have discovered a bug for Python's
URLGrabber module which has to do with change in behavior in libcurl.</p>

<p>{% codeblock lang:python %}</p>

<blockquote><blockquote><blockquote><p>from urlgrabber.grabber import URLGrabber
g = URLGrabber(reget=None)
g.urlgrab('https://s3.amazonaws.com/production.s3.rubygems.org/gems/columnize-0.3.6.gem', '/tmp/columnize.gem')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 976, in urlgrab</p>

<pre><code>return self._retry(opts, retryfunc, url, filename)
</code></pre>

<p>  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 880, in _retry</p>

<pre><code>r = apply(func, (opts,) + args, {})
</code></pre>

<p>  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 962, in retryfunc</p>

<pre><code>fo = PyCurlFileObject(url, filename, opts)
</code></pre>

<p>  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 1056, in <strong>init</strong></p>

<pre><code>self._do_open()
</code></pre>

<p>  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 1307, in _do_open</p>

<pre><code>self._set_opts()
</code></pre>

<p>  File "/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py", line 1161, in _set_opts</p>

<pre><code>self.curl_obj.setopt(pycurl.SSL_VERIFYHOST, opts.ssl_verify_host)
</code></pre>

<p>error: (43, '')</p>

<p>{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<p>The code above works fine with curl-7.27 or older while it breaks with curl-7.29 and
newer. As explained by
<a href="http://lists.baseurl.org/pipermail/yum-devel/2013-November/010428.html">Zdenek Pavlas</a>
the reason is an internal change in libcurl which doesn't accept a value of 1 anymore!</p>

<p>The bug is reproducible with a newer libcurl version and a vanilla urlgrabber==3.9.1
from PyPI (e.g. inside a virtualenv). The latest python-urlgrabber RPM packages in both
Fedora and Amazon Linux already have the fix.</p>

<p>I have tested the patch proposed by Zdenek and it works for me. I still have no idea why
there aren't any updates released on PyPI though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week: Python Testing, Chris DiBona on Open Source and OpenShift ENV Variables]]></title>
    <link href="http://atodorov.org/blog/2013/10/11/this-week-python-chris-dibona-openshift/"/>
    <updated>2013-10-11T10:45:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/10/11/this-week-python-chris-dibona-openshift</id>
    <content type="html"><![CDATA[<p>Here is a random collection of links I came across this week which
appear interesting to me but I don't have time to blog about in details.</p>

<h2>Making a Multi-branch Test Server for Python Apps</h2>

<p>If you are wondering how to test different feature branches of your Python
application but don't have the resources to create separate test servers this
is for you:
<a href="http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server">http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server</a>!</p>

<p><em>Kudos to the python-django-bulgaria Google group for finding this link!</em></p>

<h2>OpenSource.com Interview with Chris DiBona</h2>

<p>Just read it at
<a href="http://opensource.com/business/13/10/interview-chris-dibona">http://opensource.com/business/13/10/interview-chris-dibona</a>.</p>

<p>I particularly like the part where he called open source "brutal".</p>

<p>{% blockquote %}
You once called open source “brutal”. What did you mean by that?</p>

<p>...</p>

<p>I think that it is because open source projects are able to only work with the
productive people and ignore everyone else. That behavior can come across as
very harsh or exclusionary, and that's because it is that: brutally harsh and
exclusionary of anyone who isn't contributing.</p>

<p>...</p>

<p>So, I guess what I'm saying is that survival of the fittest as practiced in the
open source world is a pretty brutal mechanism, but it works very very well for
producing quality software. Boy is it hard on newcomers though...
{% endblockquote %}</p>

<h2>OpenShift Finally Introduces Environment Variables</h2>

<p>Yes! Finally!</p>

<pre><code>    rhc set-env VARIABLE1=VALUE1 -a myapp
</code></pre>

<p>No need for
<a href="/blog/2013/07/08/tip-setting-secure-env-variables-on-red-hat-openshift/">my work around</a>
anymore! I will give the new feature a go very soon.</p>

<p>Read more about it at the OpenShift blog:
<a href="https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps">https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps</a>.</p>

<p>Have you found anything interesting this week? Please share in the comments below! Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux and Python Tools To Compare Images]]></title>
    <link href="http://atodorov.org/blog/2013/05/17/linux-and-python-tools-to-compare-images/"/>
    <updated>2013-05-17T21:13:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/05/17/linux-and-python-tools-to-compare-images</id>
    <content type="html"><![CDATA[<p>How to compare two images in Python? A tricky question with quite a few answers.
Since my needs are simple, my solution is simpler!</p>

<p><img src="http://atodorov.org/images/difio_compare.png" alt="Difio Google +1 changes" style="clear:both;display:block"/>
<a href="http://www.dif.io">dif.io</a> homepage before and after it got a G+1.</p>

<h2>ImageMagic is magic</h2>

<p>If you haven't heard of <a href="http://www.imagemagick.org/">ImageMagic</a> then you've been
living in a cave on a deserted island! The suite contains the <code>compare</code> command
which mathematically and visually annotates the difference between two images.</p>

<p>The third image above was produced with:</p>

<pre><code>$ compare difio_10.png difio_11.png difio_diff.png
</code></pre>

<p>Differences are displayed in red (default) and the original image is seen in the
background. As shown, the Google +1 button and count has changed between the two
images. <code>compare</code> is a nice tool for manual inspection and debugging.
It works well in this case because the images are lossless PNGs and are regions of
screen shots where most objects are the same.</p>

<p><img src="http://atodorov.org/images/chestnut_compare.jpg" alt="JPEG quality reduction" style="clear:both;display:block"/>
Chestnuts I had in Rome. 100% to 99% quality reduction.</p>

<p>As seen on the second image set only 1% of JPEG quality change leads to many small
differences in the image, which are invisible to the naked eye.</p>

<h2>Python Imaging Library aka PIL</h2>

<p><a href="http://www.pythonware.com/products/pil/">PIL</a> is another powerful tool for
image manipulation. I googled around and found some answers to my original
questions
<a href="http://stackoverflow.com/questions/1927660/compare-two-images-the-python-linux-way">here</a>.
The proposed solution is to calculate
<a href="https://en.wikipedia.org/wiki/Root_mean_square">RMS</a> of the two images
and compare that with some threshold to establish the level of certainty that
two images are identical.</p>

<h2>Simple solution</h2>

<p>I've been working on a script lately which needs to know what is displayed on
the screen and recognize some of the objects. Calculating image similarity is
quite complex but comparing if two images are <strong>exactly</strong> identical is not.
Given my environment and the fact
that I'm comparing screen shots where only few areas changed
(see first image above for example) led to the following solution:</p>

<ul>
<li>Take a screen shot;</li>
<li>Crop a particular area of the image which needs to be examined;</li>
<li>Compare to a baseline image of the same area created manually;</li>
<li>Don't use RMS, use the image histogram only to speed up calculation.</li>
</ul>


<p>I've prepared the baseline images with GIMP and tested couple of scenarios
using <code>compare</code>. Here's how it looks in code:</p>

<p>{% codeblock lang:python %}
from PIL import Image
from dogtail.utils import screenshot</p>

<p>baseline_histogram = Image.open('/home/atodorov/baseline.png').histogram()</p>

<p>img = Image.open(screenshot())
region = img.crop((860, 300, 950, 320))
print region.histogram() == baseline_histogram
{% endcodeblock %}</p>

<h2>Results</h2>

<p>The presented solution was easy to program, works fast and reliably for my use case.
In fact after several iterations I've added a second baseline image to account for some
unidentified noise which appears randomly in the first region. As far as I can tell
the two checks combined are 100% accurate.</p>

<h2>Field of application</h2>

<p>I'm working on QA automation where this comes handy. However you may try some
lame CAPTCHA recognition by comparing regions to a pre-defined baseline. Let me know
if you come up with a cool idea or actually used this in code.</p>

<p>I'd love to hear
about interesting projects which didn't get too complicated because of image
recognition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Deploy Python Hotfix on RedHat OpenShift Cloud]]></title>
    <link href="http://atodorov.org/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud/"/>
    <updated>2013-04-24T11:58:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud</id>
    <content type="html"><![CDATA[<p>In this article I will show you how to deploy hotfix versions for
Python packages on the RedHat <a href="http://openshift.com">OpenShift</a> PaaS cloud.</p>

<h2>Background</h2>

<p>You are already running a Python application on your OpenShift instance.
You are using some 3rd party dependencies when you find a bug in one of them.
You go forward, fix the bug and submit a
<a href="https://github.com/ahupp/python-magic/pull/31">pull request</a>.
You don't want to wait for upstream to release a new version but rather
build a hotfix package yourself and deploy to production immediately.</p>

<h2>Solution</h2>

<p>There are two basic approaches to solving this problem:</p>

<ol>
<li>Include the hotfix package source code in your application, i.e.
add it to your git tree or;</li>
<li>Build the hotfix separately and deploy as a dependency. Don't
include it in your git tree, just add a requirement on the hotfix version.</li>
</ol>


<p>I will talk about the later. The tricky part here is to instruct the cloud environment
to use your package (including the proper location) and not upstream or their local
mirror.</p>

<p>Python applications hosted at <a href="http://openshift.com">OpenShift</a> don't support
<code>requirements.txt</code> which can point to various package sources and even install
packages directly from GitHub. They support <code>setup.py</code> which fetches packages
from <a href="http://pypi.python.org">http://pypi.python.org</a> but it is flexible enough to support other locations.</p>

<h2>Building the hotfix</h2>

<p>First of all we'd like to build a hotfix package. This will be the upstream
version that we are currently using plus the patch for our critical issue:</p>

<pre><code>$ wget https://pypi.python.org/packages/source/p/python-magic/python-magic-0.4.3.tar.gz
$ tar -xzvf python-magic-0.4.3.tar.gz 
$ cd python-magic-0.4.3
$ curl https://github.com/ahupp/python-magic/pull/31.patch | patch 
</code></pre>

<p>Verify the patch has been applied correctly and then modify <code>setup.py</code> to
increase the version string. In this case I will set it to <code>version='0.4.3.1'</code>.</p>

<p>Then build the new package using <code>python setup.py sdist</code> and upload it to a web server.</p>

<h2>Deploying to OpenShift</h2>

<p>Modify <code>setup.py</code> and specify the hotfix version. Because this version is not on PyPI
and will not be on OpenShift's local mirror you need to provide the location where it can
be found. This is done with the <code>dependency_links</code> parameter to <code>setup()</code>. Here's how it looks:</p>

<p>{% codeblock lang:diff %}
diff --git a/setup.py b/setup.py
index c6e837c..2daa2a9 100644
--- a/setup.py
+++ b/setup.py
@@ -6,5 +6,6 @@ setup(name='YourAppName',</p>

<pre><code>   author='Your Name',
   author_email='example@example.com',
   url='http://www.python.org/sigs/distutils-sig/',
</code></pre>

<ul>
<li>   install_requires=['python-magic==0.4.3'],</li>
<li>   dependency_links=['https://s3.amazonaws.com/atodorov/blog/python-magic-0.4.3.1.tar.gz'],</li>
<li>   install_requires=['python-magic==0.4.3.1'],
  )
{% endcodeblock %}</li>
</ul>


<p>Now just git push to OpenShift and observe the console output:</p>

<pre><code>remote: Processing dependencies for YourAppName==1.0
remote: Searching for python-magic==0.4.3.1
remote: Best match: python-magic 0.4.3.1
remote: Downloading https://s3.amazonaws.com/atodorov/blog/python-magic-0.4.3.1.tar.gz
remote: Processing python-magic-0.4.3.1.tar.gz
remote: Running python-magic-0.4.3.1/setup.py -q bdist_egg --dist-dir /tmp/easy_install-ZRVMBg/python-magic-0.4.3.1/egg-dist-tmp-R_Nxie
remote: zip_safe flag not set; analyzing archive contents...
remote: Removing python-magic 0.4.3 from easy-install.pth file
remote: Adding python-magic 0.4.3.1 to easy-install.pth file
</code></pre>

<p>Congratulations! Your hotfix package has just been deployed.</p>

<p>This approach should work for other cloud providers and other programming languages
as well. Let me know if you have any experience with that.</p>
]]></content>
  </entry>
  
</feed>
