<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fedora.planet | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/fedora-planet/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2015-11-24T17:19:35+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub Bugzilla Hook]]></title>
    <link href="http://atodorov.org/blog/2015/11/24/github-bugzilla-hook/"/>
    <updated>2015-11-24T13:32:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/24/github-bugzilla-hook</id>
    <content type="html"><![CDATA[<p>Last month I've created a tool which adds comments to Bugzilla when a commit
message references a bug number. It was done as a proof of concept and didn't
receive much attention at the time. Today I'm happy to announce the existence
of <a href="https://github.com/atodorov/github-bugzilla-hook">GitHub Bugzilla Hook</a>.</p>

<p>I've used David Shea's
<a href="https://github.com/rhinstaller/github-email-hook/">GitHub Email Hook</a> as my
starting template and only modified it where needed. GitHub Bugzilla Hook will
examine push data and post comments for every unique bug+branch combination.
Once a comment for that particular bug+branch combination is made, new ones
will not be posted, even if later commits reference the same bug.
My main assumption is commits which are related to a bug will be pushed together
most of the times so there shouldn't be lots of noise in Bugzilla.</p>

<p>See <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1274703">rhbz#1274703</a> for
example of how the comments look. The parser behavior is taken from anaconda
and conforms to the style the Red Hat Installer Engineering Team uses.
Hopefully you find it useful as well.</p>

<p>My next step is to find a hosting place for this script and hook it up
with the rhinstaller GitHub repos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bad Stub Design in DNF, Pt.2 ]]></title>
    <link href="http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf/"/>
    <updated>2015-11-23T15:55:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf</id>
    <content type="html"><![CDATA[<p>Do you remember my example of a
<a href="/blog/2015/09/25/unit-testing-bad-stub-design-in-dnf/">bad stub design in DNF</a> ?
At that time I didn't have a good example of why this is a bad design and what are the
consequences of it. Today I have!</p>

<p>From my comment on
<a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/118">PR #118</a>
<blockquote><p>Note: the benefit of this patch are quite subtle.<br/>I've played around with creating a few more tests and the benefit I see affect<br/>only a few lines of code.</p></p><p><p>For #114 there doesn't seem to be any need to test _get_query directly,<br/>although we call<br/>```</p></p><p><pre><code>   q = self.base.sack.query()<br/>   q = q.available()<br/></code></pre></p><p><p>```</p></p><p><p>which will benefit from this PR b/c we're stubbing out the entire Sack object.<br/>I will work on a test later today/tomorrow to see how it looks.</p></p><p><p>OTOH for #113 where we modify _get_query the test can look something like this:</p></p><p><p>```</p></p><p><pre><code>def test_get_query_with_local_rpm(self):<br/>    try:<br/>        (fs, rpm_path) = tempfile.mkstemp('foobar-99.99-1.x86_64.rpm')<br/>        # b/c self.cmd.cli.base is a mock object add_remote_rpm<br/>        # will not update the available packages while testing.<br/>        # it is expected to hit an exception<br/>        with self.assertRaises(dnf.exceptions.PackageNotFoundError):<br/>            self.cmd._get_query(rpm_path)<br/>        self.cmd.cli.base.add_remote_rpm.assert_called_with(rpm_path)<br/>    finally:<br/>        os.remove(rpm_path)<br/></code></pre></p><p><p>```</p></p><p><p>Note the comment above the with block. If we leave out <code>_get_query</code> as before<br/>(a simple stub function) we're not going to be able to use <code>assert_called_with</code><br/>later.</p></blockquote></p>

<p>Now a more practical example. See
<a href="https://github.com/rpm-software-management/dnf-plugins-core/commit/fe130669ffc4c1d6eba8f10cda35ab4d803d5a3d">commit fe13066</a>
- in case the package is not found we log the error. In case configuration is
<code>strict=True</code> then the plugin will raise another exception. With the initial version
of the stubs this change in behavior is silently ignored. If there was an error
in the newly introduced lines it would go straight into production because the
existing tests passed.</p>

<p>What happens is that <code>test_get_packages()</code> calls <code>_get_packages(['notfound'])</code>,
which is not the real code but a test stub and returns an empty list in this case.
The empty list is expected from the test and it will not fail!</p>

<p>With my new stub design the test will execute the actual <code>_get_packages()</code>
method from <code>download.py</code> and choke on the exception. The test itself needs
to be modified, which is done in
<a href="https://github.com/atodorov/dnf-plugins-core/commit/2c2b34237c99cbf32e23bde43027d22873f4e8b7">commit 2c2b34</a>
and no further errors were found.</p>

<p>So let me summarize:
<strong>
When using mocks, stubs and fake objects we should be replacing external
dependencies of the software under test, not internal methods from the SUT!
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Running DNF Plugins from git]]></title>
    <link href="http://atodorov.org/blog/2015/11/23/tip-running-dnf-plugins-from-git/"/>
    <updated>2015-11-23T15:50:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/23/tip-running-dnf-plugins-from-git</id>
    <content type="html"><![CDATA[<p>This is mostly for self reference because it is not currently documented
in the code. To use dnf plugins from a local git checkout modify your
<code>/etc/dnf/dnf.conf</code> and add the following line under the <code>[main]</code> section:</p>

<pre><code>pluginpath=/path/to/dnf-plugins-core/plugins
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated MacBook Air Drivers for RHEL 7.2]]></title>
    <link href="http://atodorov.org/blog/2015/11/21/updated-macbook-air-drivers-for-rhel-7.2/"/>
    <updated>2015-11-21T11:27:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/21/updated-macbook-air-drivers-for-rhel-7.2</id>
    <content type="html"><![CDATA[<p>Yesterday I've upgraded to
<a href="https://access.redhat.com/announcements/2058583">Red Hat Enterprise Linux 7.2</a>
on my MacBook Air and I decided to rebuild the wifi and backlight drivers.
Wifi broke immediately but I was able to fix the build with a
<a href="https://github.com/atodorov/wl-kmod-for-rhel7/commit/88d678a25eb702ce36f7c39471edefb65de57ad5">simple patch</a>.
I'm now using the newly built <em>kmod-wl-3.10.0-327.el7.x86_64-6.30.223.248-7.el7.x86_64</em>
and it appears to work as expected.</p>

<p>The <em>mba6x_bl</em> driver built without problems however I'm having problems when
closing the laptop lid. The screen stays on and (I think) the computer doesn't
suspend. My battery was drained as I left the computer as-is overnight. Suspending
from the Desktop menu however appears to work. See
<a href="https://github.com/patjak/mba6x_bl/issues/41">Issue #41</a>. I'd love to get some
help in debugging what's going wrong and trying to fix it. At this point I have
no idea where to look and if it's the driver to blame or something else on the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revamping Anaconda's Dogtail Tests]]></title>
    <link href="http://atodorov.org/blog/2015/11/20/revamping-anaconda-dogtail-tests/"/>
    <updated>2015-11-20T15:34:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/20/revamping-anaconda-dogtail-tests</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2015/11/13/running-anaconda-from-git/">previous post</a> I briefly talked
about running anaconda from a git checkout. My goal was to rewrite <code>tests/gui/</code> so
that they don't use a LiveCD and virtual machines anymore. I'm pleased to announce
that this is already done (still not merged), see
<a href="https://github.com/rhinstaller/anaconda/pull/457">PR#457</a>.</p>

<p>The majority of the changes are just shuffling bits around and deleting
unused code. The existing UI tests were mostly working and only needed minor
changes. There are two things which didn't work and are temporarily disabled:</p>

<ul>
<li>Clicking the Help button results in
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1282432">rhbz#1282432</a>,
which in turn may be hiding another bug behind it;</li>
<li>Looping over the available languages resulted in AT-SPI NonImplementedError
which I'm going to debug next.</li>
</ul>


<p>To play around with this make sure you have accessibility enabled and:</p>

<pre><code># cd anaconda/
# export top_srcdir=`pwd`
# setenforce 0
# cd tests/gui/
# ./run_gui_tests.sh
</code></pre>

<p><strong>Note:</strong> you also need Dogtail for Python3 which isn't officially available
yet. I'm building from
<a href="https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm">https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm</a></p>

<p>My future plans are to figure out how to re-enable what is temporarily
disabled, update <code>run_gui_tests.sh</code> to properly start gnome-session and
enable accessibility, do a better job cleaning up after a failure,
enable coverage and hook everything into <code>make ci</code>.</p>

<p>Happy testing!</p>
]]></content>
  </entry>
  
</feed>
