<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fedora.planet | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/fedora-planet/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2015-09-30T12:12:27+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thunderbolt to VGA adapter on Linux]]></title>
    <link href="http://atodorov.org/blog/2015/09/30/thunderbolt-to-vga-adapter-on-linux/"/>
    <updated>2015-09-30T11:59:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/09/30/thunderbolt-to-vga-adapter-on-linux</id>
    <content type="html"><![CDATA[<p>I've previously written about my
<a href="blog/2015/05/04/thunderbolt-to-ethernet-adapter-on-linux/">Thunderbolt to Ethernet adapter working on Linux</a>
despite claims that it should not. Recently I've used my MacBook to do a presentation
and the Thunderbolt to VGA adapter worked well enough.</p>

<p>It was an Acer adapter but I have no more details b/c it wasn't mine.</p>

<p>Before the event I've tested it and it worked so on the day of the event I've
freshly rebooted my laptop to be sure no crashed processes or anything like that
was running and gave it a go.</p>

<p>First time I plugged in the MacBook everything worked like a charm. Then my computer was
unplugged and the lid closed, causing it to suspend. The second time I've plugged it in
I was told there was nothing showing on the projector so I quickly plugged the adapter out
and then back in. It worked more or less.</p>

<p>At the time I had LibreOffice Impress in presentation
mode but I did see ABRT detecting a kernel problem. When my slides popped up the text
on the first one was mostly missing but the rest were ok!</p>

<p>Mind you I'm still running <a href="/blog/categories/mac/">RHEL 7 on my MacBook Air</a>. The above is
with kernel-3.10.0-229.14.1.el7.x86_64.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Example - Bad Stub Design in DNF]]></title>
    <link href="http://atodorov.org/blog/2015/09/25/unit-testing-bad-stub-design-in-dnf/"/>
    <updated>2015-09-25T11:20:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/09/25/unit-testing-bad-stub-design-in-dnf</id>
    <content type="html"><![CDATA[<p>In software testing, usually unit testing, test stubs are programs that simulate
the behaviors of external dependencies that a module undergoing the test depends
on. Test stubs provide canned answers to calls made during the test.</p>

<p>I've discovered an improperly written stub method in one of
<a href="http://dnf.baseurl.org/">DNF</a>'s tests:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tests/test_download.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DownloadCommandTest</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">stub_fn</span><span class="p">(</span><span class="n">pkg_spec</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;.src.rpm&#39;</span> <span class="ow">in</span> <span class="n">pkg_spec</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">sourcerpm</span><span class="o">=</span><span class="n">pkg_spec</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">Query</span><span class="o">.</span><span class="n">latest</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">pkg</span> <span class="k">for</span> <span class="n">pkg</span> <span class="ow">in</span> <span class="n">q</span> <span class="k">if</span> <span class="n">pkg_spec</span> <span class="o">==</span> <span class="n">pkg</span><span class="o">.</span><span class="n">name</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cli</span> <span class="o">=</span> <span class="n">mock</span><span class="o">.</span><span class="n">MagicMock</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">download</span><span class="o">.</span><span class="n">DownloadCommand</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cmd</span><span class="o">.</span><span class="n">cli</span><span class="o">.</span><span class="n">base</span><span class="o">.</span><span class="n">repos</span> <span class="o">=</span> <span class="n">dnf</span><span class="o">.</span><span class="n">repodict</span><span class="o">.</span><span class="n">RepoDict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cmd</span><span class="o">.</span><span class="n">_get_query</span> <span class="o">=</span> <span class="n">stub_fn</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">cmd</span><span class="o">.</span><span class="n">_get_query_source</span> <span class="o">=</span> <span class="n">stub_fn</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The replaced methods look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>plugins/download.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_get_query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pkg_spec</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a query to match a pkg_spec.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">subj</span> <span class="o">=</span> <span class="n">dnf</span><span class="o">.</span><span class="n">subject</span><span class="o">.</span><span class="n">Subject</span><span class="p">(</span><span class="n">pkg_spec</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">subj</span><span class="o">.</span><span class="n">get_best_query</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base</span><span class="o">.</span><span class="n">sack</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">available</span><span class="p">()</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">latest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">run</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">msg</span> <span class="o">=</span> <span class="n">_</span><span class="p">(</span><span class="s">&quot;No package &quot;</span> <span class="o">+</span> <span class="n">pkg_spec</span> <span class="o">+</span> <span class="s">&quot; available.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">dnf</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">PackageNotFoundError</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">q</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_get_query_source</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pkg_spec</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;&quot;Return a query to match a source rpm file name.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">pkg_spec</span> <span class="o">=</span> <span class="n">pkg_spec</span><span class="p">[:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>  <span class="c"># skip the .rpm</span>
</span><span class='line'>    <span class="n">nevra</span> <span class="o">=</span> <span class="n">hawkey</span><span class="o">.</span><span class="n">split_nevra</span><span class="p">(</span><span class="n">pkg_spec</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">base</span><span class="o">.</span><span class="n">sack</span><span class="o">.</span><span class="n">query</span><span class="p">()</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">available</span><span class="p">()</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">latest</span><span class="p">()</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">nevra</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="n">nevra</span><span class="o">.</span><span class="n">version</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">release</span><span class="o">=</span><span class="n">nevra</span><span class="o">.</span><span class="n">release</span><span class="p">,</span> <span class="n">arch</span><span class="o">=</span><span class="n">nevra</span><span class="o">.</span><span class="n">arch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">run</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">msg</span> <span class="o">=</span> <span class="n">_</span><span class="p">(</span><span class="s">&quot;No package &quot;</span> <span class="o">+</span> <span class="n">pkg_spec</span> <span class="o">+</span> <span class="s">&quot; available.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">dnf</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">PackageNotFoundError</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">q</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As seen here <em>stub_fn</em> replaces the <em>_get_query</em> methods from the class under
test. At the time of writing this has probably seemed like a good idea to
speed up writing the tests.</p>

<p>The trouble is we should be replacing the external dependencies of <em>_get_query</em>
(other parts of DNF essentially) and not methods from <em>DownloadCommand</em>. To
understand why this is a bad idea check
<a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/113">PR #113</a>,
which directly modifies <em>_get_query</em>. There's no way to test this patch
with the current state of the test.</p>

<p>So I took a few days to experiment and update the current test stubs. The
result is
<a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/118">PR #118</a>.
The important bits are the <em>SackStub</em> and <em>SubjectStub</em> classes which hold
information about the available RPM packages on the system. The rest are cosmetics
to fit around the way the query objects are used (q.available(), q.latest(), q.filter()).
The proposed design correctly overrides the external dependencies on
<em>dnf.subject.Subject</em> and <em>self.base.sack</em> which are initialized before our
plugin is loaded by DNF.</p>

<p>I must say this is the first error of this kind I've seen in my QA practice so far.
I have no idea if this was a minor oversight or something which happens more frequently
in open source projects but it's a great example nevertheless.</p>

<p>For those of you who'd like to get started on unit testing I can recommend the book
<a href="http://www.amazon.com/gp/product/1933988274/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1933988274&linkCode=as2&tag=atodorovorg-20">The Art of Unit Testing: With Examples in .Net</a><img src="http://www.assoc-amazon.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=1933988274" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
by Roy Osherove!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4000+ bugs in Fedora - checksec failures]]></title>
    <link href="http://atodorov.org/blog/2015/09/16/4000-bugs-in-fedora-checksec-failures/"/>
    <updated>2015-09-16T17:03:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/09/16/4000-bugs-in-fedora-checksec-failures</id>
    <content type="html"><![CDATA[<p>In the last week I've been trying to figure out how many packages
conform to the new
<a href="https://fedoraproject.org/wiki/Changes/Harden_All_Packages">Harden All Packages</a>
policy in Fedora!</p>

<p>From 46884 RPMs, 17385 are 'x86_64' meaning they may contain ELF objects.
From them 4489 are reported as failed <code>checksec</code>.</p>

<p>What you should see as the output from <code>checksec is</code></p>

<pre><code>Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH
Full RELRO      Canary found      NX enabled    DSO             No RPATH   No RUNPATH
</code></pre>

<p>The first line is for binaries, the second one for libraries b/c
DSOs on x86_64 are always position-independent. Some RPATHs are acceptable,
e.g. <code>%{_libdir}/foo/</code> and I've tried to exclude them unless
other offenses are found. The script which does this is
<a href="https://github.com/atodorov/fedora-scripts/blob/master/checksec-collect">checksec-collect</a>.</p>

<p>Most often I'm seeing <em>Partial RELRO</em>, <em>No canary found</em> and <em>No PIE</em> errors.
Since all packages potentially process untrusted input, it makes sense for all of them
to be hardened and enhance the security of Fedora. That's why all of these errors
should be considered valid bugs.</p>

<h2>Attn package maintainers</h2>

<p>Please see if your package is in the list and try to fix it or let me know
why it should be excluded, for example it's a boot loader and doesn't function
properly with hardening enabled. The full list is available at
<a href="https://github.com/atodorov/fedora-scripts/blob/master/checksec.log">GitHub</a>.</p>

<p>For more information about the different protection mechanisms see the following
links:</p>

<ul>
<li><a href="http://tk-blog.blogspot.bg/2009/02/relro-not-so-well-known-memory.html">Partial vs Full RELRO</a></li>
<li><a href="https://en.wikipedia.org/wiki/Buffer_overflow_protection#Canaries">Stack canaries</a></li>
<li><a href="https://en.wikipedia.org/wiki/NX_bit#Linux">NX memory protection</a></li>
<li><a href="https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/">Position Independent Executables</a></li>
<li><a href="https://fedoraproject.org/wiki/Packaging:Guidelines#Beware_of_Rpath">RPATH</a></li>
<li><a href="http://blog.tremily.us/posts/rpath/">RUNPATH</a></li>
</ul>


<p><strong>UPDATE 2015-09-17</strong></p>

<p>I've posted my findings on
<a href="https://lists.fedoraproject.org/pipermail/devel/2015-September/thread.html">fedora-devel</a>
and the comments are more than interesting even revealing an old bug in libtool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Try F10 When Editing grub2 Menu in EFI Mode]]></title>
    <link href="http://atodorov.org/blog/2015/08/14/tip-try-f10-when-editing-grub2-menu-in-efi-mode/"/>
    <updated>2015-08-14T14:06:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/08/14/tip-try-f10-when-editing-grub2-menu-in-efi-mode</id>
    <content type="html"><![CDATA[<p>When editing the grub2 menu (especially in EFI mode) it tells you to
press Ctrl-x to save your changes and continue the boot process.
However this doesn't work on Apple hardware
(<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1253637">rhbz#1253637</a>)
and maybe some other platforms. If this is the case try pressing <strong>F10</strong>
instead. It works for me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call for Ideas: Graphical Test Coverage Reports]]></title>
    <link href="http://atodorov.org/blog/2015/07/27/call-for-ideas-graphical-test-coverage-reports/"/>
    <updated>2015-07-27T13:04:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/07/27/call-for-ideas-graphical-test-coverage-reports</id>
    <content type="html"><![CDATA[<p>If you are working with Python and writing unit tests chances are you are
familiar with the <a href="http://nedbatchelder.com/code/coverage/">coverage</a> reporting
tool. However there are testing scenarios in which we either don't use unit tests
or maybe execute different code paths(test cases) independent of each other.</p>

<p>For example, this is the case with installation testing in Fedora. Because anaconda
- the installer is very complex the easiest way is to test it live, not with unit tests.
Even though we can get a coverage report (anaconda is written in Python) it reflects
only the test case it was collected from.</p>

<p><code>coverage combine</code> can be used to combine several data files and produce an aggregate
report. This can tell you how much test coverage you have across all your tests.</p>

<p>As far as I can tell Python's coverage doesn't tell you how many times a particular
line of code has been executed. It also doesn't tell you which test cases executed
a particular line
(see <a href="https://bitbucket.org/ned/coveragepy/pull-request/59">PR #59</a>).
In the Fedora example, I have the feeling many of our tests are touching the same
code base and not contributing that much to the overall test coverage.
So I started working on these items.</p>

<p>I imagine a script which will read coverage data from several test executions
(preferably in JSON format,
<a href="https://bitbucket.org/ned/coveragepy/pull-request/60">PR #60</a>) and produce a
graphical report similar to what GitHub does for your commit activity.</p>

<p>See an example <a href="https://s3.amazonaws.com/atodorov/blog/pykickstart_report.html">here</a>!</p>

<p>The example uses darker colors to indicate more line executions, lighter for less
executions. Check the HTML for the actual numbers b/c there are no hints yet.
The input JSON files are
<a href="https://s3.amazonaws.com/atodorov/blog/coverage_json_reports.tar.gz">here</a> and
the script to generate the above HTML is at
<a href="https://github.com/atodorov/fedora-scripts/blob/master/coverage-tool">GitHub</a>.</p>

<p>Now I need your ideas and comments!</p>

<p>What kinds of coverage reports are you using in your job ? How do you generate them ?
How do they look like ?</p>
]]></content>
  </entry>
  
</feed>
