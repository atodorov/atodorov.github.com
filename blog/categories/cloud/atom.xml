<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>atodorov.org</title><link href="http://atodorov.org/" rel="alternate"></link><link href="http://atodorov.org/blog/categories/cloud/atom.xml" rel="self"></link><id>http://atodorov.org/</id><updated>2014-03-19T11:41:00+02:00</updated><entry><title>SMS PIN Verification with Twilio and Django</title><link href="http://atodorov.org/blog/2014/03/19/sms-pin-verification-with-twilio-and-django/" rel="alternate"></link><updated>2014-03-19T11:41:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2014-03-19:blog/2014/03/19/sms-pin-verification-with-twilio-and-django/</id><summary type="html">&lt;p&gt;This is a quick example of SMS PIN verification using Twilio cloud services and
Django which I did for a small site recently.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SMS PIN form" src="/images/sms_pin.png" title="SMS PIN form" /&gt;&lt;/p&gt;
&lt;p&gt;The page template contains the following HTML snippet&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mobile_number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mobile_number&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;111-111-1111&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;send_pin()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-share&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Get PIN&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and a JavaScript function utilizing jQuery:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;send_pin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{% url &amp;#39;ajax_send_pin&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mobile_number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#mobile_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PIN sent via SMS!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorThrown&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;jqXHR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create the following views in Django:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return a numeric PIN with length digits &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_verify_pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Verify a PIN is correct &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ajax_send_pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sends SMS PIN to the specified number &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mobile_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mobile_number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No mobile number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_pin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# store the PIN in the cache for later verification.&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# valid for 24 hrs&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TWILIO_FROM_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; sent&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Process orders made via web form and verified by SMS PIN. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;mobile_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mobile_number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_verify_pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;transaction_complete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Invalid PIN!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;order.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PINs are only numeric and are stored in the CACHE instead of the database which
I think is simpler and less expensive in terms of I/O operations.&lt;/p&gt;</summary><category term="Django"></category><category term="cloud"></category><category term="Twilio"></category></entry><entry><title>Reducing AWS Cloud Costs - Real Money Example</title><link href="http://atodorov.org/blog/2014/03/07/reducing-aws-cloud-costs-real-money-example/" rel="alternate"></link><updated>2014-03-07T17:14:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2014-03-07:blog/2014/03/07/reducing-aws-cloud-costs-real-money-example/</id><summary type="html">&lt;p&gt;&lt;a href="http://aws.amazon.com/ebs/pricing/effective-february-2014/"&gt;Last month&lt;/a&gt; Amazon
reduced by 50% prices for EBS storage. This, combined with 
&lt;a href="/blog/2014/02/07/aws-tip-shrinking-ebs-root-volume-size/"&gt;shrinking EBS root volume size&lt;/a&gt; and
&lt;a href="/blog/2014/02/10/moving-tmp-from-ebs-to-instance-storage/"&gt;moving /tmp to instance storage&lt;/a&gt;
allowed me to reduce EBS related costs behind &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt; by around 50%.
Following are the real figures from my AWS Bill.&lt;/p&gt;
&lt;p&gt;EBS costs for Difio were gradually rising up with every new node added to the cluster and
increased package processing (resulting in more I/O):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;November 2013 - $7.38&lt;/li&gt;
&lt;li&gt;December 2013 - $10.55&lt;/li&gt;
&lt;li&gt;January 2014 - $11.97&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;January 2014:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;EBS
$0.095 per GB-Month of snapshot data stored     9.052 GB-Mo     $0.86
$0.10  per GB-month of provisioned storage      101.656 GB-Mo  $10.17
$0.10  per 1 million I/O requests               9,405,243 IOs   $0.94
                                                        Total: $11.97
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In February there was one new system added to process additional requests
(cluster nodes run as spot instances) and an increased number of temporary
instances (although I haven't counted them) while I was restructuring AMI
internals to accommodate the &lt;a href="https://github.com/difio/difio"&gt;open source&lt;/a&gt;
version of Difio. My assumption (based on historical data) is this would
have driven the costs up in the region of $15 per month only for EBS.&lt;/p&gt;
&lt;p&gt;After implementing the stated minimal improvements and having Amazon reduced the prices by
half the bill looks like this:&lt;/p&gt;
&lt;p&gt;February 2014:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;EBS
$0.095 per GB-Month of snapshot data stored     8.668 GB-Mo     $0.82
$0.05  per GB-month of provisioned storage      58.012 GB-Mo    $2.90
$0.05  per 1 million I/O requests               5,704,482 IOs   $0.29
                                                        Total:  $4.01
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Snapshot data stored&lt;/em&gt; is the volume of snapshots (AMIs, backups, etc) which
I have. This is fairly constant.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Provisioned storage&lt;/em&gt; is the volume of EBS storage provisioned for running
instances (e.g. root file system, data partitions, etc.). This was reduced
mainly because of shrinking the root volumes. (Previously I've used larger
root volumes for a bigger /tmp).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I/O requests&lt;/em&gt; is the number of I/O requests associated with your EBS volumes.
As far as I understand Amazon doesn't charge for I/O related to ephemeral storage.
Moving /tmp from EBS to instance storage is the reason this was reduced roughly by half.&lt;/p&gt;
&lt;h2&gt;Where To Next&lt;/h2&gt;
&lt;p&gt;I've reduced the root volumes back to the 8GB defaults but this has still room for
improvement b/c the AMI is quite minimal. This will bring the largest improvements.
Another thing is the still relatively high I/O rate that touches EBS volumes.
I haven't investigated where this comes from though.&lt;/p&gt;</summary><category term="Amazon"></category><category term="cloud"></category></entry><entry><title>Moving /tmp from EBS to Instance Storage</title><link href="http://atodorov.org/blog/2014/02/10/moving-tmp-from-ebs-to-instance-storage/" rel="alternate"></link><updated>2014-02-10T13:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2014-02-10:blog/2014/02/10/moving-tmp-from-ebs-to-instance-storage/</id><summary type="html">&lt;p&gt;I've seen a fair amount of stories about moving away from Amazon's EBS volumes
to ephemeral instance storage. I've decided to give it a try starting with &lt;code&gt;/tmp&lt;/code&gt;
directory where &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt; operates.&lt;/p&gt;
&lt;p&gt;It should be noted that although instance storage may be available for some instance
types it may not be attached by default. Use this command to check:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/
ami
root
swap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example there is no instance storage present. &lt;/p&gt;
&lt;p&gt;You can attach one either when launching the EC2 instance or when creating a customized AMI
(instance storage devices are pre-defined in the AMI). When creating an AMI you can attach more ephemeral devices
but they will not available when instance is launched. The maximum number of available
instance storage devices can be found in the
&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes"&gt;docs&lt;/a&gt;.
That is to say if you have an AMI which defines 2 ephemeral devices and launch a
standard m1.small instance there will be only one ephemeral device present.&lt;/p&gt;
&lt;p&gt;Also note that for M3 instances, you must specify instance store volumes in the
block device mapping for the instance. When you launch an M3 instance, Amazon ignores
any instance store volumes specified in the block device mapping for the AMI.&lt;/p&gt;
&lt;p&gt;As far as I can see the AWS Console doesn't indicate if instance storage is attached
or not. For instance with 1 ephemeral volume:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/
ami
ephemeral0
root
swap

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/ephemeral0
sdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ephemeral devices can be mounted in &lt;code&gt;/media/ephemeralX/&lt;/code&gt;, but not all volumes.
I've found that usually only &lt;code&gt;ephemeral0&lt;/code&gt; is mounted automatically.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/
ami
ephemeral0
ephemeral1
root

&lt;span class="nv"&gt;$ &lt;/span&gt;ls -l /media/
drwxr-xr-x &lt;span class="m"&gt;3&lt;/span&gt; root root &lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; ное  &lt;span class="m"&gt;2009&lt;/span&gt; ephemeral0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Difio I have an init.d script which executes when the system
boots. To enable &lt;code&gt;/tmp&lt;/code&gt; on ephemeral storage I just added the following snippet:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;$&amp;quot;Mounting /tmp on ephemeral storage:&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; ef in &lt;span class="sb"&gt;`&lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/ 2&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt; grep ephemeral&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;curl http://169.254.169.254/latest/meta-data/block-device-mapping/&lt;span class="nv"&gt;$ef&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$&amp;quot;&lt;/span&gt;Unmounting /dev/&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    umount /dev/&lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;

&lt;span class="s2"&gt;    echo &lt;/span&gt;&lt;span class="nv"&gt;$&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;mkfs /dev/&lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    mkfs.ext4 -q /dev/&lt;span class="nv"&gt;$disk&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$&amp;quot;&lt;/span&gt;Mounting /dev/&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    mount -t ext4 /dev/&lt;/span&gt;&lt;span class="nv"&gt;$disk&lt;/span&gt;&lt;span class="s2"&gt; /tmp &amp;amp;&amp;amp; chmod 1777 /tmp &amp;amp;&amp;amp; success || failure&lt;/span&gt;
&lt;span class="s2"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; success and failure are from &lt;code&gt;/etc/rc.d/init.d/functions&lt;/code&gt;.
If you are using LVM or RAID you need to reconstruct your block devices
accordingly!&lt;/p&gt;
&lt;p&gt;If everything goes right I should be able to reduce my AWS costs by saving on
provisioned storage and I/O requests. I'll keep you posted on this after a month or two.&lt;/p&gt;</summary><category term="cloud"></category><category term="Amazon"></category></entry><entry><title>AWS Tip: Shrinking EBS Root Volume Size</title><link href="http://atodorov.org/blog/2014/02/07/aws-tip-shrinking-ebs-root-volume-size/" rel="alternate"></link><updated>2014-02-07T00:23:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2014-02-07:blog/2014/02/07/aws-tip-shrinking-ebs-root-volume-size/</id><summary type="html">&lt;p&gt;Amazon's Elastic Block Store volumes are easy to use and expand but notoriously
hard to shrink once their size has grown. Here is my tip for shrinking EBS size
and saving some money from over-provisioned storage. I'm assuming that you want to
shrink the root volume which is on EBS. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write down the block device name for the root volume (/dev/sda1) - &lt;em&gt;from AWS console:
Instances; Select instance; Look at Details tab; See Root device or Block devices&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Write down the availability zone of your instance - &lt;em&gt;from AWS console: Instances;
column Availability Zone&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Stop instance;&lt;/li&gt;
&lt;li&gt;Create snapshot of the root volume;&lt;/li&gt;
&lt;li&gt;From the snapshot, create a second volume, in the &lt;strong&gt;same availability zone&lt;/strong&gt; as
your instance (you will have to attach it later). This will be your pristine source;&lt;/li&gt;
&lt;li&gt;Create new empty EBS volume (not based on a snapshot), with smaller size,
in the same availability zone - &lt;em&gt;from AWS console: Volumes; Create Volume;
Snapshot == No Snapshot&lt;/em&gt;; &lt;strong&gt;IMPORTANT&lt;/strong&gt; - size should be large enough to hold
all the files from the source file system (try &lt;code&gt;df -h&lt;/code&gt; on the source first);&lt;/li&gt;
&lt;li&gt;Attach both volumes to instance while taking note of the block devices names
you assign for them in the AWS console;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example: In my case &lt;code&gt;/dev/sdc1&lt;/code&gt; is the source snapshot and &lt;code&gt;/dev/sdd1&lt;/code&gt; is the
empty target.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start instance;&lt;/li&gt;
&lt;li&gt;Optionally check the source file system with &lt;code&gt;e2fsck -f /dev/sdc1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Create a file system for the empty volume - &lt;code&gt;mkfs.ext4 /dev/sdd1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Mount volumes at &lt;code&gt;/source&lt;/code&gt; and &lt;code&gt;/target&lt;/code&gt; respectively;&lt;/li&gt;
&lt;li&gt;Now sync the files: &lt;code&gt;rsync -aHAXxSP /source/ /target&lt;/code&gt;. &lt;strong&gt;Note the missing slash (/)
after &lt;code&gt;/target&lt;/code&gt;&lt;/strong&gt;. If you add it you will end up with files inside &lt;code&gt;/target/source/&lt;/code&gt;
which you don't want;&lt;/li&gt;
&lt;li&gt;Quickly verify the new directory structure with &lt;code&gt;ls -l /target&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Unmount &lt;code&gt;/target&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Optionally check the new file system for consistency &lt;code&gt;e2fsck -f /dev/sdd1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - check how &lt;code&gt;/boot/grub/grub.conf&lt;/code&gt; specifies the root volume - 
by UUID, by LABEL, by device name, etc. You will have to duplicate the same for the
new smaller volume or update &lt;code&gt;/target/boot/grub/grub.conf&lt;/code&gt; to match the new volume.
Check &lt;code&gt;/target/etc/fstab&lt;/code&gt; as well!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my case I had to &lt;code&gt;e2label /dev/sdd1 /&lt;/code&gt; because both &lt;code&gt;grub.conf&lt;/code&gt; and &lt;code&gt;fstab&lt;/code&gt; were
using the device label.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shutdown the instance;&lt;/li&gt;
&lt;li&gt;Detach all volumes;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - attach the new smaller volume to the instance using the same block device
name from the first step (e.g. &lt;code&gt;/dev/sda1&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Start the instance and verify it is working correctly;&lt;/li&gt;
&lt;li&gt;DELETE auxiliary volumes and snapshots so they don't take space and accumulate costs!&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tips"></category><category term="Amazon"></category><category term="cloud"></category></entry><entry><title>Idempotent Django Email Sender with Amazon SQS and Memcache</title><link href="http://atodorov.org/blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/" rel="alternate"></link><updated>2013-12-11T23:29:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-12-11:blog/2013/12/11/idempotent-django-email-sender-with-amazon-sqs-and-memcache/</id><summary type="html">&lt;p&gt;Recently I wrote about my problem with
&lt;a href="/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/"&gt;duplicate Amazon SQS messages causing multiple emails&lt;/a&gt;
for &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt;. After considering several options and
feedback from 
&lt;a href="https://twitter.com/atodorov_/status/409429840820199424"&gt;@Answers4AWS&lt;/a&gt;
I wrote a small decorator to fix this.&lt;/p&gt;
&lt;p&gt;It uses the cache backend to prevent the task from executing twice
during the specified time frame. The code is available at
&lt;a href="https://djangosnippets.org/snippets/3010/"&gt;https://djangosnippets.org/snippets/3010/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As stated on Twitter you should use Memcache (or ElastiCache) for this.
If using Amazon S3 with my
&lt;a href="https://github.com/atodorov/django-s3-cache"&gt;django-s3-cache&lt;/a&gt; don't use the
&lt;code&gt;us-east-1&lt;/code&gt; region because it is eventually consistent.&lt;/p&gt;
&lt;p&gt;The solution is fast and simple on the development side and uses my existing
cache infrastructure so it doesn't cost anything more!&lt;/p&gt;
&lt;p&gt;There is still a race condition between marking the message as processed
and the second check but nevertheless this should minimize the possibility of
receiving duplicate emails to an accepted level. Only time will tell though!&lt;/p&gt;</summary><category term="cloud"></category><category term="Amazon"></category><category term="SQS"></category><category term="Django"></category><category term="Python"></category></entry><entry><title>Duplicate Amazon SQS Messages Cause Multiple Emails</title><link href="http://atodorov.org/blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/" rel="alternate"></link><updated>2013-12-06T22:47:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-12-06:blog/2013/12/06/duplicate-amazon-sqs-messages-cause-multiple-emails/</id><summary type="html">&lt;p&gt;Beware if using Amazon Simple Queue Service to send email messages!
Sometime SQS messages are duplicated which results in multiple copies of
the messages being sent. This happened today at &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt;
and is really annoying to users. In this post I will explain why there is no easy
way of fixing it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Can a deleted message be received again?&lt;/p&gt;
&lt;p&gt;Yes, under rare circumstances you might receive a previously deleted message again.
This can occur in the rare situation in which a DeleteMessage operation doesn't
delete all copies of a message because one of the servers in the distributed
Amazon SQS system isn't available at the time of the deletion. That message copy
can then be delivered again. You should design your application so that no errors
or inconsistencies occur if you receive a deleted message again.&lt;/p&gt;
&lt;p&gt;Amazon FAQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my case the cron scheduler logs say:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &amp;lt;AsyncResult: a9e5a73a-4d4a-4995-a91c-90295e27100a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While on the worker nodes the logs say:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[2013-12-06 10:13:06,229: INFO/MainProcess] Got task from broker: tasks.cron_monthly_email_reminder[a9e5a73a-4d4a-4995-a91c-90295e27100a]&lt;/span&gt;
&lt;span class="k"&gt;[2013-12-06 10:18:09,456: INFO/MainProcess] Got task from broker: tasks.cron_monthly_email_reminder[a9e5a73a-4d4a-4995-a91c-90295e27100a]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This clearly shows the same message (see the UUID) has been processed twice!
This resulted in hundreds of duplicate emails :(.&lt;/p&gt;
&lt;h2&gt;Why This Is Hard To Fix&lt;/h2&gt;
&lt;p&gt;There are two basic approaches to solve this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check some log files or database for previous record of the message having
been processed;&lt;/li&gt;
&lt;li&gt;Use idempotent operations that if you process the message again, you
get the same results, and that those results don't create duplicate files/records.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with checking for duplicate messages is: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a race condition between marking the message as processed and the
second check;&lt;/li&gt;
&lt;li&gt;You need to use some sort of locking mechanism to safe-guard against the race condition;&lt;/li&gt;
&lt;li&gt;In the event of an eventual consistency of the log/DB you can't guarantee that
the previous attempt will show up and so can't guarantee that you won't process
the message twice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above don't seem to work well for distributed applications not to mention
Difio processes millions of messages per month, per node and the logs are quite big.&lt;/p&gt;
&lt;p&gt;The second option is to have control of the Message-Id or some other email header
so that the second message will be discarded either at the server (Amazon SES in my case)
or at the receiving MUA. I like this better but I don't think it is technically possible
with the current environment. Need to check though. &lt;/p&gt;
&lt;p&gt;I've asked AWS support to look into
&lt;a href="https://forums.aws.amazon.com/thread.jspa?threadID=140782"&gt;this thread&lt;/a&gt; and hopefully
they will have some more hints. If you have any other ideas please post in the comments!
Thanks!&lt;/p&gt;</summary><category term="cloud"></category><category term="Amazon"></category><category term="SQS"></category><category term="SES"></category></entry><entry><title>Bug in Python URLGrabber/cURL on Fedora and Amazon Linux</title><link href="http://atodorov.org/blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux/" rel="alternate"></link><updated>2013-11-29T14:05:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-11-29:blog/2013/11/29/bug-python-urlgrabber-curl-fedora-amazon-linux/</id><summary type="html">&lt;p&gt;Accidentally I have discovered a bug for Python's
URLGrabber module which has to do with change in behavior in libcurl.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlgrabber.grabber&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;URLGrabber&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URLGrabber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlgrab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://s3.amazonaws.com/production.s3.rubygems.org/gems/columnize-0.3.6.gem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp/columnize.gem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;console&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;976&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urlgrab&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retryfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;880&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_retry&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;962&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;retryfunc&lt;/span&gt;
    &lt;span class="n"&gt;fo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyCurlFileObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_do_open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1307&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_do_open&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_opts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/celeryd/.virtualenvs/difio/lib/python2.6/site-packages/urlgrabber/grabber.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1161&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_set_opts&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curl_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSL_VERIFYHOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl_verify_host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above works fine with curl-7.27 or older while it breaks with curl-7.29 and
newer. As explained by 
&lt;a href="http://lists.baseurl.org/pipermail/yum-devel/2013-November/010428.html"&gt;Zdenek Pavlas&lt;/a&gt;
the reason is an internal change in libcurl which doesn't accept a value of 1 anymore!&lt;/p&gt;
&lt;p&gt;The bug is reproducible with a newer libcurl version and a vanilla urlgrabber==3.9.1
from PyPI (e.g. inside a virtualenv). The latest python-urlgrabber RPM packages in both
Fedora and Amazon Linux already have the fix.&lt;/p&gt;
&lt;p&gt;I have tested the patch proposed by Zdenek and it works for me. I still have no idea why
there aren't any updates released on PyPI though!&lt;/p&gt;</summary><category term="Fedora"></category><category term="QA"></category><category term="cloud"></category><category term="Python"></category></entry><entry><title>This Week: Python Testing, Chris DiBona on Open Source and OpenShift ENV Variables</title><link href="http://atodorov.org/blog/2013/10/11/this-week-python-chris-dibona-openshift/" rel="alternate"></link><updated>2013-10-11T10:45:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-10-11:blog/2013/10/11/this-week-python-chris-dibona-openshift/</id><summary type="html">&lt;p&gt;Here is a random collection of links I came across this week which
appear interesting to me but I don't have time to blog about in details.&lt;/p&gt;
&lt;h2&gt;Making a Multi-branch Test Server for Python Apps&lt;/h2&gt;
&lt;p&gt;If you are wondering how to test different feature branches of your Python
application but don't have the resources to create separate test servers this
is for you: 
&lt;a href="http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server"&gt;http://depressedoptimism.com/blog/2013/10/8/making-a-multi-branch-test-server&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kudos to the python-django-bulgaria Google group for finding this link!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;OpenSource.com Interview with Chris DiBona&lt;/h2&gt;
&lt;p&gt;Just read it at
&lt;a href="http://opensource.com/business/13/10/interview-chris-dibona"&gt;http://opensource.com/business/13/10/interview-chris-dibona&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I particularly like the part where he called open source "brutal".&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You once called open source “brutal”. What did you mean by that?&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;I think that it is because open source projects are able to only work with the
productive people and ignore everyone else. That behavior can come across as
very harsh or exclusionary, and that's because it is that: brutally harsh and
exclusionary of anyone who isn't contributing.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;So, I guess what I'm saying is that survival of the fittest as practiced in the
open source world is a pretty brutal mechanism, but it works very very well for
producing quality software. Boy is it hard on newcomers though...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;OpenShift Finally Introduces Environment Variables&lt;/h2&gt;
&lt;p&gt;Yes! Finally! &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    rhc set-env VARIABLE1=VALUE1 -a myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No need for 
&lt;a href="/blog/2013/07/08/tip-setting-secure-env-variables-on-red-hat-openshift/"&gt;my work around&lt;/a&gt;
anymore! I will give the new feature a go very soon. &lt;/p&gt;
&lt;p&gt;Read more about it at the OpenShift blog:
&lt;a href="https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps"&gt;https://www.openshift.com/blogs/taking-advantage-of-environment-variables-in-openshift-php-apps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have you found anything interesting this week? Please share in the comments below! Thanks!&lt;/p&gt;</summary><category term="Python"></category><category term="cloud"></category><category term="OpenShift"></category></entry><entry><title>Tip: Setting Secure ENV variables on Red Hat OpenShift</title><link href="http://atodorov.org/blog/2013/07/08/tip-setting-secure-env-variables-on-red-hat-openshift/" rel="alternate"></link><updated>2013-07-08T21:39:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-07-08:blog/2013/07/08/tip-setting-secure-env-variables-on-red-hat-openshift/</id><summary type="html">&lt;p&gt;OpenShift is
&lt;a href="https://www.openshift.com/content/custom-environment-variables"&gt;still missing&lt;/a&gt;
the client side tools to set environment variables without exposing the values
in source code but there is a way to do it. Here is how.&lt;/p&gt;
&lt;p&gt;First ssh into your application and navigate to the &lt;code&gt;$OPENSHIFT_DATA_DIR&lt;/code&gt;.
Create a file to define your environment. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc ssh -a difio
Password: ***

&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com 51d32a854382ecf7a9000116&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$OPENSHIFT_DATA_DIR&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; vi myenv.sh
&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; cat myenv.sh
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;MYENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; chmod a+x myenv.sh 
&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
Connection to difio-otb.rhcloud.com closed.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now modify your code and git push to OpenShift. Then ssh into the app once
again to verify that your configuration is still in place. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;atodorov@redbull difio&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc ssh -a difio
Password: ***

&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com 51d32a854382ecf7a9000116&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$OPENSHIFT_DATA_DIR&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; ls -l
total 4
-rwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; 51d32a854382ecf7a9000116 51d32a854382ecf7a9000116 &lt;span class="m"&gt;34&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt; jul 14,33 myenv.sh
&lt;span class="o"&gt;[&lt;/span&gt;difio-otb.rhcloud.com data&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the defined variables as you wish.&lt;/p&gt;</summary><category term="tips"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>Performance test: Amazon ElastiCache vs Amazon S3</title><link href="http://atodorov.org/blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3/" rel="alternate"></link><updated>2013-06-26T21:22:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-06-26:blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3/</id><summary type="html">&lt;p&gt;Which Django cache backend is faster? Amazon ElastiCache or Amazon S3 ?&lt;/p&gt;
&lt;p&gt;Previously I've mentioned about
&lt;a href="/blog/2013/06/19/django-tips-using-cache-for-stateful-http/"&gt;using Django's cache to keep state between HTTP requests&lt;/a&gt;.
In my demo described there I was using &lt;a href="http://github.com/atodorov/django-s3-cache"&gt;django-s3-cache&lt;/a&gt;.
It is time to move to production so I decided to measure the performance difference between the two
cache options available at Amazon Web Services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2013-07-01&lt;/strong&gt;: my initial test may have been false since I had not configured
ElastiCache access properly. I saw no errors but discovered the issue today on another
system which was failing to store the cache keys but didn't show any errors either. 
I've re-run the tests and updated times are shown below.&lt;/p&gt;
&lt;h2&gt;Test infrastructure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;One Amazon S3 bucket, located in US Standard (aka US East) region;&lt;/li&gt;
&lt;li&gt;One Amazon ElastiCache cluster with one Small Cache Node (cache.m1.small) with Moderate I/O capacity;&lt;/li&gt;
&lt;li&gt;One Amazon Elasticache cluster with one Large Cache Node (cache.m1.large) with High I/O Capacity;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update:&lt;/strong&gt; I've tested both &lt;code&gt;python-memcached&lt;/code&gt; and &lt;code&gt;pylibmc&lt;/code&gt; client libraries for Django;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update:&lt;/strong&gt; Test is executed from an EC2 node in the us-east-1a availability zone;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update:&lt;/strong&gt; Cache clusters are in the us-east-1a availability zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Test Scenario&lt;/h2&gt;
&lt;p&gt;The test platform is Django. I've created a
&lt;a href="https://github.com/atodorov/Amazon-ElastiCache-vs-Amazon-S3-Django"&gt;skeleton project&lt;/a&gt;
with only &lt;code&gt;CACHES&lt;/code&gt; settings
defined and necessary dependencies installed. A file called &lt;code&gt;test.py&lt;/code&gt; holds the
test cases, which use the standard timeit module. The object which is stored in cache
is very small - it holds a phone/address identifiers and couple of user made selections.
The code looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;

&lt;span class="n"&gt;s3_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;for i in range(1000):&lt;/span&gt;
&lt;span class="sd"&gt;    my_cache.set(i, MyObject)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;from django.core import cache&lt;/span&gt;

&lt;span class="sd"&gt;my_cache = cache.get_cache(&amp;#39;default&amp;#39;)&lt;/span&gt;

&lt;span class="sd"&gt;MyObject = {&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;from&amp;#39; : &amp;#39;359123456789&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;address&amp;#39; : &amp;#39;6afce9f7-acff-49c5-9fbe-14e238f73190&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;hour&amp;#39; : &amp;#39;12:30&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;weight&amp;#39; : 5,&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;type&amp;#39; : 1,&lt;/span&gt;
&lt;span class="sd"&gt;}&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;s3_get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;for i in range(1000):&lt;/span&gt;
&lt;span class="sd"&gt;    MyObject = my_cache.get(i)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;from django.core import cache&lt;/span&gt;

&lt;span class="sd"&gt;my_cache = cache.get_cache(&amp;#39;default&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tests were executed from the Django shell &lt;del&gt;on my laptop&lt;/del&gt;
on an EC2 instance in the us-east-1a availability zone. ElastiCache nodes
were freshly created/rebooted before test execution. S3 bucket had no objects.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mar&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;20111027&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InteractiveConsole&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s3_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;68.089607000350952&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;70.806712865829468&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;72.49261999130249&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s3_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;43.778793096542358&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;43.054368019104004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;36.19232702255249&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pymc_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.40637087821960449&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3568730354309082&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.35815882682800293&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pymc_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.35759496688842773&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.35180497169494629&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.39198613166809082&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;libmc_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.3902890682220459&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.30157709121704102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.30596804618835449&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;libmc_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.28874802589416504&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.30520200729370117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.29050207138061523&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;libmc_large_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0291709899902344&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.31709098815917969&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.32010698318481445&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;libmc_large_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.2957158088684082&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.29067802429199219&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.29692888259887695&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;As expected ElastiCache is much faster (10x) compared to S3. However the difference
between the two ElastiCache node types is subtle. I will stay with the smallest
possible node to minimize costs. Also as seen, pylibmc is a bit faster compared to
the pure Python implementation. &lt;/p&gt;
&lt;p&gt;Depending on your objects size or how many set/get operations you perform per
second you may need to go with the larger nodes. Just test it!&lt;/p&gt;
&lt;p&gt;&lt;del&gt;It surprised me how slow django-s3-cache is.&lt;/del&gt;
The false test showed django-s3-cache to be 100x slower but new results are better.
10x decrease in performance sounds about right for a filesystem backed cache.&lt;/p&gt;
&lt;p&gt;A quick look at the code
of the two backends shows some differences. The one I immediately see is that
for every cache key django-s3-cache creates an sha1 hash which is used as the
storage file name. This was modeled after the filesystem backend but I think the
design is wrong - the memcached backends don't do this.&lt;/p&gt;
&lt;p&gt;Another one is that django-s3-cache time-stamps all objects and uses pickle to serialize them. 
I wonder if it can't just write them as binary blobs directly. There's definitely lots
of room for improvement of django-s3-cache. I will let you know my findings once I
get to it. &lt;/p&gt;</summary><category term="Amazon"></category><category term="S3"></category><category term="ElastiCache"></category><category term="QA"></category><category term="performance testing"></category><category term="cloud"></category></entry><entry><title>Twilio is Located in Amazon Web Services US East</title><link href="http://atodorov.org/blog/2013/06/24/twilio-is-located-in-amazon-web-services-us-east/" rel="alternate"></link><updated>2013-06-24T23:43:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-06-24:blog/2013/06/24/twilio-is-located-in-amazon-web-services-us-east/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Where do I store my audio files in order to minimize download and call wait time?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Twilio is a cloud vendor that provides telephony services. 
It can download and &lt;code&gt;&amp;lt;Play&amp;gt;&lt;/code&gt; arbitrary audio files and will cache the files
for better performance.&lt;/p&gt;
&lt;p&gt;Twilio support told me they are not disclosing the location of their servers,
so from my web application hosted in AWS US East:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;ivr-otb.rhcloud.com logs&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; grep TwilioProxy access_log-* &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &lt;span class="p"&gt;|&lt;/span&gt; uniq 
10.125.90.172 
10.214.183.239 
10.215.187.220 
10.245.155.18 
10.255.119.159 
10.31.197.102
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's map these addresses to host names. From another EC2 system, also in Amazon US East:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;ec2-user@ip-10-29-206-86 ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dig -x 10.125.90.172 -x 10.214.183.239 -x 10.215.187.220 -x 10.245.155.18 -x 10.255.119.159 -x 10.31.197.102

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.29.amzn1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; -x 10.125.90.172 -x 10.214.183.239 -x 10.215.187.220 -x 10.245.155.18 -x 10.255.119.159 -x 10.31.197.102
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 43245&lt;/span&gt;
&lt;span class="s"&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/span&gt;

&lt;span class="s"&gt;;; QUESTION SECTION:&lt;/span&gt;
&lt;span class="s"&gt;;172.90.125.10.in-addr.arpa.    IN      PTR&lt;/span&gt;

&lt;span class="s"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="s"&gt;172.90.125.10.in-addr.arpa. 113 IN      PTR     ip-10-125-90-172.ec2.internal.&lt;/span&gt;

&lt;span class="s"&gt;;; Query time: 1 msec&lt;/span&gt;
&lt;span class="s"&gt;;; SERVER: 172.16.0.23#53(172.16.0.23)&lt;/span&gt;
&lt;span class="s"&gt;;; WHEN: Mon Jun 24 20:48:21 2013&lt;/span&gt;
&lt;span class="s"&gt;;; MSG SIZE  rcvd: 87&lt;/span&gt;

&lt;span class="s"&gt;;; Got answer:&lt;/span&gt;
&lt;span class="s"&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode&lt;/span&gt;: QUERY, status: NOERROR, id: 52693
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;239.183.214.10.in-addr.arpa.   IN      PTR

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
239.183.214.10.in-addr.arpa. &lt;span class="m"&gt;42619&lt;/span&gt; IN   PTR     domU-12-31-39-0B-B0-01.compute-1.internal.

&lt;span class="p"&gt;;;&lt;/span&gt; Query &lt;span class="nb"&gt;time&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: 172.16.0.23#53&lt;span class="o"&gt;(&lt;/span&gt;172.16.0.23&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Mon Jun &lt;span class="m"&gt;24&lt;/span&gt; 20:48:21 2013
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: 100

&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 25255&lt;/span&gt;
&lt;span class="s"&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/span&gt;

&lt;span class="s"&gt;;; QUESTION SECTION:&lt;/span&gt;
&lt;span class="s"&gt;;220.187.215.10.in-addr.arpa.   IN      PTR&lt;/span&gt;

&lt;span class="s"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="s"&gt;220.187.215.10.in-addr.arpa. 43140 IN   PTR     domU-12-31-39-0C-B8-2E.compute-1.internal.&lt;/span&gt;

&lt;span class="s"&gt;;; Query time: 0 msec&lt;/span&gt;
&lt;span class="s"&gt;;; SERVER: 172.16.0.23#53(172.16.0.23)&lt;/span&gt;
&lt;span class="s"&gt;;; WHEN: Mon Jun 24 20:48:21 2013&lt;/span&gt;
&lt;span class="s"&gt;;; MSG SIZE  rcvd: 100&lt;/span&gt;

&lt;span class="s"&gt;;; Got answer:&lt;/span&gt;
&lt;span class="s"&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode&lt;/span&gt;: QUERY, status: NOERROR, id: 15099
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;18.155.245.10.in-addr.arpa.    IN      PTR

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
18.155.245.10.in-addr.arpa. &lt;span class="m"&gt;840&lt;/span&gt; IN      PTR     ip-10-245-155-18.ec2.internal.

&lt;span class="p"&gt;;;&lt;/span&gt; Query &lt;span class="nb"&gt;time&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: 172.16.0.23#53&lt;span class="o"&gt;(&lt;/span&gt;172.16.0.23&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Mon Jun &lt;span class="m"&gt;24&lt;/span&gt; 20:48:21 2013
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: 87

&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 28878&lt;/span&gt;
&lt;span class="s"&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0&lt;/span&gt;

&lt;span class="s"&gt;;; QUESTION SECTION:&lt;/span&gt;
&lt;span class="s"&gt;;159.119.255.10.in-addr.arpa.   IN      PTR&lt;/span&gt;

&lt;span class="s"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="s"&gt;159.119.255.10.in-addr.arpa. 43140 IN   PTR     domU-12-31-39-01-70-51.compute-1.internal.&lt;/span&gt;

&lt;span class="s"&gt;;; Query time: 0 msec&lt;/span&gt;
&lt;span class="s"&gt;;; SERVER: 172.16.0.23#53(172.16.0.23)&lt;/span&gt;
&lt;span class="s"&gt;;; WHEN: Mon Jun 24 20:48:21 2013&lt;/span&gt;
&lt;span class="s"&gt;;; MSG SIZE  rcvd: 100&lt;/span&gt;

&lt;span class="s"&gt;;; Got answer:&lt;/span&gt;
&lt;span class="s"&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode&lt;/span&gt;: QUERY, status: NOERROR, id: 28727
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;102.197.31.10.in-addr.arpa.    IN      PTR

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
102.197.31.10.in-addr.arpa. &lt;span class="m"&gt;840&lt;/span&gt; IN      PTR     ip-10-31-197-102.ec2.internal.

&lt;span class="p"&gt;;;&lt;/span&gt; Query &lt;span class="nb"&gt;time&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: 172.16.0.23#53&lt;span class="o"&gt;(&lt;/span&gt;172.16.0.23&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Mon Jun &lt;span class="m"&gt;24&lt;/span&gt; 20:48:21 2013
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: 87
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In short:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ip-10-125-90-172.ec2.internal.
ip-10-245-155-18.ec2.internal.
ip-10-31-197-102.ec2.internal.
domU-12-31-39-01-70-51.compute-1.internal.
domU-12-31-39-0B-B0-01.compute-1.internal.
domU-12-31-39-0C-B8-2E.compute-1.internal.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ip-*.ec2.internal&lt;/code&gt; are clearly in US East. The &lt;code&gt;domU-*.computer-1.internal&lt;/code&gt; also
look like US East although I'm not 100% sure what is the difference between the two.
The later ones look like HVM guests while the former ones are para-virtualized.&lt;/p&gt;
&lt;p&gt;For comparison here are some internal addresses from my own EC2 systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ip-10-228-237-207.eu-west-1.compute.internal - EU Ireland&lt;/li&gt;
&lt;li&gt;ip-10-248-19-46.us-west-2.compute.internal - US West Oregon&lt;/li&gt;
&lt;li&gt;ip-10-160-58-141.us-west-1.compute.internal - US West N. California&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After relocating my audio files to an S3 bucket in US East the average call length
dropped from 2:30 min to 2:00 min for the same IVR choices. This also minimizes
the costs since Twilio charges per minute of incoming/outgoing calls.
I think the audio quality has improved as well.&lt;/p&gt;</summary><category term="Twilio"></category><category term="Amazon"></category><category term="cloud"></category></entry><entry><title>Tip: Caching Large Objects for Celery and Amazon SQS</title><link href="http://atodorov.org/blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs/" rel="alternate"></link><updated>2013-06-19T14:29:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-06-19:blog/2013/06/19/tip-caching-large-objects-for-celery-and-amazon-sqs/</id><summary type="html">&lt;p&gt;Some time ago a guy called Matt
&lt;a href="https://groups.google.com/forum/?fromgroups=#!topic/celery-users/RFAuGjZwtmg"&gt;asked&lt;/a&gt;
about passing large objects through their messaging queue. They were switching from
RabbitMQ to Amazon SQS which has a limit of 64K total message size.&lt;/p&gt;
&lt;p&gt;Recently I've made some changes in &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt; which require passing
larger objects as parameters to a Celery task. Since Difio is also using SQS I faced the
same problem. Here is the solution using a cache back-end: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery.task&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cache_module&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;task_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;taskq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;handle_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;taskq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Objects are persisted in a secondary cache back-end, not the default one, to avoid
accidental destruction. &lt;code&gt;uuid&lt;/code&gt; parameter is a string.&lt;/p&gt;
&lt;p&gt;Although the objects passed are smaller than 64K I haven't seen any issues
with this solution so far. Let me know if you are using something similar in your code
and how it works for you. &lt;/p&gt;</summary><category term="tips"></category><category term="Amazon"></category><category term="SQS"></category><category term="cloud"></category></entry><entry><title>Django Tips: Using Cache for Stateful HTTP</title><link href="http://atodorov.org/blog/2013/06/19/django-tips-using-cache-for-stateful-http/" rel="alternate"></link><updated>2013-06-19T13:50:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-06-19:blog/2013/06/19/django-tips-using-cache-for-stateful-http/</id><summary type="html">&lt;p&gt;How do you keep state when working with a stateless protocol like HTTP? 
One possible answer is to use a cache back-end. &lt;/p&gt;
&lt;p&gt;I'm working on an IVR application demo with Django and Twilio. The caller
will make multiple choices using the phone keyboard. All of this needs to be
put together and sent back to another server for processing. In my views
I've added a simple cache get/set lines to preserve the selection.&lt;/p&gt;
&lt;p&gt;Here's how it looks with actual application logic omitted&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;incoming_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;call_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CallSid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;caller_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;caller_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;step2.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;call_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CallSid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;step2_selection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;final_step.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;call_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CallSid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;final_step_selection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt;

    &lt;span class="n"&gt;Backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_user_selections&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;thank_you.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At each step Django will update the current state associated with this call and return
a &lt;a href="https://www.twilio.com/docs/api/twiml"&gt;TwiML&lt;/a&gt; XML response. &lt;code&gt;CallSid&lt;/code&gt; is a handy unique
identifier provided by Twilio.&lt;/p&gt;
&lt;p&gt;I am using the latest &lt;a href="http://github.com/atodorov/django-s3-cache"&gt;django-s3-cache&lt;/a&gt; version
which properly works with directories. When going to production that will likely switch to
Amazon ElastiCache.&lt;/p&gt;</summary><category term="Django"></category><category term="tips"></category><category term="Twilio"></category><category term="cloud"></category></entry><entry><title>How to Deploy Python Hotfix on RedHat OpenShift Cloud</title><link href="http://atodorov.org/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud/" rel="alternate"></link><updated>2013-04-24T11:58:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-04-24:blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud/</id><summary type="html">&lt;p&gt;In this article I will show you how to deploy hotfix versions for
Python packages on the RedHat &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt; PaaS cloud.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;You are already running a Python application on your OpenShift instance.
You are using some 3rd party dependencies when you find a bug in one of them.
You go forward, fix the bug and submit a
&lt;a href="https://github.com/ahupp/python-magic/pull/31"&gt;pull request&lt;/a&gt;.
You don't want to wait for upstream to release a new version but rather
build a hotfix package yourself and deploy to production immediately.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;There are two basic approaches to solving this problem: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Include the hotfix package source code in your application, i.e.
add it to your git tree or;&lt;/li&gt;
&lt;li&gt;Build the hotfix separately and deploy as a dependency. Don't
include it in your git tree, just add a requirement on the hotfix version. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will talk about the later. The tricky part here is to instruct the cloud environment
to use your package (including the proper location) and not upstream or their local
mirror.&lt;/p&gt;
&lt;p&gt;Python applications hosted at &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt; don't support
&lt;code&gt;requirements.txt&lt;/code&gt; which can point to various package sources and even install
packages directly from GitHub. They support &lt;code&gt;setup.py&lt;/code&gt; which fetches packages
from &lt;a href="http://pypi.python.org"&gt;http://pypi.python.org&lt;/a&gt; but it is flexible enough to support other locations.&lt;/p&gt;
&lt;h2&gt;Building the hotfix&lt;/h2&gt;
&lt;p&gt;First of all we'd like to build a hotfix package. This will be the upstream
version that we are currently using plus the patch for our critical issue:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://pypi.python.org/packages/source/p/python-magic/python-magic-0.4.3.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xzvf python-magic-0.4.3.tar.gz 
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-magic-0.4.3
&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://github.com/ahupp/python-magic/pull/31.patch &lt;span class="p"&gt;|&lt;/span&gt; patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verify the patch has been applied correctly and then modify &lt;code&gt;setup.py&lt;/code&gt; to
increase the version string. In this case I will set it to &lt;code&gt;version='0.4.3.1'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then build the new package using &lt;code&gt;python setup.py sdist&lt;/code&gt; and upload it to a web server.&lt;/p&gt;
&lt;h2&gt;Deploying to OpenShift&lt;/h2&gt;
&lt;p&gt;Modify &lt;code&gt;setup.py&lt;/code&gt; and specify the hotfix version. Because this version is not on PyPI
and will not be on OpenShift's local mirror you need to provide the location where it can
be found. This is done with the &lt;code&gt;dependency_links&lt;/code&gt; parameter to &lt;code&gt;setup()&lt;/code&gt;. Here's how it looks:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/setup.py b/setup.py&lt;/span&gt;
&lt;span class="gh"&gt;index c6e837c..2daa2a9 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/setup.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/setup.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -6,5 +6,6 @@ setup(name=&amp;#39;YourAppName&amp;#39;,&lt;/span&gt;
       author=&amp;#39;Your Name&amp;#39;,
       author_email=&amp;#39;example@example.com&amp;#39;,
       url=&amp;#39;http://www.python.org/sigs/distutils-sig/&amp;#39;,
&lt;span class="gd"&gt;-      install_requires=[&amp;#39;python-magic==0.4.3&amp;#39;],&lt;/span&gt;
&lt;span class="gi"&gt;+      dependency_links=[&amp;#39;https://s3.amazonaws.com/atodorov/blog/python-magic-0.4.3.1.tar.gz&amp;#39;],&lt;/span&gt;
&lt;span class="gi"&gt;+      install_requires=[&amp;#39;python-magic==0.4.3.1&amp;#39;],&lt;/span&gt;
      )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now just git push to OpenShift and observe the console output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Processing&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;YourAppName&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Searching&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Best&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Downloading&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;amazonaws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/atodorov/blog/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Processing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt;&lt;span class="sr"&gt;/setup.py -q bdist_egg --dist-dir /tmp/easy_install-ZRVMBg/python-magic-0.4.3.1/&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R_Nxie&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zip_safe&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;analyzing&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Removing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pth&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Adding&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pth&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! Your hotfix package has just been deployed.&lt;/p&gt;
&lt;p&gt;This approach should work for other cloud providers and other programming languages
as well. Let me know if you have any experience with that.&lt;/p&gt;</summary><category term="tips"></category><category term="Python"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>Email Logging for Django on RedHat OpenShift with Amazon SES</title><link href="http://atodorov.org/blog/2013/02/28/email-logging-django-redhat-openshift-amazon-ses/" rel="alternate"></link><updated>2013-02-28T23:19:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-02-28:blog/2013/02/28/email-logging-django-redhat-openshift-amazon-ses/</id><summary type="html">&lt;p&gt;Sending email in the cloud can be tricky. IPs of cloud providers are blacklisted
because of frequent abuse. For that reason I use
&lt;a href="http://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt; as my email backend. Here is how to
configure &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; to send emails to site admins
when something goes wrong.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Valid addresses only.&lt;/span&gt;
&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Alexander Todorov&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;atodorov@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.utils.log.AdminEmailHandler&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 
&lt;span class="c"&gt;# Used as the From: address when reporting errors to admins&lt;/span&gt;
&lt;span class="c"&gt;# Needs to be verified in Amazon SES as a valid sender&lt;/span&gt;
&lt;span class="n"&gt;SERVER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django@example.com&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Amazon Simple Email Service settings&lt;/span&gt;
&lt;span class="n"&gt;AWS_SES_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xxxxxxxxxxxx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_SES_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xxxxxxxx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_ses.SESBackend&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You also need the &lt;a href="https://github.com/hmarr/django-ses"&gt;django-ses&lt;/a&gt;
dependency.&lt;/p&gt;
&lt;p&gt;See &lt;a href="http://docs.djangoproject.com/en/dev/topics/logging"&gt;http://docs.djangoproject.com/en/dev/topics/logging&lt;/a&gt; for
more details on how to customize your logging configuration.&lt;/p&gt;
&lt;p&gt;I am using this configuration successfully at RedHat's OpenShift PaaS environment.
Other users have
&lt;a href="https://openshift.redhat.com/community/forums/express/missing-email-on-500-ise-w-django"&gt;reported&lt;/a&gt;
it works for them too. Should work with any other PaaS provider.&lt;/p&gt;</summary><category term="tips"></category><category term="Django"></category><category term="Amazon"></category><category term="SES"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>Performance Test: Amazon EBS vs. Instance Storage, Pt.1</title><link href="http://atodorov.org/blog/2013/02/26/performance-test-amazon-ebs-vs-instance-storage-pt1/" rel="alternate"></link><updated>2013-02-26T23:02:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-02-26:blog/2013/02/26/performance-test-amazon-ebs-vs-instance-storage-pt1/</id><summary type="html">&lt;p&gt;I'm exploring the possibility to speed-up my cloud database so I've run some
basic tests against storage options available to Amazon EC2 instances.
The instance was &lt;a href="http://aws.amazon.com/ec2/instance-types/"&gt;m1.large&lt;/a&gt;
with High I/O performance and two additional disks with the same size:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/dev/xvdb - type EBS&lt;/li&gt;
&lt;li&gt;/dev/xvdc - type instance storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are Xen para-virtual disks. The difference is that EBS is persistent
across reboots while instance storage is ephemeral.&lt;/p&gt;
&lt;h2&gt;hdparm&lt;/h2&gt;
&lt;p&gt;For a quick test I used &lt;code&gt;hdparm&lt;/code&gt;. The manual says:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;-T  Perform timings of cache reads for benchmark and comparison purposes.
    This displays the speed of reading directly from the Linux buffer cache
    without disk access. This measurement is essentially an indication of
    the throughput of the processor, cache, and memory of the system under test.

-t  Perform timings of device reads for benchmark and comparison purposes.
    This displays the speed of reading through the buffer cache to the disk
    without any prior caching of data. This measurement is an indication of how
    fast the drive can sustain sequential data reads under Linux, without any
    filesystem overhead.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results of 3 runs of hdparm are shown below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11984 MB in  1.98 seconds = 6038.36 MB/sec
 Timing buffered disk reads:  158 MB in  3.01 seconds =  52.52 MB/sec

/dev/xvdc:
 Timing cached reads:   11988 MB in  1.98 seconds = 6040.01 MB/sec
 Timing buffered disk reads:  1810 MB in  3.00 seconds = 603.12 MB/sec


# hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11892 MB in  1.98 seconds = 5991.51 MB/sec
 Timing buffered disk reads:  172 MB in  3.00 seconds =  57.33 MB/sec

/dev/xvdc:
 Timing cached reads:   12056 MB in  1.98 seconds = 6075.29 MB/sec
 Timing buffered disk reads:  1972 MB in  3.00 seconds = 657.11 MB/sec


# hdparm -tT /dev/xvdb /dev/xvdc

/dev/xvdb:
 Timing cached reads:   11994 MB in  1.98 seconds = 6042.39 MB/sec
 Timing buffered disk reads:  254 MB in  3.02 seconds =  84.14 MB/sec

/dev/xvdc:
 Timing cached reads:   11890 MB in  1.99 seconds = 5989.70 MB/sec
 Timing buffered disk reads:  1962 MB in  3.00 seconds = 653.65 MB/sec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;
Sequential reads from instance storage are 10x faster compared to EBS on average.&lt;/p&gt;
&lt;h2&gt;IOzone&lt;/h2&gt;
&lt;p&gt;I'm running MySQL and sequential data reads are probably over idealistic scenario.
So I found another benchmark suite, called &lt;a href="http://iozone.org"&gt;IOzone&lt;/a&gt;.
I used the 3-414 version built from the official SRPM.&lt;/p&gt;
&lt;p&gt;IOzone performs multiple tests. I'm interested in read/re-read, random-read/write,
read-backwards and stride-read.&lt;/p&gt;
&lt;p&gt;For this round of testing I've tested with ext4 filesystem with and without journal
on both types of disks. I also experimented running Iozone inside a ramfs mounted
directory. However I didn't have the time to run the test suite multiple times.&lt;/p&gt;
&lt;p&gt;Then I used
&lt;a href="http://code.google.com/p/iozone-results-comparator/"&gt;iozone-results-comparator&lt;/a&gt; to
visualize the results. (I had to do a minor fix to the code to run inside virtualenv
and install all missing dependencies).&lt;/p&gt;
&lt;p&gt;Raw IOzone output, data visualization and the modified tools are available in the
&lt;a href="http://s3.amazonaws.com/atodorov/blog/aws_disk_benchmark_w_iozone.tar.bz2"&gt;aws_disk_benchmark_w_iozone.tar.bz2&lt;/a&gt;
file (size 51M).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Graphics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;EBS without journal(Baseline) vs. Instance Storage without journal(Set1)
&lt;img alt="EBS vs. Instance Storage" src="/images/aws_iozone/ebs_woj_vs_is_woj.png" title="EBS vs. Instance Storage" /&gt;&lt;/p&gt;
&lt;p&gt;Instance Storage without journal(Baseline) vs. Ramfs(Set1)
&lt;img alt="IS vs. Ramfs" src="/images/aws_iozone/ebs_woj_vs_is_woj.png" title="IS vs. Ramfs" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ext4 journal has no effect on reads, causes slow down when writing to disk. This
is expected;&lt;/li&gt;
&lt;li&gt;Instance storage is faster compared to EBS but not much.
If I understand the results correctly, read performance is similar in some cases;&lt;/li&gt;
&lt;li&gt;Ramfs is definitely the fastest but read performance compared to instance storage
is not two-fold (or more) as I expected;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instance storage appears to be faster (and this is expected) but I'm still not sure if
my application will gain any speed improvement or how much if migrated to read from
instance storage (or ramfs) instead of EBS. I will be performing more real-world
test next time, by comparing execution time for some of my largest SQL queries.&lt;/p&gt;
&lt;p&gt;If you have other ideas how to adequately measure I/O performance in the AWS cloud,
please use the comments below.&lt;/p&gt;</summary><category term="performance testing"></category><category term="QA"></category><category term="Amazon"></category><category term="EC2"></category><category term="cloud"></category></entry><entry><title>Click Tracking without MailChimp</title><link href="http://atodorov.org/blog/2013/01/31/click-tracking-without-mailchimp/" rel="alternate"></link><updated>2013-01-31T21:23:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2013-01-31:blog/2013/01/31/click-tracking-without-mailchimp/</id><summary type="html">&lt;p&gt;Here is a standard notification message that users at &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt;
receive. It is plain text, no HTML crap, short and URLs are clean and
descriptive. As the project lead developer I wanted to track when people click on
these links and visit the website but also keep existing functionality.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Email with links&amp;quot;" src="/images/email_w_links.png" title="Email with links" /&gt;&lt;/p&gt;
&lt;h2&gt;Standard approach&lt;/h2&gt;
&lt;p&gt;A pretty common approach when sending huge volumes of email is to use an external
service, such as MailChimp. This is one of many email
marketing services which comes with a lot of features. The most important to me
was analytics and reports.&lt;/p&gt;
&lt;p&gt;The downside is that MailChimp (and I guess others) use HTML formatted emails
extensively. I don't like that and I'm sure my users will not like it as well. 
They are all developers. Not to mention that MailChimp is much more expensive
than &lt;a href="http://aws.amazon.com/ses/"&gt;Amazon SES&lt;/a&gt; which I use currently.
No MailChimp for me!&lt;/p&gt;
&lt;p&gt;Another common approach, used by Feedburner by the way,
is to use shortened URLs which redirect to the original ones and measure clicks
in between. I also didn't like this for two reasons: 1) the shortened URLs look
ugly and they are not at all descriptive and 2) I need to generate them automatically
and maintain all the mappings. Why bother ?&lt;/p&gt;
&lt;h2&gt;How I did it?&lt;/h2&gt;
&lt;p&gt;So I needed something which will do a redirect to a predefined URL, measure how many
redirects were there (essentially clicks on the link) and look nice. The solution is
very simple, if you have not recognized it by now from the picture above. &lt;/p&gt;
&lt;p&gt;I opted for a custom redirect engine, which will add tracking information to the
destination URL so I can track it in Google Analytics.&lt;/p&gt;
&lt;p&gt;Previous URLs were of the form &lt;code&gt;http://www.dif.io/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/&lt;/code&gt;.
I've added the humble &lt;code&gt;/daily/?&lt;/code&gt; prefix before the URL path so it becomes
&lt;code&gt;http://www.dif.io/daily/?/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/&lt;/code&gt; becomes a query string parameter which
the &lt;code&gt;/daily/index.html&lt;/code&gt; page uses as its destination. Before doing the redirect
a script adds tracking parameters so that Google Analytics will properly
report this visit. Here is the code: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?utm_source=email&amp;amp;utm_medium=email&amp;amp;utm_campaign=Daily_Notification&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Previously Google Analytics was reporting these visits as direct hits while now it lists them under
campaigns like so:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Difio Analytics&amp;quot;" src="/images/analytics_difio_campaigns.png" title="Difio Analytics" /&gt;&lt;/p&gt;
&lt;p&gt;Because all visitors of &lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt; use JavaScript enabled browsers
I combined this approach with another one, to
&lt;a href="/blog/2013/01/28/remove-query-string-with-javascript-and-html5/"&gt;remove query string with JavaScript&lt;/a&gt;
and present clean URLs to the visitor.&lt;/p&gt;
&lt;h2&gt;Why JavaScript?&lt;/h2&gt;
&lt;p&gt;You may be asking why the hell I am using JavaScript and not Apache's wonderful mod_rewrite module? 
This is because the destination URLs are hosted in &lt;a href="http://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; and I'm
planning to integrate with &lt;a href="http://aws.amazon.com/cloudfront/"&gt;Amazon CloudFront&lt;/a&gt;. Both of them
don't support .htaccess rules nor anything else similar to mod_rewrite.&lt;/p&gt;
&lt;p&gt;As always I'd love to hear your thoughts and feedback. Please use the comment form below.&lt;/p&gt;</summary><category term="JavaScript"></category><category term="Amazon"></category><category term="S3"></category><category term="SES"></category><category term="cloud"></category></entry><entry><title>Cross-domain AJAX Served From CDN</title><link href="http://atodorov.org/blog/2012/05/19/cross-domain-ajax-served-from-cdn/" rel="alternate"></link><updated>2012-05-19T16:58:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-05-19:blog/2012/05/19/cross-domain-ajax-served-from-cdn/</id><summary type="html">&lt;p&gt;This week Amazon &lt;a href="http://aws.typepad.com/aws/2012/05/amazon-cloudfront-support-for-dynamic-content.html"&gt;announced&lt;/a&gt;
support for dynamic content in their CDN solution &lt;a href="http://aws.amazon.com/cloudfront/"&gt;&lt;em&gt;Amazon CloudFront&lt;/em&gt;&lt;/a&gt;.
The announce coincided with my efforts to migrate more pieces of &lt;em&gt;Difio&lt;/em&gt;'s &lt;a href="http://www.dif.io"&gt;website&lt;/a&gt; to &lt;em&gt;CloudFront&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this article I will not talk about hosting static files on CDN. This is easy and I've already written
about it &lt;a href="/blog/2012/04/17/using-openshift-as-amazon-cloudfront-origin-server/"&gt;here&lt;/a&gt;. I will show how to
cache AJAX(JSONP actually) responses and serve them directly from &lt;em&gt;Amazon CloudFront&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;For those of you who may not be familiar (are there any) CDN stands for
&lt;a href="https://en.wikipedia.org/wiki/Content_delivery_network"&gt;Content Delivery Network&lt;/a&gt;. In short
this employs numerous servers with identical content. The requests from the browser are served
from the location which gives best performance for the user. This is used by all major websites
to speed-up static content like images, video, CSS and JavaScript files.&lt;/p&gt;
&lt;p&gt;AJAX means &lt;a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;Asynchronous JavaScript and XML&lt;/a&gt;.
This is what Google uses to create dynamic user interface which doesn't require to reload the page.&lt;/p&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Difio&lt;/em&gt; has two web interfaces. The primary one is a static HTML website
which employs JavaScript for the dynamic areas. It is hosted on the dif.io domain.
The other one is powered by Django and provides the same interface plus the
&lt;a href="https://difio-otb.rhcloud.com/dashboard/"&gt;applications dashboard&lt;/a&gt; and several API functions
which don't have a visible user interface. This is under the *.rhcloud.com domain b/c it is hosted on
&lt;a href="http://openshift.redhat.com"&gt;&lt;em&gt;OpenShift&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The present state of the website is the result of rapid development using conventional methods - 
HTML templates and server-side processing. This is migrating to modern web technology like static HTML
and JavaScript while the server side will remain pure API service.&lt;/p&gt;
&lt;p&gt;For this migration to happen I need the HTML pages at dif.io to execute JavaScript and load information
which comes from the rhcloud.com domain. Unfortunately this is not easily doable with AJAX because
of the &lt;a href="https://en.wikipedia.org/wiki/Same_origin_policy"&gt;Same origin policy&lt;/a&gt; in browsers.&lt;/p&gt;
&lt;p&gt;I'm using the &lt;a href="http://dojotoolkit.org/"&gt;&lt;em&gt;Dojo Toolkit&lt;/em&gt;&lt;/a&gt; JavaScript framework which has a solution.
It's called &lt;a href="https://en.wikipedia.org/wiki/JSONP"&gt;JSONP&lt;/a&gt;. Here's how it works:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;     dif.io ------ JSONP request --&amp;gt; abc.rhcloud.com --v
        ^                                              |
        |                                              |
    JavaScript processing                              |
        |                                              |
        +------------------ JSONP response ------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty standard configuration for a web service.&lt;/p&gt;
&lt;h2&gt;Going to the clouds&lt;/h2&gt;
&lt;p&gt;The way &lt;em&gt;Dojo&lt;/em&gt; implements JSONP is through the
&lt;a href="http://dojotoolkit.org/reference-guide/1.7/dojo/io/script.html"&gt;dojo.io.script&lt;/a&gt; module.
It works by appending a query string parameter of the form &lt;em&gt;?callback=funcName&lt;/em&gt; which the server uses
to generate the JSONP response. This callback name is dynamically generated by &lt;em&gt;Dojo&lt;/em&gt; based on the order
in which your call to &lt;em&gt;dojo.io.script&lt;/em&gt; is executed.&lt;/p&gt;
&lt;p&gt;Until recently &lt;em&gt;Amazon CloudFront&lt;/em&gt; ignored all query string parameters when requesting the content from
the origin server. Without the query string it was not possible to generate the JSONP response.
Luckily Amazon resolved the issue only one day after I asked about it on their forums.&lt;/p&gt;
&lt;p&gt;Now &lt;em&gt;Amazon CloudFront&lt;/em&gt; will use the URL path and the query string parameters to identify the objects in cache.
To enable this edit the CloudFront distribution &lt;em&gt;behavior(s)&lt;/em&gt; and set &lt;em&gt;Forward Query Strings&lt;/em&gt; to Yes.&lt;/p&gt;
&lt;p&gt;When a visitor of the website requests the data &lt;em&gt;Amazon CloudFront&lt;/em&gt; will use exactly the same url path and query strings
to fetch the content from the origin server. All that I had to do is switch the domain of the JSONP service
to point to the cloudfront.net domain. It became like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;                                                        | Everything on this side is handled by Amazon.
                                                        | No code required!
                                                        |
     dif.io ------ JSONP request --&amp;gt; xyz.cloudfront.net -- JSONP request if cache miss --&amp;gt; abc.rhcloud.com --v
        ^                              |                ^                                                    |
        |                              |                |                                                    |
    JavaScript processing              |                +---------- JSONP response --------------------------+
        |                              |
        +---- cached JSONP response ---+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the website structure and code didn't change at all. All that changed was a single domain name.&lt;/p&gt;
&lt;h2&gt;Controlling the cache&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Amazon CloudFront&lt;/em&gt; will keep the contents in cache based on the origin headers if present or the manual configuration
from the AWS Console. To work around frequent requests to the origin server it is considered best practice to set the
Expires header to a value far in the future, like 1 year.
However if the content changes you need some way to tell &lt;em&gt;CloudFront&lt;/em&gt; about it. The most commonly used method is through
using different URLs to access the same content. This will cause &lt;em&gt;CloudFront&lt;/em&gt; to cache the content under the new location
while keeping the old content until it expires.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dojo&lt;/em&gt; makes this very easy:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dojo/io/script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://xyz.cloudfront.net/api/json/updates/1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;callbackParamName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;timeStamp&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;....&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;content&lt;/em&gt; property allows additional key/value pairs to be sent in the query string. The
&lt;em&gt;timeStamp&lt;/em&gt; parameter serves only to control &lt;em&gt;Amazon CloudFront&lt;/em&gt; cache. It's not processed server side.&lt;/p&gt;
&lt;p&gt;On the server-side we have:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;max-age=31536000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Expires&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31536000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y %H:%M:%S GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;There were two immediate benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduced page load time. Combined with serving static files from CDN this greatly improves the user experience;&lt;/li&gt;
&lt;li&gt;Reduced server load. Content is requested only once if it is missing from the cache and then served from CloudFront.
The server isn't so busy serving content so it can be used to do more computations or simply reduce the bill.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The presented method works well for &lt;em&gt;Difio&lt;/em&gt; because of two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The content which &lt;em&gt;Difio&lt;/em&gt; serves usually doesn't change at all once made public. In rare occasions, for example an error
has been published, we have to regenerate new content and publish it under the same URL.&lt;/li&gt;
&lt;li&gt;Before content is made public it is inspected for errors and this also preseeds the cache.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Amazon"></category><category term="CloudFront"></category><category term="cloud"></category></entry><entry><title>Using OpenShift as Amazon CloudFront Origin Server</title><link href="http://atodorov.org/blog/2012/04/17/using-openshift-as-amazon-cloudfront-origin-server/" rel="alternate"></link><updated>2012-04-17T17:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-04-17:blog/2012/04/17/using-openshift-as-amazon-cloudfront-origin-server/</id><summary type="html">&lt;p&gt;It's been several months after the start of &lt;a href="http://www.dif.io"&gt;&lt;em&gt;Difio&lt;/em&gt;&lt;/a&gt; and I started
migrating various parts of the platform to CDN. The first to go are static files like
CSS, JavaScript, images and such. In this article I will show you how to get started with 
&lt;em&gt;Amazon CloudFront&lt;/em&gt; and &lt;em&gt;OpenShift&lt;/em&gt;. It is very easy once you understand how it works.&lt;/p&gt;
&lt;h2&gt;Why CloudFront and OpenShift&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Amazon CloudFront&lt;/em&gt; is cheap and easy to setup with virtually no maintenance.
The most important feature is that it can fetch content from any public website.
Integrating it together with &lt;em&gt;OpenShift&lt;/em&gt; gives some nice benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All static assets are managed with Git and stored in the same place where the application
code and HTML is - easy to develop and deploy;&lt;/li&gt;
&lt;li&gt;No need for external service to host the static files;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CloudFront&lt;/em&gt; will be serving the files so network load on &lt;em&gt;OpenShift&lt;/em&gt; is minimal;&lt;/li&gt;
&lt;li&gt;Easy to manage versioned URLs because HTML and static assets are in the same repo - more on this later;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Object expiration&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;CloudFront&lt;/em&gt; will cache your objects for a certain period and then expire them. Frequently
used objects are expired less often. Depending on the content you may want to update the cache
more or less frequently. In my case CSS and JavaScript files change rarely so I wanted to tell
CloudFront to not expire the files quickly. I did this by telling &lt;em&gt;Apache&lt;/em&gt; to send a custom value for
the Expires header.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    $ curl http://d71ktrt2emu2j.cloudfront.net/static/v1/css/style.css -D headers.txt
    $ cat headers.txt 
    HTTP/1.0 200 OK
    Date: Mon, 16 Apr 2012 19:02:16 GMT
    Server: Apache/2.2.15 (Red Hat)
    Last-Modified: Mon, 16 Apr 2012 19:00:33 GMT
    ETag: &amp;quot;120577-1b2d-4bdd06fc6f640&amp;quot;
    Accept-Ranges: bytes
    Content-Length: 6957
    Cache-Control: max-age=31536000
    Expires: Tue, 16 Apr 2013 19:02:16 GMT
    Content-Type: text/css
    Strict-Transport-Security: max-age=15768000, includeSubDomains
    Age: 73090
    X-Cache: Hit from cloudfront
    X-Amz-Cf-Id: X558vcEOsQkVQn5V9fbrWNTdo543v8VStxdb7LXIcUWAIbLKuIvp-w==,e8Dipk5FSNej3e0Y7c5ro-9mmn7OK8kWfbaRGwi1ww8ihwVzSab24A==
    Via: 1.0 d6343f267c91f2f0e78ef0a7d0b7921d.cloudfront.net (CloudFront)
    Connection: close
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All headers before Strict-Transport-Security come from the origin server.&lt;/p&gt;
&lt;h2&gt;Versioning&lt;/h2&gt;
&lt;p&gt;Sometimes however you need to update the files and force &lt;em&gt;CloudFront&lt;/em&gt; to update the content. 
The recommended way to do this is to use URL versioning and update the path to the files
which changed. This will force &lt;em&gt;CloudFront&lt;/em&gt; to cache and serve the content under the new path
while keeping the old content available until it expires. This way your visitors will not be
viewing your site with the new CSS and old JavaScript. &lt;/p&gt;
&lt;p&gt;There are many ways to do this and there are some nice frameworks as well. For Python there is &lt;em&gt;webassets&lt;/em&gt;.
I don't have many static files so I opted for no additional dependencies. Instead I will be updating the
versions by hand.&lt;/p&gt;
&lt;p&gt;What comes to mind is using &lt;em&gt;mod_rewrite&lt;/em&gt; to redirect the versioned URLs back to non versioned ones.
However there's a catch. If you do this &lt;em&gt;CloudFront&lt;/em&gt; will cache the redirect itself, not the content.
The next time visitors hit &lt;em&gt;CloudFront&lt;/em&gt; they will receive the cached redirect and follow it back to your
origin server, which is defeating the purpose of having CDN.&lt;/p&gt;
&lt;p&gt;To do it properly you have to rewrite the URLs but still return a 200 response code and the
content which needs to be cached. This is done with &lt;em&gt;mod_proxy&lt;/em&gt;: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    RewriteEngine on
    RewriteRule ^VERSION-(\d+)/(.*)$ http://%{ENV:OPENSHIFT_INTERNAL_IP}:%{ENV:OPENSHIFT_INTERNAL_PORT}/static/$2 [P,L]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This .htaccess trick doesn't work on &lt;em&gt;OpenShift&lt;/em&gt; though. &lt;em&gt;mod_proxy&lt;/em&gt; is not enabled at the moment.
See &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=812389"&gt;bug 812389&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Luckily I was able to use symlinks to point to the content. Here's how it looks:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="x"&gt;    $ pwd&lt;/span&gt;
&lt;span class="x"&gt;    /home/atodorov/difio/wsgi/static&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;
&lt;span class="x"&gt;    $ cat .htaccess&lt;/span&gt;
&lt;span class="x"&gt;    ExpiresActive On&lt;/span&gt;
&lt;span class="x"&gt;    ExpiresDefault &amp;quot;access plus 1 year&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;
&lt;span class="x"&gt;    $ ls -l&lt;/span&gt;
&lt;span class="x"&gt;    drwxrwxr-x. 6 atodorov atodorov 4096 16 Apr 21,31 o&lt;/span&gt;
&lt;span class="x"&gt;    lrwxrwxrwx. 1 atodorov atodorov    1 16 Apr 21,47 v1 -&amp;gt; o&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;
&lt;span class="x"&gt;    settings.py:&lt;/span&gt;
&lt;span class="x"&gt;    STATIC_URL = &amp;#39;//d71ktrt2emu2j.cloudfront.net/static/v1/&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;
&lt;span class="x"&gt;    HTML template:&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;link type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;screen&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;STATIC_URL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;css/style.css&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How to implement it&lt;/h2&gt;
&lt;p&gt;First you need to split all CSS and JavaScript from your HTML if you haven't done so already. &lt;/p&gt;
&lt;p&gt;Then place everything under your git repo so that &lt;em&gt;OpenShift&lt;/em&gt; will serve the files. For Python applications
place the files under wsgi/static/ directory in your git repo.&lt;/p&gt;
&lt;p&gt;Point all of your HTML templates to the static location on &lt;em&gt;OpenShift&lt;/em&gt; and test if everything works as expected. 
This is best done if you're using some sort of template language and store the location
in a single variable which you can change later.
&lt;em&gt;Difio&lt;/em&gt; uses &lt;em&gt;Django&lt;/em&gt; and the &lt;em&gt;STATIC_URL&lt;/em&gt; variable of course.&lt;/p&gt;
&lt;p&gt;Create your &lt;em&gt;CloudFront&lt;/em&gt; distribution - don't use &lt;em&gt;Amazon S3&lt;/em&gt;, instead configure a custom origin server. Write down
your &lt;em&gt;CloudFront&lt;/em&gt; URL. It will be something like &lt;strong&gt;1234xyz.cludfront.net&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Every time a request hits &lt;em&gt;CloudFront&lt;/em&gt; it will check if the object is present in the cache. If not present
&lt;em&gt;CloudFront&lt;/em&gt; will fetch the object from the origin server and populate the cache. Then the object is sent
to the user.&lt;/p&gt;
&lt;p&gt;Update your templates to point to the new cloudfront.net URL and redeploy your website!&lt;/p&gt;</summary><category term="OpenShift"></category><category term="Amazon"></category><category term="cloud"></category></entry><entry><title>OpenShift Cron Takes Over Celerybeat</title><link href="http://atodorov.org/blog/2012/03/14/openshift-cron-takes-over-celerybeat/" rel="alternate"></link><updated>2012-03-14T20:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-03-14:blog/2012/03/14/openshift-cron-takes-over-celerybeat/</id><summary type="html">&lt;p&gt;&lt;a href="http://celeryproject.org/"&gt;&lt;em&gt;Celery&lt;/em&gt;&lt;/a&gt; is an asynchronous task queue/job queue
based on distributed message passing. You can define tasks as Python functions,
execute them in the background and in a periodic fashion.
&lt;a href="http://www.dif.io"&gt;&lt;em&gt;Difio&lt;/em&gt;&lt;/a&gt; uses &lt;em&gt;Celery&lt;/em&gt; for virtually everything.
Some of the tasks are scheduled after some event takes place (like user pressed a button)
or scheduled periodically.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Celery&lt;/em&gt; provides several components of which &lt;em&gt;celerybeat&lt;/em&gt; is the periodic task scheduler.
When combined with &lt;a href="http://djangoproject.com"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; it gives you a very nice admin interface
which allows periodic tasks to be added to the scheduler.&lt;/p&gt;
&lt;h2&gt;Why change&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Difio&lt;/em&gt; has relied on &lt;em&gt;celerybeat&lt;/em&gt; for a couple of months. Back then, when &lt;em&gt;Difio&lt;/em&gt; launched,
there was no cron support for OpenShift so running &lt;em&gt;celerybeat&lt;/em&gt; sounded reasonable.
It used to run on a dedicated virtual server and for most of the time that was fine. &lt;/p&gt;
&lt;p&gt;There were a number of issues which &lt;em&gt;Difio&lt;/em&gt; faced during its first months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;celerybeat&lt;/em&gt; would sometime die due to no free memory on the virtual instance.
When that happened no new tasks were scheduled and data was left unprocessed.
Let alone that higher memory instance and the processing power which comes with it
cost extra money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Difio&lt;/em&gt; is split into several components which need to have the same code base
locally - the most important are database settings and the periodic tasks
code. At least in one occasion &lt;em&gt;celerybeat&lt;/em&gt; failed to start because of a buggy 
task code. The offending code was fixed in the application server on OpenShift but
not properly synced to the &lt;em&gt;celerybeat&lt;/em&gt; instance. Keeping code in sync is a priority
for distributed projects which rely on &lt;em&gt;Celery&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Celery&lt;/em&gt; and &lt;em&gt;django-celery&lt;/em&gt; seem to be updated quite often. This poses a significant risk
of ending up with different versions on the scheduler, worker nodes and the app server. This will
bring the whole application to a halt if at some point a backward incompatible change is introduced
and not properly tested and updated. Keeping infrastructure components in sync can be a big challenge
and I try to minimize this effort as much as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having to navigate to the admin pages every time I add a new task or want to change the execution
frequency doesn't feel very natural for a console user like myself and IMHO is less productive.
For the record I primarily use &lt;em&gt;mcedit&lt;/em&gt;. I wanted to have something more close to the
write, commit and push work-flow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The take over&lt;/h2&gt;
&lt;p&gt;It's been some time since OpenShift
&lt;a href="https://www.redhat.com/openshift/community/blogs/getting-started-with-cron-jobs-on-openshift"&gt;introduced&lt;/a&gt;
the cron cartridge and I decided to give it a try.&lt;/p&gt;
&lt;p&gt;The first thing I did is to write a simple script which can execute any task from the difio.tasks module
by piping it to the Django shell (a Python shell actually).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Copyright (c) 2012, Alexander Todorov &amp;lt;atodorov@nospam.otb.bg&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# This script is symlinked to from the hourly/minutely, etc. directories&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# SYNOPSIS&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# ./run_celery_task cron_search_dates&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# OR&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# ln -s run_celery_task cron_search_dates&lt;/span&gt;
&lt;span class="c"&gt;# ./cron_search_dates&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;

&lt;span class="nv"&gt;TASK_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$TASK_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;TASK_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$OPENSHIFT_APP_DIR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$OPENSHIFT_APP_DIR&lt;/span&gt;/virtenv/bin/activate
    &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHON_EGG_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPENSHIFT_DATA_DIR&lt;/span&gt;/.python-eggs
    &lt;span class="nv"&gt;REPO_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$OPENSHIFT_REPO_DIR&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;REPO_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/../../..&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import difio.tasks; difio.tasks.&lt;/span&gt;&lt;span class="nv"&gt;$TASK_NAME&lt;/span&gt;&lt;span class="s2"&gt;.delay()&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;$REPO_DIR&lt;/span&gt;/wsgi/difio/manage.py shell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a multicall script which allows symlinks with different names to point to it. 
Thus to add a new task to cron I just need to make a symlink to the script from one of the
hourly/, minutely/, daily/, etc. directories under cron/.&lt;/p&gt;
&lt;p&gt;The script accepts a parameter as well which allows me to execute it locally for debugging purposes
or to schedule some tasks out of band.
This is how it looks like on the file system:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls -l .openshift/cron/hourly/
some_task_name -&amp;gt; ../tasks/run_celery_task
another_task -&amp;gt; ../tasks/run_celery_task
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After having done these preparations I only had to embed the cron cartridge and git push to OpenShift:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;rhc-ctl-app -a difio -e add-cron-1.4 &amp;amp;&amp;amp; git push
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;At present OpenShift can schedule your jobs every minute, hour, day, week or month and does so using the
&lt;em&gt;run-parts&lt;/em&gt; script. You can't schedule a script to execute at 4:30 every Monday or every 45 minutes for example.
See &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=803485"&gt;rhbz #803485&lt;/a&gt; if you want to follow the
progress. Luckily &lt;em&gt;Difio&lt;/em&gt; doesn't use this sort of job scheduling for the moment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Difio&lt;/em&gt; is scheduling periodic tasks from OpenShift cron for a few days already. 
It seems to work reliably and with no issues. One less component to maintain and worry about.
More time to write code.&lt;/p&gt;</summary><category term="tips"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>Tip: How to Get to the OpenShift Shell</title><link href="http://atodorov.org/blog/2012/03/09/how-to-get-to-the-openshift-shell/" rel="alternate"></link><updated>2012-03-09T21:43:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-03-09:blog/2012/03/09/how-to-get-to-the-openshift-shell/</id><summary type="html">&lt;p&gt;I wanted to examine the Perl environment on OpenShift and got tired of making snapshots,
unzipping the archive and poking through the files. I wanted a shell. Here's how to get one.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the application info first&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-domain-info 
Password: 
Application &lt;span class="nv"&gt;Info&lt;/span&gt;
&lt;span class="o"&gt;================&lt;/span&gt;
myapp
    Framework: perl-5.10
     Creation: 2012-03-08T13:34:46-04:00
         UUID: 8946b976ad284cf5b2401caf736186bd
      Git URL: ssh://8946b976ad284cf5b2401caf736186bd@myapp-mydomain.rhcloud.com/~/git/myapp.git/
   Public URL: http://myapp-mydomain.rhcloud.com/

 Embedded: 
      None
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Git URL has your username and host&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now just ssh into the application&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh 8946b976ad284cf5b2401caf736186bd@myapp-mydomain.rhcloud.com

    Welcome to OpenShift shell

    This shell will assist you in managing OpenShift applications.

    !!! IMPORTANT !!! IMPORTANT !!! IMPORTANT !!!
    Shell access is quite powerful and it is possible &lt;span class="k"&gt;for&lt;/span&gt; you to
    accidentally damage your application.  Proceed with care!
    If worse comes to worst, destroy your application with &lt;span class="s1"&gt;&amp;#39;rhc app destroy&amp;#39;&lt;/span&gt;
    and recreate it
    !!! IMPORTANT !!! IMPORTANT !!! IMPORTANT !!!

    Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more info.

&lt;span class="o"&gt;[&lt;/span&gt;myapp-mydomain.rhcloud.com ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Voila!&lt;/strong&gt;&lt;/p&gt;</summary><category term="tips"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>How to Update Dependencies on OpenShift</title><link href="http://atodorov.org/blog/2012/02/18/how-to-update-dependencies-on-openshift/" rel="alternate"></link><updated>2012-02-18T01:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-02-18:blog/2012/02/18/how-to-update-dependencies-on-openshift/</id><summary type="html">&lt;p&gt;If you are already running some cool application on &lt;a href="http://openshift.redhat.com"&gt;OpenShift&lt;/a&gt;
it could be the case that you have to update some of the packages installed as dependencies.
Here is an example for an application using the python-2.6 cartridge.&lt;/p&gt;
&lt;h2&gt;Pull latest upstream packages&lt;/h2&gt;
&lt;p&gt;The most simple method is to update everything to the latest upstream versions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Backup! Backup! Backup!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;rhc-snapshot -a mycoolapp
mv mycoolapp.tar.gz mycoolapp-backup-before-update.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you haven't specified any particular version in &lt;code&gt;setup.py&lt;/code&gt; it will
look like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;difio-openshift-python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;MySQL-python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To update simply push to OpenShift instructing it to rebuild your virtualenv:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;cd mycoolapp/
touch .openshift/markers/force_clean_build
git add .openshift/markers/force_clean_build
git commit -m &amp;quot;update to latest upstream&amp;quot;
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voila! The environment hosting your application is rebuilt from scratch.&lt;/p&gt;
&lt;h2&gt;Keeping some packages unchanged&lt;/h2&gt;
&lt;p&gt;Suppose that before the update you have &lt;code&gt;Markdown-2.0.1&lt;/code&gt; and you want to keep it!
This is easily solved by adding versioned dependency to &lt;code&gt;setup.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-       &amp;#39;Markdown&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;+       &amp;#39;Markdown==2.0.1&amp;#39;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do that OpenShift will install the same &lt;code&gt;Markdown&lt;/code&gt; version when rebuilding your
application. Everything else will use the latest available versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; after the update it's recommended that you remove the 
&lt;code&gt;.openshift/markers/force_clean_build&lt;/code&gt; file. This will speed up the push/build process
and will not surprise you with unwanted changes.&lt;/p&gt;
&lt;h2&gt;Update only selected packages&lt;/h2&gt;
&lt;p&gt;Unless your application is really simple or you have tested the updates, I suspect that
you want to update only selected packages. This can be done without rebuilding the whole
virtualenv. Use versioned dependencies in &lt;code&gt;setup.py&lt;/code&gt; :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-       &amp;#39;Markdown==2.0.1&amp;#39;,&lt;/span&gt;
&lt;span class="gd"&gt;-       &amp;#39;django-countries&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;+       &amp;#39;Markdown&amp;gt;=2.1&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;+       &amp;#39;django-countries&amp;gt;=1.1.2&amp;#39;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No need for &lt;code&gt;force_clean_build&lt;/code&gt; this time. Just&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    git commit &amp;amp;&amp;amp; git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the time of writing my application was using &lt;code&gt;Markdown-2.0.1&lt;/code&gt; and &lt;code&gt;django-countries-1.0.5&lt;/code&gt;.
Then it updated to &lt;code&gt;Markdown-2.1.1&lt;/code&gt; and &lt;code&gt;django-countires-1.1.2&lt;/code&gt; which also happened to be
the latest versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this will not work without &lt;code&gt;force_clean_build&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-       &amp;#39;django-countries==1.0.5&amp;#39;,&lt;/span&gt;
&lt;span class="gi"&gt;+       &amp;#39;django-countries&amp;#39;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Warning&lt;/h2&gt;
&lt;p&gt;OpenShift uses a local mirror of &lt;a href="http://pypi.python.org"&gt;Python Package Index&lt;/a&gt;.
It seems to be updated every 24 hours or so. Have this in mind if you want to update
to a package that was just released. It will not work! See
&lt;a href="/blog/2013/04/24/how-to-deploy-python-hotfix-on-redhat-openshift-cloud/"&gt;How to Deploy Python Hotfix on OpenShift&lt;/a&gt;
if you wish to work around this limitation.&lt;/p&gt;</summary><category term="tips"></category><category term="OpenShift"></category><category term="cloud"></category></entry><entry><title>Spinning-up a Development Instance on OpenShift</title><link href="http://atodorov.org/blog/2012/02/10/spinning-up-a-development-instance-on-openshift/" rel="alternate"></link><updated>2012-02-10T21:19:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2012-02-10:blog/2012/02/10/spinning-up-a-development-instance-on-openshift/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.dif.io"&gt;Difio&lt;/a&gt; is hosted on &lt;a href="http://openshift.redhat.com"&gt;OpenShift&lt;/a&gt;.
During development I often need to spin-up another copy of Difio to use for testing and development.
With OpenShift this is easy and fast. Here's how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create another application on OpenShift. This will be your development instance.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;rhc-create-app -a myappdevel -t python-2.6
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find out the git URL for the production application:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc-user-info
Application &lt;span class="nv"&gt;Info&lt;/span&gt;
&lt;span class="o"&gt;================&lt;/span&gt;
myapp
    Framework: python-2.6
     Creation: 2012-02-10T12:39:53-05:00
         UUID: 723f0331e17041e8b34228f87a6cf1f5
      Git URL: ssh://723f0331e17041e8b34228f87a6cf1f5@myapp-mydomain.rhcloud.com/~/git/myapp.git/
   Public URL: http://myapp-mydomain.rhcloud.com/
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the current code base from the production instance to devel instance:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;cd myappdevel
git remote add production -m master ssh://723f0331e17041e8b34228f87a6cf1f5@myapp-mydomain.rhcloud.com/~/git/myapp.git/
git pull -s recursive -X theirs production master
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now your &lt;code&gt;myappdevel&lt;/code&gt; is the same as your production instance. You will probably want to
modify your database connection settings at this point and start adding new features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="OpenShift"></category><category term="cloud"></category></entry></feed>