<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: S3 | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/s3/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-24T22:12:52+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Created a Website In Two Days Without Coding]]></title>
    <link href="http://atodorov.org/blog/2013/07/31/how-i-created-a-website-in-two-days-without-coding/"/>
    <updated>2013-07-31T21:55:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/07/31/how-i-created-a-website-in-two-days-without-coding</id>
    <content type="html"><![CDATA[<p><img src="/images/logos/obuvki41plus_header.png" title="header image" alt="header image" /></p>

<p>This is a simple story about a website I helped create without using any
programming at all. It took me two days because of the images and the logo
design which I've commissioned to a friend.</p>

<p>The website is <a href="http://obuvki41plus.com/">obuvki41plus.com</a> which is a
re-seller business my spouse runs. It specializes in large size, elegant
ladies shoes - Europe size 41 plus (hard to find in Bulgaria),
hence the name.</p>

<h2>Required Functionality</h2>

<ul>
<li>Display a catalog of items for sale with detailed information about
each item;</li>
<li>Make it possible for people to comment and share the items;</li>
<li>Very basic shopping cart which stores the selected items and then
redirects to a page with order instructions. Actual order is made via
phone for several reasons which I will explain in
<a href="/blog/2013/08/01/why-taking-orders-by-phone-works-for-my-start-up/">another post</a>;</li>
<li>Add a feedback/contact form;</li>
<li>Look nice on mobile devices.</li>
</ul>


<h2>Technology</h2>

<ul>
<li>The website is static, all pages are simple HTML and is hosted in
Amazon S3;</li>
<li>Comments are provided by Facebook's
<a href="https://developers.facebook.com/docs/reference/plugins/comments/">Comments Box</a>
plug-in;</li>
<li>Social media buttons and tracking are provided by
<a href="https://www.addthis.com/">AddThis</a>;</li>
<li>Visitors analytics is standard and is from
<a href="http://www.google.com/analytics/">Google Analytics</a>;</li>
<li>Template is from <a href="http://pages.github.com/">GitHub Pages</a> with slight
modifications; Works on mobile too;</li>
<li>Logo is custom designed by my friend
<a href="https://www.facebook.com/aluinpoli">Polina Valerieva</a>;</li>
<li>Feedback/contact form is by <a href="https://www.uservoice.com/">UserVoice</a>;</li>
<li>Shopping cart is by <a href="http://simplecartjs.org/">simpleCart(js)</a>.
I've created a simple animation effect when pressing the "ADD TO CART"
link to visually alert the user. This is done with jQuery.</li>
</ul>


<p>I could have used some JavaScript templating engine like
<a href="http://handlebarsjs.com/">Handlebars</a> but at the time I didn't know about
it and I prefer not to write JavaScript if possible :).</p>

<h2>Colophon</h2>

<p>I did some coding after the initial release eventually.
I've transformed the website to a Django
based site which is exported as static HTML.</p>

<p>This helps me with faster deployment/management as everything is stored
in git, allows templates inheritance and also makes the site ready to
add more functionality if required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance test: Amazon ElastiCache vs Amazon S3]]></title>
    <link href="http://atodorov.org/blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3/"/>
    <updated>2013-06-26T21:22:00+03:00</updated>
    <id>http://atodorov.org/blog/2013/06/26/performance-test-amazon-elasticache-vs-amazon-s3</id>
    <content type="html"><![CDATA[<p>Which Django cache backend is faster? Amazon ElastiCache or Amazon S3 ?</p>

<p>Previously I've mentioned about
<a href="/blog/2013/06/19/django-tips-using-cache-for-stateful-http/">using Django's cache to keep state between HTTP requests</a>.
In my demo described there I was using <a href="http://github.com/atodorov/django-s3-cache">django-s3-cache</a>.
It is time to move to production so I decided to measure the performance difference between the two
cache options available at Amazon Web Services.</p>

<p><strong>Update 2013-07-01</strong>: my initial test may have been false since I had not configured
ElastiCache access properly. I saw no errors but discovered the issue today on another
system which was failing to store the cache keys but didn't show any errors either.
I've re-run the tests and updated times are shown below.</p>

<h2>Test infrastructure</h2>

<ul>
<li>One Amazon S3 bucket, located in US Standard (aka US East) region;</li>
<li>One Amazon ElastiCache cluster with one Small Cache Node (cache.m1.small) with Moderate I/O capacity;</li>
<li>One Amazon Elasticache cluster with one Large Cache Node (cache.m1.large) with High I/O Capacity;</li>
<li><strong>Update:</strong> I've tested both <code>python-memcached</code> and <code>pylibmc</code> client libraries for Django;</li>
<li><strong>Update:</strong> Test is executed from an EC2 node in the us-east-1a availability zone;</li>
<li><strong>Update:</strong> Cache clusters are in the us-east-1a availability zone.</li>
</ul>


<h2>Test Scenario</h2>

<p>The test platform is Django. I've created a
<a href="https://github.com/atodorov/Amazon-ElastiCache-vs-Amazon-S3-Django">skeleton project</a>
with only <code>CACHES</code> settings
defined and necessary dependencies installed. A file called <code>test.py</code> holds the
test cases, which use the standard timeit module. The object which is stored in cache
is very small - it holds a phone/address identifiers and couple of user made selections.
The code looks like this:</p>

<p>{% codeblock lang:python %}
import timeit</p>

<p>s3_set = timeit.Timer(
"""
for i in range(1000):</p>

<pre><code>my_cache.set(i, MyObject)
</code></pre>

<p>"""
,
"""
from django.core import cache</p>

<p>my_cache = cache.get_cache('default')</p>

<p>MyObject = {</p>

<pre><code>'from' : '359123456789',
'address' : '6afce9f7-acff-49c5-9fbe-14e238f73190',
'hour' : '12:30',
'weight' : 5,
'type' : 1,
</code></pre>

<p>}
"""
)</p>

<p>s3_get = timeit.Timer(
"""
for i in range(1000):</p>

<pre><code>MyObject = my_cache.get(i)
</code></pre>

<p>"""
,
"""
from django.core import cache</p>

<p>my_cache = cache.get_cache('default')
"""
)</p>

<h3>skip</h3>

<p>{% endcodeblock %}</p>

<p>Tests were executed from the Django shell <del>on my laptop</del>
on an EC2 instance in the us-east-1a availability zone. ElastiCache nodes
were freshly created/rebooted before test execution. S3 bucket had no objects.</p>

<p>{% codeblock lang:python %}</p>

<p>$ ./manage.py shell
Python 2.6.8 (unknown, Mar 14 2013, 09:31:22)
[GCC 4.6.2 20111027 (Red Hat 4.6.2-2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)</p>

<blockquote><blockquote><blockquote><p>from test import *</p>

<p>s3_set.repeat(repeat=3, number=1)
[68.089607000350952, 70.806712865829468, 72.49261999130249]</p>

<p>s3_get.repeat(repeat=3, number=1)
[43.778793096542358, 43.054368019104004, 36.19232702255249]</p>

<p>pymc_set.repeat(repeat=3, number=1)
[0.40637087821960449, 0.3568730354309082, 0.35815882682800293]</p>

<p>pymc_get.repeat(repeat=3, number=1)
[0.35759496688842773, 0.35180497169494629, 0.39198613166809082]</p>

<p>libmc_set.repeat(repeat=3, number=1)
[0.3902890682220459, 0.30157709121704102, 0.30596804618835449]</p>

<p>libmc_get.repeat(repeat=3, number=1)
[0.28874802589416504, 0.30520200729370117, 0.29050207138061523]</p>

<p>libmc_large_set.repeat(repeat=3, number=1)
[1.0291709899902344, 0.31709098815917969, 0.32010698318481445]</p>

<p>libmc_large_get.repeat(repeat=3, number=1)
[0.2957158088684082, 0.29067802429199219, 0.29692888259887695]</p>

<p>{% endcodeblock %}</p></blockquote></blockquote></blockquote>

<h2>Results</h2>

<p>As expected ElastiCache is much faster (10x) compared to S3. However the difference
between the two ElastiCache node types is subtle. I will stay with the smallest
possible node to minimize costs. Also as seen, pylibmc is a bit faster compared to
the pure Python implementation.</p>

<p>Depending on your objects size or how many set/get operations you perform per
second you may need to go with the larger nodes. Just test it!</p>

<p><del>It surprised me how slow django-s3-cache is.</del>
The false test showed django-s3-cache to be 100x slower but new results are better.
10x decrease in performance sounds about right for a filesystem backed cache.</p>

<p>A quick look at the code
of the two backends shows some differences. The one I immediately see is that
for every cache key django-s3-cache creates an sha1 hash which is used as the
storage file name. This was modeled after the filesystem backend but I think the
design is wrong - the memcached backends don't do this.</p>

<p>Another one is that django-s3-cache time-stamps all objects and uses pickle to serialize them.
I wonder if it can't just write them as binary blobs directly. There's definitely lots
of room for improvement of django-s3-cache. I will let you know my findings once I
get to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Runs Your Start-up - Useful at Night]]></title>
    <link href="http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night/"/>
    <updated>2013-03-27T12:00:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/03/27/what-runs-your-startup-useful-at-night</id>
    <content type="html"><![CDATA[<p><img style="float: left; margin-right: 10px;" src="http://atodorov.org/images/startup/usefulatnight.png" alt="Useful at Night logo" /></p>

<p><a href="http://usefulatnight.com/">Useful at Night</a> is a mobile guide for nightlife
empowering real time discovery of cool locations, allowing nightlife players
to identify opinion leaders. Through geo-location and data aggregation
capabilities, the application allows useful exploration of cities, places and
parties.</p>

<p><a href="http://about.me/velev">Evelin Velev</a> was kind enough to share what technologies
his team uses to run their star-up.</p>

<br/>


<h2>Main Technologies</h2>

<p>Main technologies used are Node.js, HTML 5 and NoSQL.</p>

<p>Back-end application servers are written in Node.js and hosted at Heroku,
coupled with <a href="http://www.redistogo.com/">RedisToGo</a> for caching and
CouchDB served by <a href="https://cloudant.com/">Cloudant</a> for storage.</p>

<p>Their mobile front-end supports both iOS and Android platforms and is built using
HTML5 and a homemade UI framework called RAPID. There are some native parts developed
in Objective-C and Java respectively.</p>

<p>In addition <em>Useful at Night</em> uses MongoDB for metrics data with a custom metrics solution
written in Node.js; Amazon S3 for storing different assets; and a custom storage solution
called Divan (simple CouchDB like).</p>

<h2>Why Not Something Else?</h2>

<p>{% blockquote %}
We chose Node.js for our application servers, because it enables us to build efficient
distributed systems while sharing significant amounts of code between client and server.
Things get really interesting when you couple Node.js with Redis for data structure
sharing and message passing, as the two technologies play very well together.</p>

<p>We chose CouchDB as our main back-end because it is the most schema-less data-store that
supports secondary indexing. Once you get fluent with its map-reduce views, you can
compute an index out of practically anything. For comparison, even MongoDB requires
that you design your documents as to enable certain indexing patterns. Put otherwise,
we'd say CouchDB is a data-store that enables truly lean engineering - we have never had
to re-bake or migrate our data since day one, while we're constantly experimenting with
new ways to index, aggregate and query it.</p>

<p>We chose HTML5 as our front-end technology, because it's cross-platform and because we
believe it's ... almost ready. Things are still really problematic on Android, but iOS
boasts a gorgeous web presentation platform, and Windows 8 is also joining the game with
a very good web engine. Obviously we're constantly running into issues and limitations,
mostly related to the unfortunate fact that in spite of some recent developments,
a web app is still mostly single threaded. However, we're getting there, and we're proud
to say we're running a pretty graphically complex hybrid app with near-native GUI performance
on the iPhone 4S and above.
{% endblockquote %}</p>

<h2>Want More Info?</h2>

<p>If you'd like to hear more from <em>Useful at Night</em> please comment below. I will ask them
to follow this thread and reply to your questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Large Are My MySQL Tables]]></title>
    <link href="http://atodorov.org/blog/2013/02/20/how-large-are-my-mysql-tables/"/>
    <updated>2013-02-20T12:03:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/02/20/how-large-are-my-mysql-tables</id>
    <content type="html"><![CDATA[<p><img src="http://atodorov.org/images/database.jpg" alt="database" style="display:block;clear:both;"/>
Image CC-BY-SA, <a href="http://www.flickr.com/photos/theredproject/3332644561/">Michael Mandiberg</a></p>

<p>I found two good blog posts about investigating MySQL internals:
<a href="http://www.mysqlperformanceblog.com/2008/03/17/researching-your-mysql-table-sizes/">Researching your MySQL table sizes</a> and
<a href="http://www.mysqlperformanceblog.com/2008/02/04/finding-out-largest-tables-on-mysql-server/">Finding out largest tables on MySQL Server</a>.
Using the queries against my site <a href="http://www.dif.io">Difio</a> showed:</p>

<p>{% codeblock lang:sql %}
mysql> SELECT CONCAT(table_schema, '.', table_name),</p>

<pre><code>-&gt;        CONCAT(ROUND(table_rows / 1000000, 2), 'M')                                    rows,
-&gt;        CONCAT(ROUND(data_length / ( 1024 * 1024 * 1024 ), 2), 'G')                    DATA,
-&gt;        CONCAT(ROUND(index_length / ( 1024 * 1024 * 1024 ), 2), 'G')                   idx,
-&gt;        CONCAT(ROUND(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), 'G') total_size,
-&gt;        ROUND(index_length / data_length, 2)                                           idxfrac
-&gt; FROM   information_schema.TABLES
-&gt; ORDER  BY data_length + index_length DESC;
</code></pre>

<p>+----------------------------------------+-------+-------+-------+------------+---------+
| CONCAT(table_schema, '.', table_name)  | rows  | DATA  | idx   | total_size | idxfrac |
+----------------------------------------+-------+-------+-------+------------+---------+
| difio.difio_advisory                   | 0.04M | 3.17G | 0.00G | 3.17G      |    0.00 |
+----------------------------------------+-------+-------+-------+------------+---------+
{% endcodeblock %}</p>

<p>The table of interest is <code>difio_advisory</code> which had 5 <code>longtext</code> fields. Those fields were
not used for filtering or indexing the rest of the information.
They were just storage fields - a `nice' side effect of using Django's ORM.</p>

<p>I have migrated the data to Amazon S3 and stored it in JSON format there. After dropping these
fields the table was considerably smaller:</p>

<p>{% codeblock lang:sql %}
+----------------------------------------+-------+-------+-------+------------+---------+
| CONCAT(table_schema, '.', table_name)  | rows  | DATA  | idx   | total_size | idxfrac |
+----------------------------------------+-------+-------+-------+------------+---------+
| difio.difio_advisory                   | 0.01M | 0.00G | 0.00G | 0.00G      |    0.90 |
+----------------------------------------+-------+-------+-------+------------+---------+
{% endcodeblock %}</p>

<p>For those interested I'm using <a href="https://github.com/e-loue/django-storages">django-storages</a>
on the back-end to save the data in S3 when generated. On the front-end I'm using
<a href="http://dojotoolkit.com">dojo.xhrGet</a> to load the information directly into the browser.</p>

<p>I'd love to hear your feedback in the comments section below. Let me know
what you found for your own databases. Were there any issues? How did you deal
with them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Click Tracking without MailChimp]]></title>
    <link href="http://atodorov.org/blog/2013/01/31/click-tracking-without-mailchimp/"/>
    <updated>2013-01-31T21:23:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/01/31/click-tracking-without-mailchimp</id>
    <content type="html"><![CDATA[<p>Here is a standard notification message that users at <a href="http://www.dif.io">Difio</a>
receive. It is plain text, no HTML crap, short and URLs are clean and
descriptive. As the project lead developer I wanted to track when people click on
these links and visit the website but also keep existing functionality.</p>

<p><img src="/images/email_w_links.png" title="Email with links" alt="&quot;Email with links&quot;" /></p>

<h2>Standard approach</h2>

<p>A pretty common approach when sending huge volumes of email is to use an external
service, such as MailChimp. This is one of many email
marketing services which comes with a lot of features. The most important to me
was analytics and reports.</p>

<p>The downside is that MailChimp (and I guess others) use HTML formatted emails
extensively. I don't like that and I'm sure my users will not like it as well.
They are all developers. Not to mention that MailChimp is much more expensive
than <a href="http://aws.amazon.com/ses/">Amazon SES</a> which I use currently.
No MailChimp for me!</p>

<p>Another common approach, used by Feedburner by the way,
is to use shortened URLs which redirect to the original ones and measure clicks
in between. I also didn't like this for two reasons: 1) the shortened URLs look
ugly and they are not at all descriptive and 2) I need to generate them automatically
and maintain all the mappings. Why bother ?</p>

<h2>How I did it? </h2>

<p>So I needed something which will do a redirect to a predefined URL, measure how many
redirects were there (essentially clicks on the link) and look nice. The solution is
very simple, if you have not recognized it by now from the picture above.</p>

<p>I opted for a custom redirect engine, which will add tracking information to the
destination URL so I can track it in Google Analytics.</p>

<p>Previous URLs were of the form <code>http://www.dif.io/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code>.
I've added the humble <code>/daily/?</code> prefix before the URL path so it becomes
<code>http://www.dif.io/daily/?/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code></p>

<p>Now <code>/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code> becomes a query string parameter which
the <code>/daily/index.html</code> page uses as its destination. Before doing the redirect
a script adds tracking parameters so that Google Analytics will properly
report this visit. Here is the code:</p>

<p>{% codeblock lang:html %}
<html>
<head></p>

<script type="text/javascript">
var uri = window.location.toString();
var question = uri.indexOf("?");
var param = uri.substring(question + 1, uri.length)
if (question > 0) {
    window.location.href = param + '?utm_source=email&utm_medium=email&utm_campaign=Daily_Notification';
}
</script>


<p></head>
<body></body>
</html>
{% endcodeblock %}</p>

<p>Previously Google Analytics was reporting these visits as direct hits while now it lists them under
campaigns like so:</p>

<p><img src="/images/analytics_difio_campaigns.png" title="Difio Analytics" alt="&quot;Difio Analytics&quot;" /></p>

<p>Because all visitors of <a href="http://www.dif.io">Difio</a> use JavaScript enabled browsers
I combined this approach with another one, to
<a href="/blog/2013/01/28/remove-query-string-with-javascript-and-html5/">remove query string with JavaScript</a>
and present clean URLs to the visitor.</p>

<h2>Why JavaScript?</h2>

<p>You may be asking why the hell I am using JavaScript and not Apache's wonderful mod_rewrite module?
This is because the destination URLs are hosted in <a href="http://aws.amazon.com/s3/">Amazon S3</a> and I'm
planning to integrate with <a href="http://aws.amazon.com/cloudfront/">Amazon CloudFront</a>. Both of them
don't support .htaccess rules nor anything else similar to mod_rewrite.</p>

<p>As always I'd love to hear your thoughts and feedback. Please use the comment form below.</p>
]]></content>
  </entry>
  
</feed>
