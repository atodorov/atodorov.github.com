<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: QA | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/qa/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2015-11-23T16:15:43+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bad Stub Design in DNF, Pt.2 ]]></title>
    <link href="http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf/"/>
    <updated>2015-11-23T15:55:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf</id>
    <content type="html"><![CDATA[<p>Do you remember my example of a
<a href="/blog/2015/09/25/unit-testing-bad-stub-design-in-dnf/">bad stub design in DNF</a> ?
At that time I didn't have a good example of why this is a bad design and what are the
consequences of it. Today I have!</p>

<p>From my comment on
<a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/118">PR #118</a>
<blockquote><p>Note: the benefit of this patch are quite subtle.<br/>I've played around with creating a few more tests and the benefit I see affect<br/>only a few lines of code.</p></p><p><p>For #114 there doesn't seem to be any need to test _get_query directly,<br/>although we call<br/>```</p></p><p><pre><code>   q = self.base.sack.query()<br/>   q = q.available()<br/></code></pre></p><p><p>```</p></p><p><p>which will benefit from this PR b/c we're stubbing out the entire Sack object.<br/>I will work on a test later today/tomorrow to see how it looks.</p></p><p><p>OTOH for #113 where we modify _get_query the test can look something like this:</p></p><p><p>```</p></p><p><pre><code>def test_get_query_with_local_rpm(self):<br/>    try:<br/>        (fs, rpm_path) = tempfile.mkstemp('foobar-99.99-1.x86_64.rpm')<br/>        # b/c self.cmd.cli.base is a mock object add_remote_rpm<br/>        # will not update the available packages while testing.<br/>        # it is expected to hit an exception<br/>        with self.assertRaises(dnf.exceptions.PackageNotFoundError):<br/>            self.cmd._get_query(rpm_path)<br/>        self.cmd.cli.base.add_remote_rpm.assert_called_with(rpm_path)<br/>    finally:<br/>        os.remove(rpm_path)<br/></code></pre></p><p><p>```</p></p><p><p>Note the comment above the with block. If we leave out <code>_get_query</code> as before<br/>(a simple stub function) we're not going to be able to use <code>assert_called_with</code><br/>later.</p></blockquote></p>

<p>Now a more practical example. See
<a href="https://github.com/rpm-software-management/dnf-plugins-core/commit/fe130669ffc4c1d6eba8f10cda35ab4d803d5a3d">commit fe13066</a>
- in case the package is not found we log the error. In case configuration is
<code>strict=True</code> then the plugin will raise another exception. With the initial version
of the stubs this change in behavior is silently ignored. If there was an error
in the newly introduced lines it would go straight into production because the
existing tests passed.</p>

<p>What happens is that <code>test_get_packages()</code> calls <code>_get_packages(['notfound'])</code>,
which is not the real code but a test stub and returns an empty list in this case.
The empty list is expected from the test and it will not fail!</p>

<p>With my new stub design the test will execute the actual <code>_get_packages()</code>
method from <code>download.py</code> and choke on the exception. The test itself needs
to be modified, which is done in
<a href="https://github.com/atodorov/dnf-plugins-core/commit/2c2b34237c99cbf32e23bde43027d22873f4e8b7">commit 2c2b34</a>
and no further errors were found.</p>

<p>So let me summarize:
<strong>
When using mocks, stubs and fake objects we should be replacing external
dependencies of the software under test, not internal methods from the SUT!
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Running DNF Plugins from git]]></title>
    <link href="http://atodorov.org/blog/2015/11/23/tip-running-dnf-plugins-from-git/"/>
    <updated>2015-11-23T15:50:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/23/tip-running-dnf-plugins-from-git</id>
    <content type="html"><![CDATA[<p>This is mostly for self reference because it is not currently documented
in the code. To use dnf plugins from a local git checkout modify your
<code>/etc/dnf/dnf.conf</code> and add the following line under the <code>[main]</code> section:</p>

<pre><code>pluginpath=/path/to/dnf-plugins-core/plugins
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revamping Anaconda's Dogtail Tests]]></title>
    <link href="http://atodorov.org/blog/2015/11/20/revamping-anaconda-dogtail-tests/"/>
    <updated>2015-11-20T15:34:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/20/revamping-anaconda-dogtail-tests</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2015/11/13/running-anaconda-from-git/">previous post</a> I briefly talked
about running anaconda from a git checkout. My goal was to rewrite <code>tests/gui/</code> so
that they don't use a LiveCD and virtual machines anymore. I'm pleased to announce
that this is already done (still not merged), see
<a href="https://github.com/rhinstaller/anaconda/pull/457">PR#457</a>.</p>

<p>The majority of the changes are just shuffling bits around and deleting
unused code. The existing UI tests were mostly working and only needed minor
changes. There are two things which didn't work and are temporarily disabled:</p>

<ul>
<li>Clicking the Help button results in
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1282432">rhbz#1282432</a>,
which in turn may be hiding another bug behind it;</li>
<li>Looping over the available languages resulted in AT-SPI NonImplementedError
which I'm going to debug next.</li>
</ul>


<p>To play around with this make sure you have accessibility enabled and:</p>

<pre><code># cd anaconda/
# export top_srcdir=`pwd`
# setenforce 0
# cd tests/gui/
# ./run_gui_tests.sh
</code></pre>

<p><strong>Note:</strong> you also need Dogtail for Python3 which isn't officially available
yet. I'm building from
<a href="https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm">https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm</a></p>

<p>My future plans are to figure out how to re-enable what is temporarily
disabled, update <code>run_gui_tests.sh</code> to properly start gnome-session and
enable accessibility, do a better job cleaning up after a failure,
enable coverage and hook everything into <code>make ci</code>.</p>

<p>Happy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Anaconda from git]]></title>
    <link href="http://atodorov.org/blog/2015/11/13/running-anaconda-from-git/"/>
    <updated>2015-11-13T10:48:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/13/running-anaconda-from-git</id>
    <content type="html"><![CDATA[<p>It is now possible to execute anaconda directly from a git checkout.</p>

<p><strong>Disclaimer:</strong> this is only for testing purposes, you are not supposed to
execute anaconda from git and install a running system! My intention is
to use this feature and rewrite the Dogtail tests inside <code>tests/gui/</code> which
rely on having a LiveCD.iso and running VMs to execute. For me this has proven
very slow and difficult to debug problems in the past hence the change.</p>

<p><em>Note:</em> you will need to have an active DISPLAY in your environment and
also set SELinux to permissive, see
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1276376">rhbz#1276376</a>.</p>

<p>Please see <a href="https://github.com/rhinstaller/anaconda/pull/438">PR 438</a> for
more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Krasi Tsonev Broke Planet.SofiaValley.com]]></title>
    <link href="http://atodorov.org/blog/2015/11/13/how-krasi-tsonev-broke-planet.sofiavalley.com/"/>
    <updated>2015-11-13T10:09:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/11/13/how-krasi-tsonev-broke-planet.sofiavalley.com</id>
    <content type="html"><![CDATA[<p>Yesterday I've added <a href="http://krasimirtsonev.com/blog/">Krasimir Tsonev's blog</a> to
<a href="http://planet.sofiavalley.com">http://planet.sofiavalley.com</a> and the planet broke. Suddenly it started showing
only Krasi's articles and all of them with the same date. The problem was the RSS
feed didn't have any timestamps. The fix is trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- rss.xml.orig    2015-11-13 10:12:35.348625718 +0200</span>
</span><span class='line'><span class="gi">+++ rss.xml 2015-11-13 10:12:45.157932304 +0200</span>
</span><span class='line'><span class="gu">@@ -9,120 +9,160 @@&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                         &amp;lt;title&amp;gt;&amp;lt;![CDATA[A modern React starter pack based on webpack]]&amp;gt;&amp;lt;/title&amp;gt;
</span><span class='line'>                         &amp;lt;link&amp;gt;http://krasimirtsonev.com/blog/article/a-modern-react-starter-pack-based-on-webpack&amp;lt;/link&amp;gt;
</span><span class='line'>                         &amp;lt;description&amp;gt;&amp;lt;![CDATA[&amp;lt;p&amp;gt;&amp;lt;i&amp;gt;Checkout React webpack starter in &amp;lt;a href=\&quot;https://github.com/krasimir/react-web&amp;lt;br /&amp;gt;&amp;lt;p&amp;gt;You know how crazy is the JavaScript world nowadays. There are new frameworks, libraries and tools coming every day. Frequently I’m exploring some of these goodies. I got a week long holiday. I promised to myself that I’ll not code, read or watch about code. Well, it’s stronger than me. &amp;lt;a href=\&quot;https://github.com/krasimir/react-webpack-starter\&quot;&amp;gt;React werbpack starter&amp;lt;/a&amp;gt; is the result of my no-programming week.&amp;lt;/p&amp;gt;]]&amp;gt;&amp;lt;/description&amp;gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;pre&gt;&lt;code&gt;                     &amp;lt;pubDate&amp;gt;Thu, 01 Oct 2015 00:00:00 +0300&amp;lt;/pubDate&amp;gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;pre&gt;&lt;code&gt;                     &amp;lt;guid&amp;gt;http://krasimirtsonev.com/blog/article/a-modern-react-starter-pack-based-on-webpack&amp;lt;/guid&amp;gt;
</span><span class='line'>                 &amp;lt;/item&amp;gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>Thanks to Krasi for fixing this quickly and happy reading!</p>
]]></content>
  </entry>
  
</feed>
