<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>atodorov.org</title><link href="http://atodorov.org/" rel="alternate"></link><link href="http://atodorov.org/blog/categories/qa/atom.xml" rel="self"></link><id>http://atodorov.org/</id><updated>2016-04-16T10:34:00+03:00</updated><entry><title>How To Hire Software Testers, Pt. 2</title><link href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/" rel="alternate"></link><updated>2016-04-16T10:34:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-04-16:blog/2016/04/16/how-to-hire-software-testers-pt-2/</id><summary type="html">&lt;p&gt;In my
&lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;previous post&lt;/a&gt; I have
described the process I follow when interviewing candidates for a QA position.
The first question is designed to expose the applicant's way of thinking.
My second question is designed to examine their technical understanding
and to a lesser extent their way of thinking.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sudoku" src="/images/sudoku.png" title="Sudoku" /&gt;&lt;/p&gt;
&lt;h2&gt;How do You Test a Sudoku Solving Function&lt;/h2&gt;
&lt;p&gt;You have implementation of a sudoku solver function with the following pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;func Sudoku(Array[2]) {
    ...
    return Array[2]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The function solves a sudoku puzzle;&lt;/li&gt;
&lt;li&gt;Input parameter is a two-dimensional array with the known numbers (from 1 to 9) in the Sudoku grid;&lt;/li&gt;
&lt;li&gt;The output is a two-dimensional array with the numbers from the solved puzzle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have 10 minutes to write down a list of all test cases you can think of!&lt;/p&gt;
&lt;h2&gt;Behind The Scenes&lt;/h2&gt;
&lt;p&gt;One set of possible tests is to examine the input and figure out if the
function has been passed valid data.
In the real-world programs interact with each other, they are not alone.
Sometimes it happens that a valid output from one program isn't a
valid input for the next one. Also we have malicious users who will try to
break the program.&lt;/p&gt;
&lt;p&gt;If a person manages to test for this case then
I know they have a bit more clue about how software is used in the real-world.
This also touches a bit on white-box testing, where the tester has full info
about the software under test. In this example the implementation is
intentionally left blank.&lt;/p&gt;
&lt;p&gt;OTOH I've seen answers where the applicant blindly assumes that the input
is 1-9, because the spec says so, and excludes the entire input testing from
their scope. I classify this answer as immediate failure, because a tester should
never assume anything and test to verify their initial conditions are indeed
as stated in the documentation.&lt;/p&gt;
&lt;p&gt;Another set of possible tests is to verify the correct work of the function.
That is to verify the proposed Sudoku solution is indeed following the rules
of the game. This is what we usually refer to black-box testing. The tester
doesn't know how the SUT works internally, they only know the input data and
the expected output. &lt;/p&gt;
&lt;p&gt;If a person fails to describe at least one such test case
they have essentially failed the question. What is the point of a SUT which
doesn't crash (suppose that all previous tests passed) but doesn't
produce the desired correct result ?&lt;/p&gt;
&lt;p&gt;Then there are test cases related to the environment in which this Sudoku
solver function operates. This is where I examine the creativity of the person,
their familiarity with other platforms and to some extent their thinking out of
the box. Is the Sudoku solver iterative or recursive ? What if we're on an
embedded system and recursion is too heavy for it ? How much power does the
function require, how fast it works, etc.&lt;/p&gt;
&lt;p&gt;A person that provides at least one answer in this category has bonus points
over the others who didn't. IMO it is very important for a tester to have
experience with various platforms and environments because this helps them
see edge cases which others will not be able to see. I also consider a strong
plus if the person shows they can operate outside their comfort zone.&lt;/p&gt;
&lt;p&gt;If we have time I may ask the applicant to write the tests using a programming
language they know. This is to verify their coding and automation skills.&lt;/p&gt;
&lt;p&gt;OTOH having the tests as code will show me how much the person knows about testing
vs. coding. I've seen solutions where people write a for loop, looping over all
numbers from 1 to 100 and testing if they are a valid input to &lt;code&gt;Sudoku()&lt;/code&gt;.
Obviously this is pointless and they failed the test.&lt;/p&gt;
&lt;p&gt;Last but not least, the question asks for testing a particular Sudoku solver
implementation. I expect the answers to be designed around the given function.
However I've seen answers designed around a
&lt;a href="http://sudoku-solutions.com/"&gt;Sudoku solver website&lt;/a&gt; or described as
intermediate states in an interactive Sudoku game (e.g. wrong answers shown in red).
I consider these invalid because the question is to test a particular
given function, not anything Sudoku related. If you do this in real-life that
means you are not testing the SUT directly but maybe touching it indirectly
(at best). This is not what a QA job is about.&lt;/p&gt;
&lt;h2&gt;What Are The Correct Answers&lt;/h2&gt;
&lt;p&gt;Here are some of the possible tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test with single dimensional input array - we expect an error;&lt;/li&gt;
&lt;li&gt;Test with 3 dimensional input array - we expect an error;&lt;/li&gt;
&lt;li&gt;Then proceed testing with 2 dimensional array;&lt;/li&gt;
&lt;li&gt;Test with number less than 1 (usually 0) - expect error;&lt;/li&gt;
&lt;li&gt;Test with number greater than 9 (usually 10) - expect error;&lt;/li&gt;
&lt;li&gt;Test how the function handles non-numerical data - chars &amp;amp; symbols
(essentially the same thing for our function);&lt;/li&gt;
&lt;li&gt;Test with strings which actually represent a number, e.g. "1";&lt;/li&gt;
&lt;li&gt;Test with floating point numbers, e.g. 1.0, 2.0, 3.0 - may or may not
work depending on how the code is written;&lt;/li&gt;
&lt;li&gt;If floating point numbers are accepted, then test with a different locale.
Is "1.0" the same as "1,0";&lt;/li&gt;
&lt;li&gt;Test with &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt; (whatever the language supports) -
this should be a valid value for unknown numbers and not cause a crash;&lt;/li&gt;
&lt;li&gt;Test if the function validates that the provided input follows the
Sudoku rules by passing it duplicate numbers in one row, column or
square. It should produce an error;&lt;/li&gt;
&lt;li&gt;Test if the input data contains the minimum number of givens, 17
for a general Sudoku, so that a solution can be found. Otherwise the function
may go into an
&lt;a href="http://atodorov.org/blog/2015/01/05/endless-loop-bug-candy-crush-saga-level-80/"&gt;endless loop&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Verify the proposed solution conforms to Sudoku rules;&lt;/li&gt;
&lt;li&gt;Test with a fully solved puzzle as input - output should be exactly the same;&lt;/li&gt;
&lt;li&gt;If on mobile, measure battery consumption for 1 minute of operation. I've
seen a game which uses 1% battery power for 1 minute of game play;&lt;/li&gt;
&lt;li&gt;Test for buffer overflows;&lt;/li&gt;
&lt;li&gt;Test for speed of execution (performance);&lt;/li&gt;
&lt;li&gt;Test performance on single and multiple (core) CPUs - depending on the
language and how the function is written this may produce a difference or not;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm sure I'm missing something so please use the comments below to tell me your suggestions.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>How To Hire Software Testers, Pt. 1</title><link href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/" rel="alternate"></link><updated>2016-04-12T12:34:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-04-12:blog/2016/04/12/how-to-hire-software-testers-pt-1/</id><summary type="html">&lt;p&gt;Many people have asked me how do I make sure a person who applies for a
QA/software tester position is a good fit ? On the opposite side people
have asked online how do they give correct answers on test related questions
at job interviews. I have two general questions to help me decide if a
person knows about testing and if they are a good fit for the team or not.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Login form" src="/images/login_form_wireframe.jpg" title="Login form" /&gt;&lt;/p&gt;
&lt;h2&gt;How do You Test a Login Form&lt;/h2&gt;
&lt;p&gt;You are given the login form above and the following constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in is possible with username and password or through the social networks;&lt;/li&gt;
&lt;li&gt;After successful registration an email with the following content is sent to the user:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Helo and welcome to atodorov.org! Click _here_ to confirm your emeil address.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You have 10 minutes to write down a list of all test cases you can think of!&lt;/p&gt;
&lt;h2&gt;Behind The Scenes&lt;/h2&gt;
&lt;p&gt;The question looks trivial but isn't as easy to answer as you may think.
If you haven't spent the last 20 years of your life in a cave, chances are
that you will give technically correct answers but this is not the only
thing I'm looking for.&lt;/p&gt;
&lt;p&gt;The question is designed to simulate a real-world scenario, where the QA
person is given a piece of software, or requirements document and tasked with
creating a test plan for it. The question is intentionally vague because that's
how real-world works, most often testers don't have all the requirements and
specifications available beforehand.&lt;/p&gt;
&lt;p&gt;The time constrain, especially when the interview is performed in person,
simulates work under pressure - get the job done as soon as possible.&lt;/p&gt;
&lt;p&gt;While I review the answers I'm trying to figure out how does the person think,
not how much about technology they know. I'm trying to figure out what are their
strong areas and where they need to improve. IMO being able to think as a tester
and having attention to details, being able to easily spot corner cases and
look at the problem from different angles is much more important than
technical knowledge in a particular domain.&lt;/p&gt;
&lt;p&gt;As long as a person is suited to think like a tester they can learn to
apply their critical thinking to any software under test and use various
testing techniques to discover or safeguard against problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A person that answers quickly and intuitively is better than a person who
takes a long time to figure out what to test. I can see they are active
thinkers and can work without micro-management and hand-holding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person that goes on and on
describing different test cases is better than one who limits themselves to
the most obvious cases. I can see they have an exploratory passion, which
is the key to finding many bugs and making the software better;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person that goes to explore the system in breadth is better than one who
keeps banging on the same test case with more and more variations. I can see
they are noticing the various aspects of the software (e.g. social login,
email confirmation, etc) but also to some extent, not investing all of their
resources (the remaining time to answer) into a single direction. Also in
real-world testing, testing the crap out of something is useful up to a point.
Afterwards we don't really see any significant value from additional testing
efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person that is quick to figure out one or two corner cases is better
than a person who can't. This tells me they are thinking about what goes
on under the hood and trying to predict unpredictable behavior - for example
what happens if you try to register with already registered username or email?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A person that asks questions in order to minimize uncertainty and vagueness
is better than the one who doesn't. In real-world if the tester doesn't know
something they have to ask. Quite often even developers and product managers
don't know the answer. Then how are we developing software if we don't know
what it is supposed to do ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If given more time (writing interview), a person that organizes their answers
into steps (1, 2, 3) is a bit better than one who simply throws at you random
answers without context. Similar thought applies to people who write down their
test pre-conditions before writing down scenarios. From this I can see that
the person is well organized and will have no trouble writing detailed test cases,
with pre-conditions, steps to execute and expected results. This is what QAs do.
Also we have the, sometimes tedious, task of organizing all test results into
a test case management system (aka test book) for further reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The question intentionally includes some mistakes. In this example 2 spelling
errors in the email text. Whoever manages to spot them and tell me about it is
better than others who don't spot the errors or assume that's how it is. QAs job
is to always question everything and never blindly trust that the state of the
system is the way it is. Also simple errors like typos can be
&lt;a href="http://atodorov.org/blog/2016/01/15/tesla-needs-more-qa/"&gt;embarrassing&lt;/a&gt; or generate
unnecessary support calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bravo if you tested not only the outgoing email but also social login. This
shows attention to details, not to mention social is 1/3rd of our example system.
It also shows that QA's job doesn't end with testing
the core, perceived functionality of the system. QA tests everything,
even interactions with external systems if that is necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What Are The Correct Answers&lt;/h2&gt;
&lt;p&gt;I will document some of the possible answers as I recall them from memory.
I will update the list with other interesting answers given by students who
applied to my
&lt;a href="https://github.com/HackBulgaria/QA-and-Automation-101"&gt;QA and Automation 101&lt;/a&gt;
course, answering this very same question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test if users can register using valid username, email and password;&lt;/li&gt;
&lt;li&gt;Test if SUT gives an error message when email or password (or username)
format doesn't follow a particular format (e.g. no special symbols);&lt;/li&gt;
&lt;li&gt;After registration, test that the user can login successfully;&lt;/li&gt;
&lt;li&gt;Depending on requirements test if the user can login before they have
confirmed their email address;&lt;/li&gt;
&lt;li&gt;Test that upon registration a confirmation email is actually sent;&lt;/li&gt;
&lt;li&gt;Spell-check the email text;&lt;/li&gt;
&lt;li&gt;Test if the &lt;em&gt;click here&lt;/em&gt; piece of text is a hyperlink;&lt;/li&gt;
&lt;li&gt;Verify that when clicked, the hyperlink successfully confirmed email/activates the account
(depending on what confirmed/activated means per requirements);&lt;/li&gt;
&lt;li&gt;Test what happens if the link is clicked a second time;&lt;/li&gt;
&lt;li&gt;Test what happens if the link is clicked after 24 or 48 hrs;&lt;/li&gt;
&lt;li&gt;Test that the social network icons, actually link to the desired SN and
not someplace else;&lt;/li&gt;
&lt;li&gt;Test if new user accounts can be created via all specified social networks;&lt;/li&gt;
&lt;li&gt;Test what happens if there is an existing user, who registered with a password
and they (or somebody else) tries to register via social with an account that has
the same email address, aka account hijacking;&lt;/li&gt;
&lt;li&gt;Same as previous test but try to register a new user, using email address that
was previously used with social login;&lt;/li&gt;
&lt;li&gt;Test what happens if users forget their password - intentionally we don't have
the '[] Forgot my password' checkbox. This is both usability feature and missing
requirements;&lt;/li&gt;
&lt;li&gt;Test for simple SQL injections like
&lt;a href="http://php.net/manual/en/images/fa7c5b5f326e3c4a6cc9db19e7edbaf0-xkcd-bobby-tables.png"&gt;Bobby Tables&lt;/a&gt;.
&lt;em&gt;btw I was given this image as an answer which scored high on the geek-o-meter&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Test for XSS - &lt;a href="https://twitter.com/dergeruhn/status/476764918763749376"&gt;Tweetdeck didn't&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Test if non-activated/non-confirmed usernames expire after some time and can be used again;&lt;/li&gt;
&lt;li&gt;Test of fields tab order - something I haven't done in 15 or more years
but still valid and I've seen sites getting it wrong quite often;&lt;/li&gt;
&lt;li&gt;When trying to login test what happens when username/password is wrong or empty;&lt;/li&gt;
&lt;li&gt;Test if email is required for login - this isn't clear from the requirements
so it is a valid answer. Better answer is to clarify that;&lt;/li&gt;
&lt;li&gt;Test if username/email or password is case sensitive. Valid test and indeed I
recently saw a problem where upon registration users entered their emails using
some capital letters but they were lower-cased before saving to the DB. Later this
broke a piece of code which forgot to apply the lowercase on the input data. The code
was handling account reactivation;&lt;/li&gt;
&lt;li&gt;Test if the password field shows the actual password or not. I haven't seen this
in person but I'm certain there is some site which maybe used CSS and nice images
instead of the default ugly password field and that didn't work on all browsers;&lt;/li&gt;
&lt;li&gt;Test if you can copy&amp;amp;paste the masked password, probably trying to steal somebody
else's password. Last time I saw this was on early Windows 95 with the modem connection
dialog. Very briefly it allowed you to copy the text from the field and paste it into
Notepad to reveal the actual password;&lt;/li&gt;
&lt;li&gt;If we're on mobile (intentionally not specified) test for buffer overflows;
Actually test that everywhere and see what happens;&lt;/li&gt;
&lt;li&gt;Test if the social network buttons use the same action verb. In the example
we have &lt;em&gt;Log in&lt;/em&gt;, &lt;em&gt;Connect&lt;/em&gt; and &lt;em&gt;Sign in&lt;/em&gt;. This is sort of usability testing
and helping have a unified look and feel of the product;&lt;/li&gt;
&lt;li&gt;Test which of the &lt;em&gt;Log in&lt;/em&gt; and &lt;em&gt;Sign up&lt;/em&gt; tabs is active at the moment.
The example is intentionally left to look like a wireframe but it is important
for the user to easily tell where they are. Otherwise they'll call support or
even worse, simply give up on us;&lt;/li&gt;
&lt;li&gt;Test if all static files (images) will load if they are deployed onto CDN.
Not surprisingly I've seen &lt;a href="https://github.com/Nitrate/Nitrate/pull/80"&gt;this bug&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;In case we have a "[] Remember me" checkbox, test if it actually remembers
the user credentials. Yesterday I saw this same functionality not working on
a specialized desktop app in the corner case where you supply a different
connection endpoint (server) instead of the ones already provided. The user
defined value is accepted but not saved automatically;&lt;/li&gt;
&lt;li&gt;Test if the "Remember me" functionality actually saves your last credentials
or only the first ones you provided. There is a similar bug in 
&lt;a href="https://play.google.com/store/apps/details?id=com.xevica.grajdanite"&gt;Grajdanite&lt;/a&gt;,
where once you enter a wrong email, it is remembered and every time the form is
pre-filled with the previous value (which is wrong). I'm yet to report it though;&lt;/li&gt;
&lt;li&gt;Cross-browser testing - hmm, login and registration should work on all browsers
you say. It's not browser dependent, is it? Well yeah, login isn't browser dependent
unless we did something stupid like pre-handling the form submit via non-cross-platform
JavaScript or even
&lt;a href="https://github.com/gilsondev/pelican-clean-blog/pull/6"&gt;accidentally doing so&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Test with Unicode characters, especially non Latin ones. It's been many years
since we had Unicode but quite a few apps haven't learned how to deal with Unicode
text properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm certain there are more answers and I will update the list as I figure them out.
You can always post in the comments and tell me something I've missed.&lt;/p&gt;
&lt;h2&gt;How to Pass The Job Interview&lt;/h2&gt;
&lt;p&gt;This is a question I often see on &lt;a href="https://www.quora.com/profile/Alexander-Todorov"&gt;Quora&lt;/a&gt;.
&lt;em&gt;I have a job interview tomorrow. How do I test a login form (or whatever) ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If this section is what you're after I suspect you are a junior or wanna-be
software tester. As you've seen the interviewer isn't really interested in what you know already,
at least not as much. We're interested in getting to know how you
think in the course of 30-60 minutes.&lt;/p&gt;
&lt;p&gt;If you ever find yourself being asked a similar question just start thinking and
answering and don't stop. Vocalize your thoughts, even if you don't know what will
happen when testing a certain condition. Then keep going on and on. Look at the problem
from all angles, explain how you'd test various aspects and features of the SUT.
Then move on to the next bit. Always think about what you may have forgotten and
revisit your answers - this is what real QAs do - learn from mistakes.
Ask questions, don't ever assume anything. If something is unclear ask to be
clarified. For example I've seen a person who doesn't use social networks and
didn't know how social login/registration worked. They did good by asking me to
describe how that works.&lt;/p&gt;
&lt;p&gt;Your goal is to make the interviewer ask you to stop answering. Then tell them
a few more answers.&lt;/p&gt;
&lt;p&gt;However beware of cheating. You may cheat a little bit by
saying you will test this and that or design scenarios you have no clue about.
Maybe you read them in my blog or elsewhere. If the interviewer knows their job
(which they should) they will instantly ask you another question to verify what
you say. Don't forget the interviewer is probably an experienced tester and validating
assumptions is what they do every day.&lt;/p&gt;
&lt;p&gt;For example, if you told me something about security testing or SQL injection
or XSS I will ask you to explain that in more details. If you forgot to mention,
one of them, say XSS but only heard about SQL injection I will ask you about the
other one. This will immediately tell me if you have a clue what you are talking
about.&lt;/p&gt;
&lt;p&gt;Feel free to send me suggestions and answers in the comments below. You can find
the second part of this post at
&lt;a href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/"&gt;How do you test a Sudoku solving function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Time Calculation bug in BlackBerry Z10</title><link href="http://atodorov.org/blog/2016/03/31/time-calculation-bug-in-blackberry-z10/" rel="alternate"></link><updated>2016-03-31T16:34:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-03-31:blog/2016/03/31/time-calculation-bug-in-blackberry-z10/</id><summary type="html">&lt;p&gt;&lt;img alt="BlackBerry Z10 bug" src="/images/bbz10_calls_bug.png" title="BlackBerry Z10 bug" /&gt;&lt;/p&gt;
&lt;p&gt;I thought BlackBerry 10 is dead but apparently they still provide updates
and introduce new bugs :). This one happened a few days ago with
Software Release 10.3.2.2474. As you can see the time calculations are totally
wrong!&lt;/p&gt;
&lt;p&gt;The current
time is 12:45, March 28th. The last call is reported as &lt;em&gt;5 minutes ago&lt;/em&gt;
but its time stamp is 3 and a half hours ago!&lt;/p&gt;
&lt;p&gt;The second call is reported as &lt;em&gt;11 minutes ago&lt;/em&gt; but in reality it is
3 days ago. I'm not sure about the time stamp but that is probably wrong
as well.&lt;/p&gt;
&lt;p&gt;The reason for this IMO is their design to have a fixed start of the epoch
for every OS release - probably the build time of the release. When the OS
is fully booted and connected to network it synchronizes with time servers
and updates the local time. This of course fails in case of no WiFi, no
cellular data or if automatic time synchronization is turned off!&lt;/p&gt;
&lt;p&gt;The result is that every object (calls, images, etc) which has a time stamp
attached to it gets an incorrect value. Maybe some of these are recalculated
back to the current time, once it is synchronized, and others probably not.
Otherwise I'd expect all calls to be reported way back in time!&lt;/p&gt;
&lt;p&gt;For more information about time related bugs checkout
&lt;a href="https://www.youtube.com/watch?v=MVI87HzfskQ"&gt;Tom Scott's Why 1/1/1970 Bricks Your iPhone&lt;/a&gt;
video and read my article
&lt;a href="http://atodorov.org/blog/2016/03/08/floating-point-precision-error-with-ruby/"&gt;Floating-point precision error with Ruby&lt;/a&gt;.&lt;/p&gt;</summary><category term="QA"></category></entry><entry><title>Beware of Double Stubs in RSpec</title><link href="http://atodorov.org/blog/2016/03/31/beware-of-double-stubs-in-rspec/" rel="alternate"></link><updated>2016-03-31T12:08:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-03-31:blog/2016/03/31/beware-of-double-stubs-in-rspec/</id><summary type="html">&lt;p&gt;I've been re-factoring some RSpec tests and encountered a method which has been
stubbed-out 2 times in a row. This of course led to problems when I tried to delete
some of the code, which I deemed unnecessary. Using
&lt;a href="http://blog.teamtreehouse.com/an-introduction-to-rspec"&gt;Treehouse's burger example&lt;/a&gt;
I've recreated my use-case. Comments are in the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;burger_spec.rb&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Burger&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:options&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@ketchup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ketchup&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# the number is passed from the tests below to make it easier to&lt;/span&gt;
    &lt;span class="c1"&gt;# monitor execution of this method.&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ketchup applied %d times&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_mayo_and_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mayo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_ketchup_on_it?&lt;/span&gt;
    &lt;span class="vi"&gt;@ketchup&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Burger&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#apply_mayo_and_ketchup&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;with ketchup and single stubs&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ketchup&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1: sets the mayo flag to true, ketchup is nil&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# this line stubs-out the apply_ketchup method&lt;/span&gt;
        &lt;span class="c1"&gt;# and @ketchup will remain nil b/c the original&lt;/span&gt;
        &lt;span class="c1"&gt;# method is not executed at all&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_mayo_and_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mayo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_ketchup_on_it?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2: sets the mayo and ketchup flags to true&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# this line stubs-out the apply_ketchup method&lt;/span&gt;
        &lt;span class="c1"&gt;# but in the end calls the non-stubbed out version as well&lt;/span&gt;
        &lt;span class="c1"&gt;# so that has_ketchup_on_it? will return true !&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_call_original&lt;/span&gt;
        &lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_mayo_and_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mayo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_ketchup_on_it?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;with ketchup and double stubs&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ketchup&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# this line creates a stub for the apply_ketchup method&lt;/span&gt;
        &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3: sets the mayo flag to true, ketchup is nil&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# this line creates a second stub for the fake apply_ketchup method&lt;/span&gt;
        &lt;span class="c1"&gt;# @ketchup will remain nil b/c the original method which sets its value&lt;/span&gt;
        &lt;span class="c1"&gt;# isn&amp;#39;t actually executed. we may as well comment out this line and&lt;/span&gt;
        &lt;span class="c1"&gt;# this will not affect the test at all&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_mayo_and_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mayo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_ketchup_on_it?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4: sets the mayo and ketchup flags to true&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# this line creates a second stub for the fake apply_ketchup method.&lt;/span&gt;
        &lt;span class="c1"&gt;# .and_call_original will traverse up the stubs and call the original&lt;/span&gt;
        &lt;span class="c1"&gt;# method. If we don&amp;#39;t want to assert that the method has been called&lt;/span&gt;
        &lt;span class="c1"&gt;# or we don&amp;#39;t care about its parameters, but only the end result&lt;/span&gt;
        &lt;span class="c1"&gt;# that system state has been changed then this line is redundant!&lt;/span&gt;
        &lt;span class="c1"&gt;# Don&amp;#39;t stub &amp;amp; call the original, just call the original method, right?&lt;/span&gt;
        &lt;span class="c1"&gt;# Commenting out this line will cause a failure due to the first stub&lt;/span&gt;
        &lt;span class="c1"&gt;# in before() above. The first stub will execute and @ketchup will remain&lt;/span&gt;
        &lt;span class="c1"&gt;# nil! To set things straight also comment out the allow() line in&lt;/span&gt;
        &lt;span class="c1"&gt;# before()!&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:apply_ketchup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_call_original&lt;/span&gt;
        &lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_mayo_and_ketchup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mayo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;burger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_ketchup_on_it?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I see a &lt;code&gt;.and_call_original&lt;/code&gt; method
after a stub I immediately delete it because in most of the cases this isn't
necessary. Why stub out something just to call it again later ? See my comments
above. Also the &lt;code&gt;expect to receive &amp;amp;&amp;amp; do action&lt;/code&gt;
sequence is a bit counter intuitive. I prefer the &lt;code&gt;do action &amp;amp; assert results&lt;/code&gt;
sequence instead.&lt;/p&gt;
&lt;p&gt;The problem here comes from the fact that RSpec has very flexible syntax for
creating stubs which makes it very easy to abuse them, especially when you
have no idea what you're doing. If you write tests with RSpec please make a
note of this and try to avoid this mistake.&lt;/p&gt;
&lt;p&gt;If you'd like to learn more about stubs see
&lt;a href="http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf/"&gt;Bad Stub Design in DNF&lt;/a&gt;.&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="Ruby"></category><category term="QA"></category></entry><entry><title>Hello World QA Challenge</title><link href="http://atodorov.org/blog/2016/03/25/hello-world-qa-challenge/" rel="alternate"></link><updated>2016-03-25T11:08:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-03-25:blog/2016/03/25/hello-world-qa-challenge/</id><summary type="html">&lt;p&gt;Recently I've been asked on Quora
"Do simple programs like hello world have any bugs" ? In particular if the
computer hardware and OS are healthy, will there be any bugs in a simple
hello-world program?&lt;/p&gt;
&lt;p&gt;I'm challenging you to tell me what
kinds of bugs have you seen which would easily apply to a very simple program!
Below are some I was able to think about.&lt;/p&gt;
&lt;h2&gt;Localization&lt;/h2&gt;
&lt;p&gt;Once we add a requirement to our system to work in environment which supports
multiple languages and input methods, not supporting them immediately becomes a bug,
although the SUT still functions correctly. For example, if using a French locale
I would expect the program to print "Bonjour le monde". Same for German, Spanish,
Italian, etc. It even becomes trickier with languages using non-latin script like
Bulgarian and Japanese for example. Depending on your environment you may not be
able to display non-latin script at all.
See also
&lt;a href="http://atodorov.org/blog/2014/03/17/how-do-you-test-thai-scalable-fonts/"&gt;How do you test fonts&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Packaging and distribution&lt;/h2&gt;
&lt;p&gt;This is an entire class of problems not directly related to the SUT but to the way
it is packaged and distributed to its target customers. For a Linux system it makes
sense to have an RPM or DEB packages. Dependency resolution and proper installation
and upgrade for these packages need to be tested and ensured.&lt;/p&gt;
&lt;p&gt;A famous example of a high impact packaging bug is
&lt;a href="https://code.djangoproject.com/ticket/19858"&gt;Django #19858&lt;/a&gt;. During an urgent
security release it was discovered that the source package was shipping byte-compiled
&lt;code&gt;*.pyc&lt;/code&gt; files made with a newer version of Python (2.7). Even worse there were
byte-compiled files without the corresponding source files.&lt;/p&gt;
&lt;p&gt;Being a security release everyone
rushed to upgrade immediately. Everyone who had Python 2.6 saw their website
produce &lt;code&gt;ImportError: Bad magic number&lt;/code&gt; and crash immediately after the upgrade!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; byte-compiled files between different versions of Python are
incompatible!&lt;/p&gt;
&lt;p&gt;Another one is
&lt;a href="https://github.com/tschellenbach/Django-facebook/issues/262"&gt;django-facebook #262&lt;/a&gt;
in which version 4.3.0 suddenly grew from 200KiB to 23MiB in size, shipping a ton
of extra JPEG images.&lt;/p&gt;
&lt;h2&gt;Portability&lt;/h2&gt;
&lt;p&gt;There are so many different portability issues which may affect an otherwise
working program. You only need to add a requirement to build/execute on another
OS or CPU architecture - for example aarch64 (64-bit ARM).
This resulted in hundreds of bugs
reported by Dennis Gilmore, for example &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=926850"&gt;RHBZ#926850&lt;/a&gt; which is also related to
packaging and the build chain.&lt;/p&gt;
&lt;p&gt;Then we have possibility for big endian vs. little endian issues especially if
we run on Power 8 CPU which supports both modes.&lt;/p&gt;
&lt;p&gt;Another one could be 16bit vs. 32bit vs 64bit memory addressing. For example
on platforms like IBM mainframe (s390) they reserved the most significant bit
to easily support applications expecting 24-bit addressing, as well as to
sidestep a problem with extending two instructions to handle 32-bit unsigned
addresses, which made the address space 31-bits!&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;Not all processors are created equal! Both Intel (x86_64), ARM and PowerPC
have different instruction sets and numbers of registers. Depending on what
sort of calculations you perform one of the architectures may be more suitable
than the other.&lt;/p&gt;
&lt;h2&gt;Typos&lt;/h2&gt;
&lt;p&gt;It not uncommon to mistype even common words like
"hello" and "world" and I've rarely seen QAs and developers running spell
checkers on all of their source strings. We do this for documentation and
occasionally for man pages but for the actual program output or widget labels -
almost never.&lt;/p&gt;
&lt;h2&gt;Challenge&lt;/h2&gt;
&lt;p&gt;I find the original question very interesting and a good metal exercise for
IT professionals. I will be going through Bugzilla
to find examples which illustrate the above points and even more possible problems
with a program as simple as hello world and will update this blog accordingly!&lt;/p&gt;
&lt;p&gt;Tell me what kinds of bugs have you seen which would easily apply to a very simple program!
It's best if you can post links to public bugs and/or detailed explanation.
Thanks!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>QA Switch from Waterfall to BDD</title><link href="http://atodorov.org/blog/2016/03/11/qa-switch-from-waterfall-to-bdd/" rel="alternate"></link><updated>2016-03-11T11:08:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-03-11:blog/2016/03/11/qa-switch-from-waterfall-to-bdd/</id><summary type="html">&lt;p&gt;For the last two weeks I've been experimenting with Behavior-Driven Development
(BDD) in order to find out what it takes for the Quality Assurance department
to switch from using the Waterfall method to BDD. Here are my initial
observations and thoughts for further investigation.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Developing an entire Linux distribution (or any large product for that matter)
is a very complicated task. Traditionally QA has been involved in writing the
test plans for the proposed technology updates, then execute and maintain them
during the entire product life-cycle reporting and verifying tons of bugs
along the way. From the point of view of the entire product the process is
very close to the traditional waterfall development method. I will be using
the term waterfall to describe the old way of doing things and BDD the new one.
In particular I'm referring to the process of analyzing the proposed feature set
for the next major version of the product (e.g. Fedora) and designing the
necessary test plans documents and test cases.&lt;/p&gt;
&lt;p&gt;To get an idea about where does QA join the process see the
&lt;a href="https://fedoraproject.org/wiki/Releases/24/ChangeSet"&gt;Fedora 24 Change set&lt;/a&gt;.
When the planning phase starts we are given these "feature pages" from which
QA needs to distill test plans and test cases. The challenges with the
waterfall model are that QA joins the planning process rather late and there
is not enough time to iron out all the necessary details. Add to this the fact
that feature pages are often incomplete and vaguely described and sometimes
looking for the right answers is the hardest part of the job.&lt;/p&gt;
&lt;h2&gt;QA and BDD&lt;/h2&gt;
&lt;p&gt;Right now I'm focusing on using the
&lt;a href="https://github.com/cucumber/cucumber/wiki/Gherkin"&gt;Gherkin&lt;/a&gt;
&lt;em&gt;Given-When-Then&lt;/em&gt; language to
prepare feature descriptions and test scenarios from the above feature pages.
You can follow my work on &lt;a href="https://github.com/atodorov/bdd/"&gt;GitHub&lt;/a&gt; and
I will be using them as examples below. Also see examples from my
co-workers &lt;a href="https://github.com/tlamer/bdd"&gt;1&lt;/a&gt;,
&lt;a href="https://github.com/hroncok/BDD"&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this experiment I want to verify how hard/easy it is for QA to write
test cases using BDD style documents and how is that different from the
traditional method. Since I don't have any experience (nor bias) towards BDD
I'm documenting my notes and items of interest.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;It took me about 2 hours to get started. The essence of Gherkin is the
&lt;em&gt;Action &amp;amp; Response&lt;/em&gt; mechanism. &lt;strong&gt;Given&lt;/strong&gt; the system under test (SUT) is in a
known state and &lt;strong&gt;when&lt;/strong&gt; an action is taken &lt;strong&gt;then&lt;/strong&gt; we expect something
to happen in response to the action. This syntax made me think from the
point of view of the user. This way it was very easy to identify different
user roles and actions which will be attempted with the SUT. This also made
my test scenarios more explicit compared to what is described in the wiki pages.
IMO being explicit when designing tests is a good thing. I like it that way.&lt;/p&gt;
&lt;p&gt;OTOH the same explicitness can be achieved with the waterfall method as well.
The trouble is that this is often overlooked because
we're not in the mindset to analyze the various user roles and scenarios.
When writing test cases with waterfall the mindset is more focused on the
technical features, e.g. how the SUT exactly works and we end up missing
important interactions between the user and the system. At least I can recall
a few times that I've made that mistake.&lt;/p&gt;
&lt;p&gt;Tagging the scenarios is a good way of indicating
which scenario covers which roles. Depending on the tools you use it should
be possible to execute test scenarios for different roles (tags). In waterfall
we need to have a separate test plan for each user role, possibly duplicating
some of the test cases across test plans. A bit redundant
but more importantly easier to forget the bigger picture.&lt;/p&gt;
&lt;h2&gt;Big, Small &amp;amp; Undefined&lt;/h2&gt;
&lt;p&gt;BDD originates from TDD which in turn relies heavily on unit testing and
automation. This makes it very easy to use BDD 
test development (and even automate)
for self contained changes, especially ones which affect
only a single component (e.g. a single program). From the Fedora 24 changes
such are for example the systemd and system-python split.&lt;/p&gt;
&lt;p&gt;I happen to work in a team where we deal with large changes, which affect
multiple components and infrastructure. Both the
&lt;a href="https://fedoraproject.org/wiki/Releases/24/ChangeSet#Pungi_Refactor"&gt;Pungi Refactor&lt;/a&gt;
and
&lt;a href="https://fedoraproject.org/wiki/Releases/24/ChangeSet#Layered_Docker_Image_Build_Service"&gt;Layered Docker Image Build Service&lt;/a&gt;
for which I've written BDD style test scenarios are of this nature. This leads
to the following issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QA doesn't always have the entire infrastructure stack in a
staging environment for testing so we need to test on the live infra;&lt;/li&gt;
&lt;li&gt;QA doesn't always have the necessary access permissions to execute
the tests and in some cases never will. For example it is very unlikely
that QA will be able to build a test release and push that for syncing
to the mirrors infrastructure to verify that there are no files left behind;&lt;/li&gt;
&lt;li&gt;Not being able to test independently means QA has to wait for something to happen
then verify the results (e.g. rel-eng builds new Docker images and pushes
them live). When something breaks this testing is often too late.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complex changes are often not described into detail. As they affect multiple
infrastructure layers and components sometimes it is not known what the required
changes need to be. That's why we implement them in stages and have contingency
plans. However this makes it harder for QA to write the tests. 
Btw this is the same regardless of which development method is used.
The good thing is that by forcing you to think from the POV of the user and
in terms of action &amp;amp; response BDD helps identify these missing bits faster.&lt;/p&gt;
&lt;p&gt;For example, with Pungi (Fedora distro build tool),
the feature pages says that the produced directory
structure will be different from previous releases but it doesn't say what
is going to be different so we can't really test that. I know from
experience that this may break tools which rely on this structure like
virt-manager and anaconda and have added simple sanity tests for them.&lt;/p&gt;
&lt;p&gt;In the Docker feature page we have functional requirement for automatic
image rebuilds if one of the underlying components (e.g. RPM package) changes.
This is not described in details and so is the test scenario. I can easily
write a separate BDD feature document for this functionality alone.&lt;/p&gt;
&lt;p&gt;With the waterfall model when a feature isn't well defined QA often waits
for the devel team to implement the basic features and then writes test cases
based on the existing behavior. This is only good for regression testing
the next version but it can't show you something that is missing because
we're never going to look for it. BDD makes it easier to spot when we need
better definitions of scope and roles, even better functional requirements.&lt;/p&gt;
&lt;h2&gt;Automation and Integration&lt;/h2&gt;
&lt;p&gt;Having a small SUT is nice. For example we can easily write a
test script to install, upgrade and query RPM packages and verify the
systemd package split. We can easily prepare a test system and execute
the scripts to verify the expected results.&lt;/p&gt;
&lt;p&gt;OTOH complex features are hard to integrate with BDD automation tools.
For the Docker Image Build Service the straight forward script would
be to start building a new image, then change an underlying component
and see if it gets rebuilt, then ensure all the content comes from
the existing RPM repos, then push the image to the Docker registry
and verify it can be used by the user, etc, etc. 
All of these steps take a non-trivial amount of time. Sometimes hours.
You can also execute them in parallel to save time but how do you sync
back the results ?&lt;/p&gt;
&lt;p&gt;My preference for the moment is to kick-off individual
test suites for a particular BDD scenario and then aggregate the results back.
This also has a side benefit - for complex changes we can have layered
BDD feature documents, each one referencing another feature document.
Repeat this over and over until we get down to purely technical scenarios
which can be tested easily. Once the result are in go back the chain
and fill-in the rest. This way we can traverse all testing activities
from the unit testing level up to the infrastructure level.&lt;/p&gt;
&lt;p&gt;I actually like the back &amp;amp; forth traversing idea very much. I've always
wanted to know how does each individual testing effort relate to the
general product development strategy and in which areas the product is
doing well or not. You can construct the same chain of events with waterfall
as well. IMO BDD just makes it a bit more easier to think about it.&lt;/p&gt;
&lt;p&gt;Another problem I faced is how do I mark the scenarios as out of scope
for the current release ? I can tag them or split them into separate files
or maybe something else? I don't know which one is the best practice. In
waterfall I'll just disable the test cases or move them into a separate
test plan.&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;I will be writing more BDD test definitions in the upcoming 2 weeks to get
more experience with them. I still don't have a clear idea how to approach
BDD test writing when given a particular feature to work on. So far I've
used the functional requirements and items of concern (when present), in the
feature pages, as a starting point for my BDD test scenarios.&lt;/p&gt;
&lt;p&gt;I also want to get more feedback from the development teams and product
management folks.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;BDD style test writing puts the tester into a mind set where it is easier
to see the big picture by visualizing different user roles and scenarios.
It makes it easier to define explicit test cases and highlights missing
details. It is easier for QA to join early in the planning process by
defining roles and thinking about all the possible interactions with the SUT.
This is the biggest benefit for me!&lt;/p&gt;
&lt;p&gt;Self-contained changes are easier to describe and test automatically.&lt;/p&gt;
&lt;p&gt;Bigger and complex features are harder to describe and even harder to
automate in one piece. Divide and conqueror is our best friend here!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Floating-point precision error with Ruby</title><link href="http://atodorov.org/blog/2016/03/08/floating-point-precision-error-with-ruby/" rel="alternate"></link><updated>2016-03-08T11:08:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-03-08:blog/2016/03/08/floating-point-precision-error-with-ruby/</id><summary type="html">&lt;p&gt;One of my tests was faiing and it turned out this was caused by a
floating-point precision error. The functionality in question was a "Load more"
button with pagination which loads records from the database and the front-end displays them.&lt;/p&gt;
&lt;p&gt;Ruby and JavaScript were passing around a parameter
which was only used as part of the SQL queries.
Now the problem is that JavaScript doesn't have a &lt;code&gt;Time&lt;/code&gt; class and the parameter
was passed as string, then converted back to &lt;code&gt;Time&lt;/code&gt; in Ruby. The problem
comes from the intermediate conversion to &lt;code&gt;float&lt;/code&gt; which was used.&lt;/p&gt;
&lt;p&gt;Here's a little code snippet to demonstrate the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mo"&gt;0200&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;070&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;071&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;072&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;073&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;074&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_f&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1457427266&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7206197&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;075&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;076&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-%d %H:%M:%S.%9N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-03-08 10:54:26.720619705&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;077&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-%d %H:%M:%S.%9N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-03-08 10:54:26.720619678&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;080&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the conversion to float and back to Time is off by a few
nano-seconds and the database either didn't return any records or was
returning the same set of records.
This isn't something you can usually see in production, right ? Unless you
have huge traffic and happen to have records created exactly at the same moment.&lt;/p&gt;
&lt;p&gt;The solution is to simply send &lt;code&gt;Time.now.strftime&lt;/code&gt; to the JavaScript and then
use &lt;code&gt;Time.parse&lt;/code&gt; to reconstruct the value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;077&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-%d %H:%M:%S.%9N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-%d %H:%M:%S.%9N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-03-08 10:54:26.720619705&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you'd like to read more about floating point arithmetics please see
&lt;a href="http://floating-point-gui.de"&gt;http://floating-point-gui.de&lt;/a&gt;.&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="Ruby"></category><category term="QA"></category></entry><entry><title>Ruby &amp; Time-based Testing</title><link href="http://atodorov.org/blog/2016/02/23/ruby-time-based-testing/" rel="alternate"></link><updated>2016-02-23T13:08:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-02-23:blog/2016/02/23/ruby-time-based-testing/</id><summary type="html">&lt;p&gt;Publishing this mostly for self reference.
Here are two blog posts on the topic of testing time
dependent code in Ruby applications:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://metaskills.net/2012/08/07/synchronized-times-in-ruby-and-javascript-acceptance-tests-using-capybara-timecop-and-sinon-js/"&gt;Synchronized Times In Ruby &amp;amp; JavaScript Acceptance Tests Using Capybara, Timecop &amp;amp; Sinon.JS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.pivotal.io/labs/labs/goodbye-timecop-hello-timehelpers"&gt;Move Over Timecop…Hello ActiveSupport::Testing::TimeHelpers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven't seen a module similar to timecop in Python, but frankly I've never needed one either.&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="Ruby"></category><category term="QA"></category></entry><entry><title>FOSDEM 2016 Report</title><link href="http://atodorov.org/blog/2016/02/02/fosdem-2016-report/" rel="alternate"></link><updated>2016-02-02T22:54:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-02-02:blog/2016/02/02/fosdem-2016-report/</id><summary type="html">&lt;p&gt;Hello everyone, this year I've been to FOSDEM again. Here is a quick report
of what I did, saw and liked during the event.&lt;/p&gt;
&lt;h2&gt;Day 0 - Elixir &amp;amp; Erlang&lt;/h2&gt;
&lt;p&gt;Friday started with an unexpected shopping trip. The airline broke
my luggage and I had to buy a replacement. The irony is that just before taking off
I saw a guy with an
&lt;a rel="nofollow" href="http://www.amazon.com/gp/product/B006P65P1W/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006P65P1W&amp;linkCode=as2&amp;tag=atodorovorg-20&amp;linkId=4VNFFQEDPY5JXCLP"&gt;Osprey Meridian&lt;/a&gt;&lt;img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&amp;l=as2&amp;o=1&amp;a=B006P65P1W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /&gt;
and thought how cool that was. The next day I was running around Brussels to
find the exact same model! I also searched to buy the book
&lt;a rel="nofollow" href="http://www.amazon.com/gp/product/0140238301/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0140238301&amp;linkCode=as2&amp;tag=atodorovorg-20&amp;linkId=3I6DMH5CC6ZGNX5A"&gt;Teach Your Child How to Think&lt;/a&gt;&lt;img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&amp;l=as2&amp;o=1&amp;a=0140238301" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /&gt;
by Edward De Bono but all 4 bookstores I checked were out of stock.&lt;/p&gt;
&lt;p&gt;With the luggage problem solved I headed to
&lt;a href="http://betacowork.com"&gt;BetaCowork&lt;/a&gt; for
&lt;a href="http://www.erlang-factory.com/brussels2016/"&gt;Brussels Erlang Factory Lite&lt;/a&gt;
where I learned a bit about Erlang and Elixir. I also managed to squeeze a meeting
with &lt;a href="http://www.betacowork.com/profile/122/gilbert-west/"&gt;Gilbert West&lt;/a&gt; talking about
open source bugs.&lt;/p&gt;
&lt;p&gt;I found particularly interesting the Elixir workshop and the talk
&lt;a href="http://www.erlang-factory.com/brussels2016/pieterjan-montens"&gt;Erlang In The Wild: A Governmental Web Application&lt;/a&gt;
by Pieterjan Montens. Later I've managed to get a hold of him and talk some more
about his experiences working for the government. As I figured out later we
are likely to have mutual friends.&lt;/p&gt;
&lt;p&gt;BetaCowork was hosting FOSDEM related events during the entire week.
There was a GNOME event and the Libre Office Italian team was there as well.
Next time definitely worth a longer visit.&lt;/p&gt;
&lt;p&gt;Friday night was reserved for a dinner with the Red Hat Eclipse team and
a fair amount of beer at Delirium afterwards where I've met my friend
&lt;a href="https://fedoraproject.org/wiki/User:Giannisk"&gt;Giannis Konstantinidis&lt;/a&gt;
and the new Fedora Ambassador for Albania -
&lt;a href="https://fedoraproject.org/wiki/User:Jonatoni"&gt;Jona Azizai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All-in-all pretty good Friday!&lt;/p&gt;
&lt;h2&gt;Day 1 - Testing and Automation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Testing and Automation" src="/images/fosdem/2014/testing_automation.jpg" title="Testing and Automation" /&gt;&lt;/p&gt;
&lt;p&gt;FOSDEM was hosting the
&lt;a href="https://fosdem.org/2016/schedule/track/testing_and_automation/"&gt;Testing and automation devroom&lt;/a&gt;
again. I've spent the entire Saturday there.&lt;/p&gt;
&lt;p&gt;Definitely the most interesting talk was
&lt;a href="https://fosdem.org/2016/schedule/event/closed_source_interop/"&gt;Testing interoperability with closed-source software through scriptable diplomacy&lt;/a&gt;
which introduced &lt;a href="http://frida.re"&gt;Frida&lt;/a&gt;. Frida is a testing tool which injects
a JavaScript VM into your process and you can write scripts driving the
application automatically. It was designed as means to control closed source
software but can definitely be used for open source apps as well.&lt;/p&gt;
&lt;p&gt;I've talked to both Karl and Ole about Frida and my use-case for
&lt;a href="http://atodorov.org/blog/2016/01/14/controlling-interactive-terminal-programs/"&gt;testing interactive terminal programs&lt;/a&gt;.
That should be easy to do with Frida - just hook into the read and write
functions and write some JavaScript or Python to run the test.
Later we talked about how exactly Frida attaches to the running process
and what external dependencies are needed if I'm to inject Frida
into the Fedora installation environment.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Testing embedded systems&lt;/em&gt; Itamar Hassin talked about testing medical devices
and made a point about regulation, security and compliance. Basically you are not
allowed to ship non-application code on production system. However that code
is necessary instrumentation to allow external integration testing. I suspect most
developers and QA engineers will never have to deal with so strict
regulations but that is something to have in mind if you test software
in a heavily regulated industry.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Testing complex software in CI&lt;/em&gt; was essentially a presentation about &lt;em&gt;cwrap&lt;/em&gt; which
I've seen at
&lt;a href="http://atodorov.org/blog/2014/02/03/fosdem-2014-report-day-2-testing-and-automation/"&gt;FOSDEM 2014&lt;/a&gt;.
It touched the topic from a slightly different angle though. Tests in any open source
project should have the following properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be able to execute without the need of a complex environment;&lt;/li&gt;
&lt;li&gt;Enable full CI during code review (dependent on previous property);&lt;/li&gt;
&lt;li&gt;Be able to create complete integration tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demo showed how you can execute Samba's test suite locally without
preparing a domain controller for example. This helps both devel and external
contributors. Now contrast this with how Red Hat QE will do the testing - 
they will create a bunch of virtual and bare metal machines, configure all
related services and then execute the same test scripts to verify that indeed
Samba works as expected.&lt;/p&gt;
&lt;p&gt;Btw I've been thinking what if I patch &lt;em&gt;cwrap&lt;/em&gt; to overwrite read and write ?
That will also make it possible to test interactive console programs,
wouldn't it?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jenkins as Code&lt;/em&gt; by Marcin and Lukasz was a blast. I think there were
people standing alongside the walls. The guys shared their experience
with &lt;a href="https://github.com/jenkinsci/job-dsl-plugin"&gt;Jenkins Job DSL&lt;/a&gt;
plugin. The plugin is very flexible and powerful,
using Groovy as its programming language. The only drawback is that it is
sometimes too complex to use and requires a steep learning curve. Maybe
&lt;a href="http://docs.openstack.org/infra/jenkins-job-builder/"&gt;Jenkins Job Builder&lt;/a&gt;
is better suited if you don't need all that flexibility
and complexity. I've met both of them afterwards and talked a bit more
about open source bugs.&lt;/p&gt;
&lt;p&gt;At Saturday evening I've visited a panel discussion about
&lt;a href="https://www.eventbrite.com/e/startupbusaccelerate-the-impact-of-open-source-software-on-the-tech-industry-tickets-20869395925"&gt;the impact of open source on the tech industry&lt;/a&gt;
at &lt;a href="http://co-station.com"&gt;Co.Station&lt;/a&gt; organized by &lt;a href="http://europe.startupbus.com"&gt;The Startup Bus&lt;/a&gt;.
There was beer, pizza, entrepreneur networking and talking about startups
and open source. Do I need to say more? I will post a separate blog post
about the interesting start-ups I've found so stay tuned.&lt;/p&gt;
&lt;h2&gt;Day 2 - Ping-pong with BBC Open Source&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ping-pong" src="/images/bbc_ping_pong.jpg" title="ping-pong" /&gt;&lt;/p&gt;
&lt;p&gt;Sunday was my lazy day. I've attended a few talks but nothing too interesting.
I've managed to go around the project stands, 
&lt;a href="https://fedorahosted.org/fedora-infrastructure/ticket/5085"&gt;filed a bug against FAS&lt;/a&gt;
and scored the highest ping-pong score for the day at the BBC Open Source stand.&lt;/p&gt;
&lt;p&gt;BBC has a long history of being involved with education in the UK and the
&lt;a href="https://www.microbit.co.uk"&gt;micro:bit&lt;/a&gt; is their latest project. I will love to
see this (or similar) delivered by the thousands here in Bulgaria so if you
think about sponsoring let me know.&lt;/p&gt;
&lt;p&gt;Accidentally I met
&lt;a href="https://fedoraproject.org/wiki/User:Msivak"&gt;Martin Sivak&lt;/a&gt; - a former
Anaconda developer whom I've worked with in the past. He is now at the
Virtualization Development team at Red Hat and we briefly talked about
the need for more oVirt testing. I have something in mind about this
which will be announced in the next 2 months so stay tuned.&lt;/p&gt;</summary><category term="events"></category><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>How to Get Started on a New QA Project</title><link href="http://atodorov.org/blog/2016/01/21/how-to-get-started-on-a-new-qa-project/" rel="alternate"></link><updated>2016-01-21T14:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-01-21:blog/2016/01/21/how-to-get-started-on-a-new-qa-project/</id><summary type="html">&lt;p&gt;Every time I have to look at a new software project and use my QA powers
to help them I follow a standard process of getting involved. Usually my
job is to reveal which areas are lacking adequate test coverage and propose
and implement improvements. Here's what it looks like.&lt;/p&gt;
&lt;h2&gt;Obtain Domain Knowledge&lt;/h2&gt;
&lt;p&gt;Whatever the software does I don't start looking into the technical details
before I have domain knowledge about the subject. If the domain is purely
outside my expertise my first reading materials have
nothing to do with the product itself. My goal is to learn how the domain
works, what language it uses, any particular specifics that may exists, etc.&lt;/p&gt;
&lt;p&gt;Then I start asking general questions about the software, how it works and
what it does. At this stage I'm not trying to go into details but rather
cover as much angles as possible. I want to know the big picture of how
things are supposed to work and what the team is trying to do. This also
starts to reveal the architecture behind the project.&lt;/p&gt;
&lt;p&gt;Then I start using the software as if I'm the intended target audience while
taking notes about everything that seems odd or I simply don't understand.
Being with limited knowledge about the domain and the product helps a lot
because I haven't developed any bias yet. This initial hands-on introduction
is best done with a peer who is better familiar with the
product. It is not necessary for the peer to be a technical person, although
that helps when implementation related questions arise.&lt;/p&gt;
&lt;h2&gt;RTFM&lt;/h2&gt;
&lt;p&gt;I make a point to read any available documents, wikis, READMEs, etc. They can
fill the gaps with often used terms, explain processes and workflows or
reveal that such are missing and document existing infrastructure.
Quite often I'm able to see some areas for
improvements directly from reading the documentation.&lt;/p&gt;
&lt;p&gt;At this stage I'm just collecting notes and impressions which will be validated
later. I don't try to remember all of the docs because I can always go back
and read them again. Instead I try to remember the topics these documents
talk about and possibly collect links for future reference.&lt;/p&gt;
&lt;h2&gt;Get to Know the Devel Team&lt;/h2&gt;
&lt;p&gt;One thing I hate the most, except not knowing what a piece of code does is
not knowing who to ask. Quite often team structure follows the application
structure - front-end, back-end, mobile, etc. While getting to know who does
what I also use this as opportunity to gain deeper knowledge about the
product. I will talk to team leads and individual developers asking them to
explain the chosen architecture and also tell me what are the most annoying
problems according to them.&lt;/p&gt;
&lt;p&gt;Later this knowledge makes it easier to see trends and suggest changes that
will improve the overall product quality. Having good working relationship
with developers also makes it easy for these changes to get through.&lt;/p&gt;
&lt;h2&gt;Get to Know the QA Team&lt;/h2&gt;
&lt;p&gt;Similar to the previous step but with a deeper focus on details. This is my
personal domain so I'm trying to figure out who does what in terms of software
testing for the project in question. When I'm working with less experienced
QA teams I focus on what are the individual tasks at hand, how often are they
executed, what is the general workflow and how are we dealing with bugs.&lt;/p&gt;
&lt;p&gt;Behind the scenes what this accomplishes is that I'm able to find what the
bug reporting, testing and verification process is. How are new bugs discovered
and what are the general test strategies without confronting people
directly. I also find what tools are used and get familiar with them in the
process and discover the level of technical abilities of individual team members.&lt;/p&gt;
&lt;h2&gt;Get to Know the App&lt;/h2&gt;
&lt;p&gt;Armed with the previous knowledge I set off to explore the entire application.
Again this is best done with a peer. This time I look at every screen, widget
and button there is. I try using all the available features which also doubles
as an exploratory testing session.&lt;/p&gt;
&lt;p&gt;For backend services which are usually harder to test I opt for a more
detailed explanation session with the developers. Here's the time when I'm
asking the question "How do you test .... ?" multiple times.&lt;/p&gt;
&lt;h2&gt;Deploy to Production&lt;/h2&gt;
&lt;p&gt;If possible I like to keep an eye on how things are deployed to production.
It is not uncommon for software to experience problems due to problems with
the deployment procedure or the production environment itself.&lt;/p&gt;
&lt;p&gt;Also with agile teams it is common to deploy more often. This in turn may
generate additional work for QA. Knowing how software is deployed to
production and what the workflow in the team is helps later with planning
test activities and resources.&lt;/p&gt;
&lt;h2&gt;Read All Bugs&lt;/h2&gt;
&lt;p&gt;Unless there are millions of them I try to go through all the bugs reported
in the bug tracker. If the project has some age to it earlier reports may not
be relevant anymore. In this case my marker is an important event like big
refactoring, important or big new features, changes in teams and organization
or similar. The thinking behind this is that every big change introduces lots
of risks from software quality stand point. Also large changes invalidate
previous conditions and may render existing problems obsolete, replacing them
with newer set of problems instead!&lt;/p&gt;
&lt;p&gt;From reading bug reports I'm able to discover failure trends, which in turn
indicate areas for improvement. For example: lots of translation related bugs
indicate problems with the translation workflow, lots of broken existing
functionality means poor regression testing, probably also lack of unit tests,
lots of partially(poorly) implemented features shows chaotic planning and
unclear feature specifications, etc.&lt;/p&gt;
&lt;p&gt;At this stage I try to classify problems both by technical component and
by type of issue. Later this will be my starting reference for creating
test strategies and test plans!&lt;/p&gt;
&lt;p&gt;If possible and practical I talk to support and read all the support tickets
as well. This gives me an idea which problems are most visible to
customers which aren't necessary the biggest technical issues but may consume
man power dealing with them.&lt;/p&gt;
&lt;h2&gt;Summarize, Divide and Conquer&lt;/h2&gt;
&lt;p&gt;Depending on the project and team size these initial steps will take anywhere 
from a full week to a month or even more. After they are complete I'm
feeling comfortable talking about the software at hand and have a list of
possible problems and areas of improvements.&lt;/p&gt;
&lt;p&gt;After talking to people in charge (e.g. PMs, Project Leads, etc) my initial
list is transformed into tasks. I strive to keep the tasks as independent
as possible. Then these tasks are prioritized and it's time to start executing
them one by one.&lt;/p&gt;</summary><category term="QA"></category></entry><entry><title>Tesla Needs More QA</title><link href="http://atodorov.org/blog/2016/01/15/tesla-needs-more-qa/" rel="alternate"></link><updated>2016-01-15T12:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-01-15:blog/2016/01/15/tesla-needs-more-qa/</id><summary type="html">&lt;p&gt;&lt;img alt="Tesla email" src="/images/tesla_qa_bug.png" title="Tesla email" /&gt;&lt;/p&gt;
&lt;p&gt;A nice way for Tesla Motors to tell me they won't consider my interest in their
QA positions - by sending me an email with a bug! It only goes to show that
everything coming out of an IT system needs to be tested.&lt;/p&gt;</summary><category term="QA"></category></entry><entry><title>Controlling Interactive Terminal Programs</title><link href="http://atodorov.org/blog/2016/01/14/controlling-interactive-terminal-programs/" rel="alternate"></link><updated>2016-01-14T16:03:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-01-14:blog/2016/01/14/controlling-interactive-terminal-programs/</id><summary type="html">&lt;p&gt;Building on my previous experience about
&lt;a href="http://atodorov.org/blog/2015/12/25/capture-terminal-output-from-other-processes/"&gt;capturing terminal output from other processes&lt;/a&gt;
I wanted to create an automated test case for the initial-setup-text service
which would control &lt;code&gt;stdin&lt;/code&gt;. Something like
&lt;a href="https://fedorahosted.org/dogtail/"&gt;Dogtail&lt;/a&gt; but for text mode applications.&lt;/p&gt;
&lt;p&gt;What you have to do is attach &lt;code&gt;gdb&lt;/code&gt; to the process. Then you can &lt;code&gt;write&lt;/code&gt; to
any file descriptor that is already opened. &lt;strong&gt;WARNING:&lt;/strong&gt; writing directly to
stdin didn't quite work! Because (I assume) stdin is a tty the text was shown on
the console but the return character wasn't interpreted and the application wasn't
accepting the input string. What I had to do is replace the tty with a pipe and
it worked. However the input is not duplicated on the console this way!&lt;/p&gt;
&lt;p&gt;Another drawback is that I couldn't use &lt;code&gt;strace&lt;/code&gt; to log the output in combination
with &lt;code&gt;gdb&lt;/code&gt;. Once a process is under trace you can't trace it a second time! For this
simple test I was able to live with this by not inspecting the actual text printed
by initial-setup. Instead I'm validating the state of the system after setup is
complete. I've tried to &lt;code&gt;read&lt;/code&gt; from &lt;code&gt;stdout&lt;/code&gt; in gdb but that didn't work either.
If there's a way to make this happen I can convert this script to a mini-framework.&lt;/p&gt;
&lt;p&gt;Another unknown is interacting with &lt;code&gt;passwd&lt;/code&gt;. Probably for security reasons
it doesn't allow to mess around with its stdin but I didn't investigate deeper.&lt;/p&gt;
&lt;p&gt;I've used the
&lt;a href="https://github.com/ticpu/tools/blob/master/fdmanage.py"&gt;fdmanage.py&lt;/a&gt;
script which does most of the work for me. I've removed the extra bits
that I didn't need, added the &lt;code&gt;write()&lt;/code&gt; method and removed the original call to
&lt;code&gt;fcntl&lt;/code&gt; which puts gdb.stdout into non-blocking mode (that didn't work for me).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;initial_setup_driver.py&lt;/span&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# fdmanage.py is a program to manage file descriptors of running programs&lt;/span&gt;
&lt;span class="c"&gt;# by using GDB to modify the running program.&lt;/span&gt;
&lt;span class="c"&gt;# https://github.com/ticpu/tools/blob/master/fdmanage.py&lt;/span&gt;
&lt;span class="c"&gt;# Copyright (C) 2015 Jérôme Poulin &amp;lt;jeromepoulin@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# This program is free software: you can redistribute it and/or modify&lt;/span&gt;
&lt;span class="c"&gt;# it under the terms of the GNU General Public License as published by&lt;/span&gt;
&lt;span class="c"&gt;# the Free Software Foundation, either version 3 of the License, or&lt;/span&gt;
&lt;span class="c"&gt;# (at your option) any later version.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# This program is distributed in the hope that it will be useful,&lt;/span&gt;
&lt;span class="c"&gt;# but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/span&gt;
&lt;span class="c"&gt;# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/span&gt;
&lt;span class="c"&gt;# GNU General Public License for more details.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# You should have received a copy of the GNU General Public License&lt;/span&gt;
&lt;span class="c"&gt;# along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Copyright (c) 2016 Alexander Todorov &amp;lt;atodorov@redhat.com&amp;gt;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gdb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;close_fds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;detach&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Program terminated.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_command_expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;call close(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dup2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_fd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;call dup2(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_fd&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_fd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command_expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;call open(&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;call write(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;

    &lt;span class="c"&gt;# these are specific to initial-setup-text&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;1&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# License information&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;2&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Accept license&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;c&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Continue back to the main hub&lt;/span&gt;

        &lt;span class="s"&gt;&amp;quot;3&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Timezone settings&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;8&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Europe&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;43&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Sofia&lt;/span&gt;

&lt;span class="c"&gt;# passwd doesn&amp;#39;t allow us to overwrite its file descriptors&lt;/span&gt;
&lt;span class="c"&gt;# either aborts or simply doesn&amp;#39;t work&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;4\\n&amp;quot;,      # Root password&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;redhat\\n&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;redhat\\n&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;no\\n&amp;quot;,     # password is weak&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;123\\n&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;123\\n&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;no\\n&amp;quot;,     # password is too short&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;Th1s-Is-a-Str0ng-Password!\\n&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;#        &amp;quot;Th1s-Is-a-Str0ng-Password!\\n&amp;quot;,&lt;/span&gt;

        &lt;span class="s"&gt;&amp;quot;c&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Continue to exit&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;USAGE: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;PID&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;__file__&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tmp_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdtemp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pipe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkfifo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Gdb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# O_RDWR&lt;/span&gt;
        &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# replace STDIN with a PIPE&lt;/span&gt;
        &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# set a breakpoint before continuing&lt;/span&gt;
        &lt;span class="n"&gt;break_point_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command_expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;break read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# now execute the process step-by-step&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;len_steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;len_steps&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;break_point_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# clean up&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Capture Terminal Output From Other Processes</title><link href="http://atodorov.org/blog/2015/12/25/capture-terminal-output-from-other-processes/" rel="alternate"></link><updated>2015-12-25T12:03:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-12-25:blog/2015/12/25/capture-terminal-output-from-other-processes/</id><summary type="html">&lt;p&gt;I've been working on a test case to verify that Anaconda will print its EULA
notice at the end of a text mode installation. The problem is how do you capture
all the text which is printed to the terminal from processes outside your control ?
The answer is surprisingly simple - using strace! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%post&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nochroot&lt;/span&gt;
&lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin/python /sbin/anaconda&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;grep&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;STRACE_LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/mnt/sysimage/root/anaconda.strace&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# see https:&lt;/span&gt;&lt;span class="c1"&gt;//fedoraproject.org/wiki/Features/SELinuxDenyPtrace&lt;/span&gt;
&lt;span class="n"&gt;setsebool&lt;/span&gt; &lt;span class="n"&gt;deny_ptrace&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="cp"&gt;# EULA notice is printed after post-scripts are run&lt;/span&gt;
&lt;span class="n"&gt;strace&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s16384&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;$STRACE_LOG&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;$PID&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;strace is tracing only read and write events (we really only need write) and
extending the maximum string size printed in the log file. For a simple grep
this is sufficient. If you need to pretty-print the strace output have a look
at the &lt;a href="http://search.cpan.org/~bbb/ttylog/ttylog"&gt;ttylog&lt;/a&gt; utility.&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Facebook is Bugging me</title><link href="http://atodorov.org/blog/2015/12/17/facebook-is-bugging-me/" rel="alternate"></link><updated>2015-12-17T09:34:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-12-17:blog/2015/12/17/facebook-is-bugging-me/</id><summary type="html">&lt;p&gt;&lt;img alt="Facebook icon" src="/images/facebook_android_icon_small.png" title="Facebook icon" /&gt;&lt;/p&gt;
&lt;p&gt;Facebook for Android version 55.0.0.18.66 broke the home screen icon title.
It reads &lt;code&gt;false&lt;/code&gt; instead of &lt;code&gt;Facebook&lt;/code&gt;. This is now fixed in version 58.0.0.28.70.
I wonder how they managed to get this slip through. Also isn't Google
supposed to review the apps coming into the Play Store and not publish them
if there are such visible issues ? I guess this wasn't the case here.&lt;/p&gt;</summary><category term="QA"></category></entry><entry><title>Automatic Upstream Dependency Testing</title><link href="http://atodorov.org/blog/2015/12/02/automatic-upstream-dependency-testing/" rel="alternate"></link><updated>2015-12-02T10:34:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-12-02:blog/2015/12/02/automatic-upstream-dependency-testing/</id><summary type="html">&lt;p&gt;Ever since
&lt;a href="http://atodorov.org/blog/2015/11/24/python-libs-in-rhel-7.2-broke-ssl-verification-in-s3cmd/"&gt;RHEL 7.2 python-libs broke s3cmd&lt;/a&gt;
I've been pondering an age old problem: &lt;em&gt;How do I know if my software works with the
latest upstream dependencies ? How can I pro-actively monitor for new versions
and add them to my test matrix ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mixing together my previous experience with
&lt;a href="http://atodorov.org/blog/2014/05/06/opensource-dot-com-article-10-steps-to-migrate-your-closed-software-to-open-source/"&gt;Difio&lt;/a&gt;
and monitoring upstream sources,
and &lt;a href="https://twitter.com/ForbesLindesay"&gt;Forbes Lindesay's&lt;/a&gt; &lt;em&gt;GitHub Automation&lt;/em&gt; talk
at &lt;a href="http://atodorov.org/blog/2015/05/22/devit-conf-2015-impressions/"&gt;DEVit Conf&lt;/a&gt; I came
together with a plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make an application which will execute when new upstream version is available;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2015/12/01/commit-a-file-with-the-github-api-and-python/"&gt;Automatically update &lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt;
for the projects I'm interested in;&lt;/li&gt;
&lt;li&gt;Let Travis-CI execute my test suite for all available upstream versions;&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How Does It Work&lt;/h2&gt;
&lt;p&gt;First we need to monitor upstream! RubyGems.org has nice
&lt;a href="http://guides.rubygems.org/rubygems-org-api/#webhook-methods"&gt;webhooks interface&lt;/a&gt;,
you can even trigger on individual packages. PyPI however doesn't have anything
like this :(. My solution is to run a cron job every hour and parse their RSS
stream for newly released packages. This has been working previously for Difio
so I re-used one function from the code.&lt;/p&gt;
&lt;p&gt;After finding anything we're interested in comes the hard part - automatically
updating &lt;code&gt;.travis.yml&lt;/code&gt; using the GitHub API. I've described this in more detail
&lt;a href="http://atodorov.org/blog/2015/12/01/commit-a-file-with-the-github-api-and-python/"&gt;here&lt;/a&gt;. This time
I've slightly modified the code to update only when needed and accept more
parameters so it can be reused.&lt;/p&gt;
&lt;p&gt;Travis-CI has a clean interface to specify environment variables and
&lt;a href="https://docs.travis-ci.com/user/environment-variables/#Defining-Multiple-Variables-per-Item"&gt;defining several&lt;/a&gt;
of them crates a test matrix. This is exactly what I'm doing.
&lt;code&gt;.travis.yml&lt;/code&gt; is updated with a new ENV setting, which determines the upstream
package version. After commit new build is triggered which includes the expanded
test matrix.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Travis-CI build log" src="http://atodorov.org/images/travisci_matrix.png" title="Travis-CI build log" /&gt;&lt;/p&gt;
&lt;p&gt;Imagine that our &lt;em&gt;Project 2501&lt;/em&gt; depends on FOO version &lt;em&gt;0.3.1&lt;/em&gt;. The
&lt;a href="https://travis-ci.org/atodorov/bztest/builds"&gt;build log&lt;/a&gt; illustrates what
happened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build #9 is what we've tested with &lt;em&gt;FOO-0.3.1&lt;/em&gt; and released to production.
Test result is PASS!&lt;/li&gt;
&lt;li&gt;Build #10 - meanwhile upstream releases &lt;em&gt;FOO-0.3.2&lt;/em&gt; which causes our project
to break. We're not aware of this and continue developing new features
while all test results still PASS! When our customers upgrade their systems
&lt;em&gt;Project 2501&lt;/em&gt; will break ! Tests didn't catch it because test matrix wasn't
updated. Please
ignore the actual commit message in the example! I've used the same repository
for the dummy dependency package.&lt;/li&gt;
&lt;li&gt;Build #11 - the monitoring solution finds &lt;em&gt;FOO-0.3.2&lt;/em&gt; and updates the test
matrix automatically. The build immediately breaks! More precisely the
&lt;a href="https://travis-ci.org/atodorov/bztest/builds/94263181"&gt;test with version &lt;em&gt;0.3.2&lt;/em&gt; fails&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Build #12 - we've alerted FOO.org about their problem and they've released
&lt;em&gt;FOO-0.3.3&lt;/em&gt;. Our monitor has found that and updated the test matrix.
However &lt;a href="https://travis-ci.org/atodorov/bztest/builds/94270592"&gt;the 0.3.2 test job still fails&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Build #13 - we decide to workaround the 0.3.2 failure or simply handle the
error gracefully. In this example I've removed version 0.3.2 from the test
matrix to simulate that. In reality I wouldn't touch &lt;code&gt;.travis.yml&lt;/code&gt; but instead
update my application and tests to check for that particular version.
All test results are PASS again!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Btw Build #11 above was triggered manually (./monitor.py) while Build #12
came from OpenShit, my hosting environment.&lt;/p&gt;
&lt;p&gt;At present I have this monitoring enabled for my
&lt;a href="http://atodorov.org/blog/2015/11/26/3-new-python-markdown-extensions/"&gt;new Markdown extensions&lt;/a&gt;
and will also add it to &lt;a href="https://github.com/atodorov/django-s3-cache"&gt;django-s3-cache&lt;/a&gt;
once it migrates to Travis-CI (it uses drone.io now).&lt;/p&gt;
&lt;h2&gt;Enough Talk, Show me the Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;monitor.py&lt;/span&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.dom.minidom&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parseString&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# GitHub requires a valid UA string&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Mozilla/5.0 (X11; Linux x86_64; rv:10.0.5) Gecko/20120601 Firefox/10.0.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# shortcut for GitHub API calls&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;api.github.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GITHUB_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Set the GITHUB_TOKEN variable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;token &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GITHUB_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPSConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;post_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getresponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;404 - &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; not found&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# not a JSON response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monitor_rss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Scan the PyPI RSS feeds to look for new packages.&lt;/span&gt;
&lt;span class="sd"&gt;        If name is found in config then execute the specified callback.&lt;/span&gt;

&lt;span class="sd"&gt;        @config is a dict with keys matching package names and values&lt;/span&gt;
&lt;span class="sd"&gt;        are lists of dicts&lt;/span&gt;
&lt;span class="sd"&gt;            {&lt;/span&gt;
&lt;span class="sd"&gt;                &amp;#39;cb&amp;#39; : a_callback,&lt;/span&gt;
&lt;span class="sd"&gt;                &amp;#39;args&amp;#39; : dict&lt;/span&gt;
&lt;span class="sd"&gt;            }&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;rss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://pypi.python.org/pypi?:action=rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pubDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wholeText&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;released_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstChild&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wholeText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y %H:%M:%S GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;found in config&amp;quot;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;#39;version&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s"&gt;&amp;#39;released_on&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;released_on&lt;/span&gt;
                        &lt;span class="p"&gt;})&lt;/span&gt;

                        &lt;span class="c"&gt;# execute the call back&lt;/span&gt;
                        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_travis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_version&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;travis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_ver_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  - VERSION=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;new_version&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;travis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_ver_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;travis&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_ver_line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;travis&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Update GitHub via API&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GITHUB_REPO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GITHUB_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GITHUB_BRANCH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GITHUB_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GITHUB_FILE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# step 1: Get a reference to HEAD&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/repos/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/git/refs/heads/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GITHUB_BRANCH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# step 2: Grab the commit that HEAD points to&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c"&gt;# remove what we don&amp;#39;t need for clarity&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="c"&gt;# step 4: Get a hold of the tree that the commit points to&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# intermediate step: get the latest content from GitHub and make an updated version&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GITHUB_FILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# get the blob from the tree&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;old_travis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_travis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update_travis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_travis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# bail out if nothing changed&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_travis&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;old_travis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;new == old, bailing out&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="c"&gt;####&lt;/span&gt;
    &lt;span class="c"&gt;#### WARNING WRITE OPERATIONS BELOW&lt;/span&gt;
    &lt;span class="c"&gt;####&lt;/span&gt;

    &lt;span class="c"&gt;# step 3: Post your new file to the server&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;/repos/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/git/blobs&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;new_travis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;encoding&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# step 5: Create a tree containing your new file&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;/repos/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/git/trees&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;base_tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GITHUB_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;100644&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;}]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# step 6: Create a new commit&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;/repos/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/git/commits&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New upstream dependency found! Auto update .travis.yml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;parents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# step 7: Update HEAD, but don&amp;#39;t force it!&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;/repos/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/git/refs/heads/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GITHUB_REPO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GITHUB_BRANCH&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# PASS&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# FAIL&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;atodorov-test&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;cb&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update_github&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_REPO&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;atodorov/bztest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_BRANCH&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_FILE&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.travis.yml&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Markdown&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;cb&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update_github&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_REPO&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;atodorov/Markdown-Bugzilla-Extension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_BRANCH&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_FILE&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.travis.yml&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;cb&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update_github&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_REPO&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;atodorov/Markdown-No-Lazy-Code-Extension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_BRANCH&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_FILE&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.travis.yml&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;cb&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update_github&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_REPO&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;atodorov/Markdown-No-Lazy-BlockQuote-Extension&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_BRANCH&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;GITHUB_FILE&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.travis.yml&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;# check the RSS to see if we have something new&lt;/span&gt;
    &lt;span class="n"&gt;monitor_rss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="fedora.planet"></category><category term="Python"></category><category term="OpenShift"></category><category term="Django"></category><category term="QA"></category></entry><entry><title>python-libs in RHEL 7.2 broke SSL verification in s3cmd</title><link href="http://atodorov.org/blog/2015/11/24/python-libs-in-rhel-7.2-broke-ssl-verification-in-s3cmd/" rel="alternate"></link><updated>2015-11-24T21:44:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-11-24:blog/2015/11/24/python-libs-in-rhel-7.2-broke-ssl-verification-in-s3cmd/</id><summary type="html">&lt;p&gt;Today started with &lt;a href="http://planet.sofiavalley.com"&gt;Planet Sofia Valley&lt;/a&gt; being
broken again. Indeed it's been broken since last Friday when I've upgraded to
the latest RHEL 7.2. I quickly identified that I was hitting
&lt;a href="https://github.com/s3tools/s3cmd/issues/647"&gt;Issue #647&lt;/a&gt;. Then I tried the
git checkout without any luck. This is when I started to suspect that python-libs
has been updated in an incompatible way.&lt;/p&gt;
&lt;p&gt;After series of reported bugs,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1284916"&gt;rhbz#1284916&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1284930"&gt;rhbz#1284930&lt;/a&gt;,
&lt;a href="http://bugs.python.org/issue25722"&gt;Python#25722&lt;/a&gt;, it was clear that
&lt;code&gt;ssl.py&lt;/code&gt; was working according to RFC6125, that Amazon S3 was not playing
nicely with this same RFC and that my patch proposal was wrong.
This immediately had me looking upper in the stack at &lt;code&gt;httplib.py&lt;/code&gt; and &lt;code&gt;s3cmd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Indeed there was a change in &lt;code&gt;httplib.py&lt;/code&gt; which introduced two parameters,
&lt;em&gt;context&lt;/em&gt; and &lt;em&gt;check_hostname&lt;/em&gt;, to &lt;code&gt;HTTPSConnection.__init__&lt;/code&gt;. The change
also supplied the logic which performs SSL hostname validation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if not self._context.check_hostname and self._check_hostname:
    try:
        ssl.match_hostname(self.sock.getpeercert(), server_hostname)
    except Exception:
        self.sock.shutdown(socket.SHUT_RDWR)
        self.sock.close()
        raise
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This looks a bit doggy as I don't quite understand the intention behind
&lt;em&gt;not PREDICATE and PREDICATE&lt;/em&gt;. Anyway to disable the validation you need
both parameters set to False, which is
&lt;a href="https://github.com/s3tools/s3cmd/pull/668"&gt;PR #668&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notice the two try-except blocks. This is in case we're running with a
version that has a context but not the check_hostname parameter. I've found
the &lt;em&gt;inspect.getmembers&lt;/em&gt; function which can be used to figure out what
parameters are there for the init method but a solution based on it
doesn't appear to be more elegant. I will describe this in more details in
my next post.&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category><category term="RHEL"></category><category term="Python"></category></entry><entry><title>GitHub Bugzilla Hook</title><link href="http://atodorov.org/blog/2015/11/24/github-bugzilla-hook/" rel="alternate"></link><updated>2015-11-24T13:32:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-11-24:blog/2015/11/24/github-bugzilla-hook/</id><summary type="html">&lt;p&gt;Last month I've created a tool which adds comments to Bugzilla when a commit
message references a bug number. It was done as a proof of concept and didn't
receive much attention at the time. Today I'm happy to announce the existence
of &lt;a href="https://github.com/atodorov/github-bugzilla-hook"&gt;GitHub Bugzilla Hook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've used David Shea's
&lt;a href="https://github.com/rhinstaller/github-email-hook/"&gt;GitHub Email Hook&lt;/a&gt; as my
starting template and only modified it where needed. GitHub Bugzilla Hook will
examine push data and post comments for every unique bug+branch combination.
Once a comment for that particular bug+branch combination is made, new ones
will not be posted, even if later commits reference the same bug.
My main assumption is commits which are related to a bug will be pushed together
most of the times so there shouldn't be lots of noise in Bugzilla.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1274703"&gt;rhbz#1274703&lt;/a&gt; for
example of how the comments look. The parser behavior is taken from anaconda
and conforms to the style the Red Hat Installer Engineering Team uses.
Hopefully you find it useful as well.&lt;/p&gt;
&lt;p&gt;My next step is to find a hosting place for this script and hook it up
with the rhinstaller GitHub repos!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Bad Stub Design in DNF, Pt.2</title><link href="http://atodorov.org/blog/2015/11/23/bad-stub-design-in-dnf/" rel="alternate"></link><updated>2015-11-23T15:55:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-11-23:blog/2015/11/23/bad-stub-design-in-dnf/</id><summary type="html">&lt;p&gt;Do you remember my example of a
&lt;a href="/blog/2015/09/25/unit-testing-bad-stub-design-in-dnf/"&gt;bad stub design in DNF&lt;/a&gt; ?
At that time I didn't have a good example of why this is a bad design and what are the
consequences of it. Today I have!&lt;/p&gt;
&lt;p&gt;From my comment on
&lt;a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/118"&gt;PR #118&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the benefit of this patch are quite subtle.
I've played around with creating a few more tests and the benefit I see affect
only a few lines of code.&lt;/p&gt;
&lt;p&gt;For #114 there doesn't seem to be any need to test _get_query directly,
although we call&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   q = self.base.sack.query()
   q = q.available()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will benefit from this PR b/c we're stubbing out the entire Sack object.
I will work on a test later today/tomorrow to see how it looks.&lt;/p&gt;
&lt;p&gt;OTOH for #113 where we modify _get_query the test can look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def test_get_query_with_local_rpm(self):
    try:
        (fs, rpm_path) = tempfile.mkstemp(&amp;#39;foobar-99.99-1.x86_64.rpm&amp;#39;)
        # b/c self.cmd.cli.base is a mock object add_remote_rpm
        # will not update the available packages while testing.
        # it is expected to hit an exception
        with self.assertRaises(dnf.exceptions.PackageNotFoundError):
            self.cmd._get_query(rpm_path)
        self.cmd.cli.base.add_remote_rpm.assert_called_with(rpm_path)
    finally:
        os.remove(rpm_path)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the comment above the with block. If we leave out &lt;code&gt;_get_query&lt;/code&gt; as before
(a simple stub function) we're not going to be able to use &lt;code&gt;assert_called_with&lt;/code&gt;
later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now a more practical example. See 
&lt;a href="https://github.com/rpm-software-management/dnf-plugins-core/commit/fe130669ffc4c1d6eba8f10cda35ab4d803d5a3d"&gt;commit fe13066&lt;/a&gt;
- in case the package is not found we log the error. In case configuration is
&lt;code&gt;strict=True&lt;/code&gt; then the plugin will raise another exception. With the initial version
of the stubs this change in behavior is silently ignored. If there was an error
in the newly introduced lines it would go straight into production because the
existing tests passed.&lt;/p&gt;
&lt;p&gt;What happens is that &lt;code&gt;test_get_packages()&lt;/code&gt; calls &lt;code&gt;_get_packages(['notfound'])&lt;/code&gt;,
which is not the real code but a test stub and returns an empty list in this case.
The empty list is expected from the test and it will not fail!&lt;/p&gt;
&lt;p&gt;With my new stub design the test will execute the actual &lt;code&gt;_get_packages()&lt;/code&gt;
method from &lt;code&gt;download.py&lt;/code&gt; and choke on the exception. The test itself needs
to be modified, which is done in
&lt;a href="https://github.com/atodorov/dnf-plugins-core/commit/2c2b34237c99cbf32e23bde43027d22873f4e8b7"&gt;commit 2c2b34&lt;/a&gt;
and no further errors were found.&lt;/p&gt;
&lt;p&gt;So let me summarize:
&lt;strong&gt;
When using mocks, stubs and fake objects we should be replacing external
dependencies of the software under test, not internal methods from the SUT!
&lt;/strong&gt;&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Tip: Running DNF Plugins from git</title><link href="http://atodorov.org/blog/2015/11/23/tip-running-dnf-plugins-from-git/" rel="alternate"></link><updated>2015-11-23T15:50:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-11-23:blog/2015/11/23/tip-running-dnf-plugins-from-git/</id><summary type="html">&lt;p&gt;This is mostly for self reference because it is not currently documented
in the code. To use dnf plugins from a local git checkout modify your
&lt;code&gt;/etc/dnf/dnf.conf&lt;/code&gt; and add the following line under the &lt;code&gt;[main]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pluginpath=/path/to/dnf-plugins-core/plugins
&lt;/pre&gt;&lt;/div&gt;</summary><category term="QA"></category><category term="fedora.planet"></category><category term="tips"></category></entry><entry><title>Revamping Anaconda's Dogtail Tests</title><link href="http://atodorov.org/blog/2015/11/20/revamping-anaconda-dogtail-tests/" rel="alternate"></link><updated>2015-11-20T15:34:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2015-11-20:blog/2015/11/20/revamping-anaconda-dogtail-tests/</id><summary type="html">&lt;p&gt;In my &lt;a href="/blog/2015/11/13/running-anaconda-from-git/"&gt;previous post&lt;/a&gt; I briefly talked
about running anaconda from a git checkout. My goal was to rewrite &lt;code&gt;tests/gui/&lt;/code&gt; so
that they don't use a LiveCD and virtual machines anymore. I'm pleased to announce
that this is already done (still not merged), see 
&lt;a href="https://github.com/rhinstaller/anaconda/pull/457"&gt;PR#457&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The majority of the changes are just shuffling bits around and deleting
unused code. The existing UI tests were mostly working and only needed minor
changes. There are two things which didn't work and are temporarily disabled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clicking the Help button results in &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1282432"&gt;rhbz#1282432&lt;/a&gt;,
which in turn may be hiding another bug behind it;&lt;/li&gt;
&lt;li&gt;Looping over the available languages resulted in AT-SPI NonImplementedError
which I'm going to debug next.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To play around with this make sure you have accessibility enabled and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# cd anaconda/
# export top_srcdir=`pwd`
# setenforce 0
# cd tests/gui/
# ./run_gui_tests.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you also need Dogtail for Python3 which isn't officially available
yet. I'm building from
&lt;a href="https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm"&gt;https://vhumpa.fedorapeople.org/dogtail/beta/dogtail3-0.9.1-0.3.beta3.src.rpm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My future plans are to figure out how to re-enable what is temporarily
disabled, update &lt;code&gt;run_gui_tests.sh&lt;/code&gt; to properly start gnome-session and
enable accessibility, do a better job cleaning up after a failure,
enable coverage and hook everything into &lt;code&gt;make ci&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry></feed>