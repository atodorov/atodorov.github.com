<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2014-01-24T22:12:52+02:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Click Tracking without MailChimp]]></title>
    <link href="http://atodorov.org/blog/2013/01/31/click-tracking-without-mailchimp/"/>
    <updated>2013-01-31T21:23:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/01/31/click-tracking-without-mailchimp</id>
    <content type="html"><![CDATA[<p>Here is a standard notification message that users at <a href="http://www.dif.io">Difio</a>
receive. It is plain text, no HTML crap, short and URLs are clean and
descriptive. As the project lead developer I wanted to track when people click on
these links and visit the website but also keep existing functionality.</p>

<p><img src="/images/email_w_links.png" title="Email with links" alt="&quot;Email with links&quot;" /></p>

<h2>Standard approach</h2>

<p>A pretty common approach when sending huge volumes of email is to use an external
service, such as MailChimp. This is one of many email
marketing services which comes with a lot of features. The most important to me
was analytics and reports.</p>

<p>The downside is that MailChimp (and I guess others) use HTML formatted emails
extensively. I don't like that and I'm sure my users will not like it as well.
They are all developers. Not to mention that MailChimp is much more expensive
than <a href="http://aws.amazon.com/ses/">Amazon SES</a> which I use currently.
No MailChimp for me!</p>

<p>Another common approach, used by Feedburner by the way,
is to use shortened URLs which redirect to the original ones and measure clicks
in between. I also didn't like this for two reasons: 1) the shortened URLs look
ugly and they are not at all descriptive and 2) I need to generate them automatically
and maintain all the mappings. Why bother ?</p>

<h2>How I did it? </h2>

<p>So I needed something which will do a redirect to a predefined URL, measure how many
redirects were there (essentially clicks on the link) and look nice. The solution is
very simple, if you have not recognized it by now from the picture above.</p>

<p>I opted for a custom redirect engine, which will add tracking information to the
destination URL so I can track it in Google Analytics.</p>

<p>Previous URLs were of the form <code>http://www.dif.io/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code>.
I've added the humble <code>/daily/?</code> prefix before the URL path so it becomes
<code>http://www.dif.io/daily/?/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code></p>

<p>Now <code>/updates/haml-3.1.2/haml-3.2.0.rc.3/11765/</code> becomes a query string parameter which
the <code>/daily/index.html</code> page uses as its destination. Before doing the redirect
a script adds tracking parameters so that Google Analytics will properly
report this visit. Here is the code:</p>

<p>{% codeblock lang:html %}
<html>
<head></p>

<script type="text/javascript">
var uri = window.location.toString();
var question = uri.indexOf("?");
var param = uri.substring(question + 1, uri.length)
if (question > 0) {
    window.location.href = param + '?utm_source=email&utm_medium=email&utm_campaign=Daily_Notification';
}
</script>


<p></head>
<body></body>
</html>
{% endcodeblock %}</p>

<p>Previously Google Analytics was reporting these visits as direct hits while now it lists them under
campaigns like so:</p>

<p><img src="/images/analytics_difio_campaigns.png" title="Difio Analytics" alt="&quot;Difio Analytics&quot;" /></p>

<p>Because all visitors of <a href="http://www.dif.io">Difio</a> use JavaScript enabled browsers
I combined this approach with another one, to
<a href="/blog/2013/01/28/remove-query-string-with-javascript-and-html5/">remove query string with JavaScript</a>
and present clean URLs to the visitor.</p>

<h2>Why JavaScript?</h2>

<p>You may be asking why the hell I am using JavaScript and not Apache's wonderful mod_rewrite module?
This is because the destination URLs are hosted in <a href="http://aws.amazon.com/s3/">Amazon S3</a> and I'm
planning to integrate with <a href="http://aws.amazon.com/cloudfront/">Amazon CloudFront</a>. Both of them
don't support .htaccess rules nor anything else similar to mod_rewrite.</p>

<p>As always I'd love to hear your thoughts and feedback. Please use the comment form below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Query String with JavaScript and HTML5]]></title>
    <link href="http://atodorov.org/blog/2013/01/28/remove-query-string-with-javascript-and-html5/"/>
    <updated>2013-01-28T15:52:00+02:00</updated>
    <id>http://atodorov.org/blog/2013/01/28/remove-query-string-with-javascript-and-html5</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Query_string">query string</a> is the stuff after
the question mark in URLs.</p>

<p><img src="/images/url_w_qs.png" alt="&quot;URL with query string&quot;" /></p>

<h2>Why remove query strings?</h2>

<p>Two reasons: clean URLs and social media.</p>

<p>Clean URLs not only look better but they prevent users to see if you are tracking
where they came from. The picture above shows what the address bar
looks like after the user clicks a link in Feedburner. The high-lightened part is
what Google Analytics uses to distinguish Feedburner traffic from other types of
traffic. I don't want my users to see this.</p>

<p>As you know, social media sites give URLs a score, whether it is based on number of
bookmarks, reviews, comments, likes or whatever. Higher scores usually result in
increased traffic to your site. Query strings mess things up because <a href="http://www.dif.io">http://www.dif.io</a>
and <a href="http://www.dif.io/?query">http://www.dif.io/?query</a> are usually considered two different URLs. So instead
of having a high number of likes for your page you get several scores and never
make it to the headlines.</p>

<h2>JavaScript and HTML5 to the rescue</h2>

<p>Place this JavaScript code in the <code>&lt;head&gt;</code> section of your pages. Preferably near the top.</p>

<p>{% codeblock lang:html %}</p>

<script type="text/javascript">
var uri = window.location.toString();
if (uri.indexOf("?") > 0) {
    var clean_uri = uri.substring(0, uri.indexOf("?"));
    window.history.replaceState({}, document.title, clean_uri);
}
</script>


<p>{% endcodeblock %}</p>

<p>This code will clean the URL in the browser address bar without reloading the page.
It works for HTML5 enabled browsers.</p>

<p>This works for me with
Firefox 10.0.12, Opera 12.02.1578 and Chrome 24.0.1312.56 under Linux. In fact I'm
using this snippet on this very own blog as well.</p>

<p><strong>Updated on 2013-01-30</strong></p>

<p>Here is another approach proposed by reader Kamen Mazdrashki:</p>

<p>{% codeblock lang:html %}</p>

<script type="text/javascript">
var clean_uri = location.protocol + "//" + location.host + location.pathname;
/*
var hash_pos = location.href.indexOf("#");
if (hash_pos > 0) {
    var hash = location.href.substring(hash_pos, location.href.length);
    clean_uri += hash;
}
*/
window.history.replaceState({}, document.title, clean_uri);
</script>


<p>{% endcodeblock %}</p>

<p>If you'd like to keep the hash tag aka named anchor aka fragment identifier at the end of the URL
then uncomment the commented section.</p>

<p>I've tested removing the hashtag from the URL. Firefox doesn't seem to scroll the page
to where I wanted but your experience may vary. I didn't try hard enough to
verify the results.</p>

<p>One question still remains though: Why would someone point the users to an URL which contains
named anchors and then remove them? I don't see a valid use case for this scenario. Do you?</p>
]]></content>
  </entry>
  
</feed>
