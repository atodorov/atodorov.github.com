<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>atodorov.org</title><link href="http://atodorov.org/" rel="alternate"></link><link href="http://atodorov.org/blog/categories/fedoraplanet/atom.xml" rel="self"></link><id>http://atodorov.org/</id><updated>2018-07-24T09:50:00+03:00</updated><entry><title>Introducing pylint-django 2.0</title><link href="http://atodorov.org/blog/2018/07/24/introducing-pylint-django-20/" rel="alternate"></link><updated>2018-07-24T09:50:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2018-07-24:blog/2018/07/24/introducing-pylint-django-20/</id><summary type="html">&lt;p&gt;Today I have released pylint-django version 2.0 on PyPI.
The changes are centered around compatibility with the latest pylint 2.0 and
astroid 2.0 versions. I've also bumped pylint-django's version number to reflact
that.&lt;/p&gt;
&lt;p&gt;A major component, class transformations, was updated so don't be surprised if
there are bugs. All the existing test cases pass but you never know what sort
of edge case there could be.&lt;/p&gt;
&lt;p&gt;I'm also hosting a workshop/corporate training about writing pylint plugins.
If you are interested see this &lt;a href="http://MrSenko.com/pylint-workshop/"&gt;page&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>Upstream rebuilds with Jenkins Job Builder</title><link href="http://atodorov.org/blog/2018/07/06/upstream-rebuilds-with-jenkins-job-builder/" rel="alternate"></link><updated>2018-07-06T13:20:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2018-07-06:blog/2018/07/06/upstream-rebuilds-with-jenkins-job-builder/</id><summary type="html">&lt;p&gt;I have been working on &lt;a href="http://weldr.io/"&gt;Weldr&lt;/a&gt; for some time now.
It is a multi-component software with several layers built on top of
each other as seen on the image below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Weldr components" src="/images/welder_upstream.png" /&gt;&lt;/p&gt;
&lt;p&gt;One of the risks that we face is introducing changes in
downstream components which are going to break something up the stack!
In this post I am going to show you how I have configured
Jenkins to trigger dependent rebuilds and report all of the statuses
back to the original GitHub PR. All of the code below is Jenkins Job Builder
yaml.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bdcs&lt;/code&gt; is the first layer of our software stack. It provides command line
utilities. &lt;code&gt;codec-rpm&lt;/code&gt; is a library component that facilitates working
with RPM packages (in Haskell). &lt;code&gt;bdcs&lt;/code&gt; links to &lt;code&gt;codec-rpm&lt;/code&gt; when it is compiled,
&lt;code&gt;bdcs&lt;/code&gt; uses some functions and data types from &lt;code&gt;codec-rpm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When a pull request is opened against &lt;code&gt;codec-rpm&lt;/code&gt; and testing completes successfully
I want to reuse that particular version of the &lt;code&gt;codec-rpm&lt;/code&gt; library and
rebuild/test &lt;code&gt;bdcs&lt;/code&gt; with that.&lt;/p&gt;
&lt;h2&gt;YAML configuration&lt;/h2&gt;
&lt;p&gt;All jobs have the following structure: -trigger -&amp;gt; -provision -&amp;gt; -runtest -&amp;gt; -teardown.
This means that Jenkins will start executing a new job when it gets triggered by
an event in GitHub (commit to master branch or new pull request), then it will
provision a slave VM in OpenStack, execute the test suite on the slave and destroy
all of the resources at the end. This is repeated twice: for master branch and for
pull requests! Here's how the -runtest jobs look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;job-template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-provision&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;string&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;PROVIDER&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;scm&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;git&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/weldr/{repo_name}.git&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;refspec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{git_refspec}}&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{git_branch}}&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;builders&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;#!/bin/bash -ex&lt;/span&gt;
            &lt;span class="no"&gt;# do the openstack provisioning here&lt;/span&gt;
        &lt;span class="c1"&gt;# NB: runtest_job is passed to us via the -trigger job&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;trigger-builds&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;${{runtest_job}}&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;block&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;current-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;condition&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;fail-on-missing&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;


&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;job-template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-master-runtest&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cinch-slave&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;project-type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;freestyle&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;master&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branch&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{name}!&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;scm&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;git&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/weldr/{repo_name}.git&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;builders&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;conditional-step&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;condition-kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;regex-match&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;regex&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^.+$&amp;quot;&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;label&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;${{UPSTREAM_BUILD}}&amp;#39;&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;on-evaluation-failure&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;dont-run&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;steps&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;copyartifact&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{UPSTREAM_BUILD}}&lt;/span&gt;
                &lt;span class="l-Scalar-Plain"&gt;which-build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;specific-build&lt;/span&gt;
                &lt;span class="l-Scalar-Plain"&gt;build-number&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{UPSTREAM_BUILD_NUMBER}}&lt;/span&gt;
                &lt;span class="l-Scalar-Plain"&gt;filter&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{UPSTREAM_ARTIFACT}}&lt;/span&gt;
                &lt;span class="l-Scalar-Plain"&gt;flatten&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;#!/bin/bash -ex&lt;/span&gt;
            &lt;span class="no"&gt;make ci&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;publishers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;trigger-parameterized-builds&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-teardown&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;current-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;


&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;job-template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-PR-runtest&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cinch-slave&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;PRs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{name}!&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;scm&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;git&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/weldr/{repo_name}.git&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;refspec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;+refs/pull/*:refs/remotes/origin/pr/*&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# builds the commit hash instead of a branch&lt;/span&gt;
                &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${{ghprbActualCommit}}&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;builders&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;#!/bin/bash -ex&lt;/span&gt;
            &lt;span class="no"&gt;make ci&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;conditional-step&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;condition-kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;current-status&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;condition-worst&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;SUCCESS&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;condition-best&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;SUCCESS&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;on-evaluation-failure&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;dont-run&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;steps&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;shell&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
                &lt;span class="no"&gt;#!/bin/bash -ex&lt;/span&gt;
                &lt;span class="no"&gt;make after_success&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;publishers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;archive&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;artifacts&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{artifacts_path}&amp;#39;&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;allow-empty&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{artifacts_empty}&amp;#39;&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;conditional-publisher&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;condition-kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{execute_dependent_job}&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;on-evaluation-failure&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;dont-run&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;action&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;trigger-parameterized-builds&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{dependent_job}&amp;#39;&lt;/span&gt;
                  &lt;span class="l-Scalar-Plain"&gt;current-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
                  &lt;span class="l-Scalar-Plain"&gt;predefined-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
                    &lt;span class="no"&gt;UPSTREAM_ARTIFACT={artifacts_path}&lt;/span&gt;
                    &lt;span class="no"&gt;UPSTREAM_BUILD=${{JOB_NAME}}&lt;/span&gt;
                    &lt;span class="no"&gt;UPSTREAM_BUILD_NUMBER=${{build_number}}&lt;/span&gt;
                  &lt;span class="l-Scalar-Plain"&gt;condition&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;trigger-parameterized-builds&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-teardown&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;current-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;


&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;job-group&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-tests&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;jobs&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-provision&amp;#39;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-teardown&amp;#39;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-master-trigger&amp;#39;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-master-runtest&amp;#39;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-PR-trigger&amp;#39;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-PR-runtest&amp;#39;&lt;/span&gt;


&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;job&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;codec-rpm-rebuild-bdcs&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;project-type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;freestyle&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;description&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Rebuild&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;bdcs&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;after&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;codec-rpm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;PR!&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;scm&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;git&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/weldr/codec-rpm.git&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;refspec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;+refs/pull/*:refs/remotes/origin/pr/*&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;branches&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# builds the commit hash instead of a branch&lt;/span&gt;
                &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;${ghprbActualCommit}&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;builders&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;trigger-builds&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bdcs-master-trigger&amp;#39;&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;block&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
            &lt;span class="l-Scalar-Plain"&gt;predefined-parameters&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
                &lt;span class="no"&gt;UPSTREAM_ARTIFACT=${UPSTREAM_ARTIFACT}&lt;/span&gt;
                &lt;span class="no"&gt;UPSTREAM_BUILD=${UPSTREAM_BUILD}&lt;/span&gt;
                &lt;span class="no"&gt;UPSTREAM_BUILD_NUMBER=${UPSTREAM_BUILD_NUMBER}&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;publishers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;github-notifier&lt;/span&gt;


&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;project&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;codec-rpm&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;dependent_job&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-rebuild-bdcs&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;execute_dependent_job&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;always&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;artifacts_path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dist/{name}-latest.tar.gz&amp;#39;&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;artifacts_empty&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;false&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;jobs&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{name}-tests&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Publishing artifacts&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;make after_success&lt;/code&gt; is responsible for creating a tarball if &lt;code&gt;codec-rpm&lt;/code&gt; test suite
passed. This tarball gets uploaded as artifact into Jenkins and we can make use of it later!&lt;/p&gt;
&lt;p&gt;Inside -master-runtest I have a &lt;code&gt;conditional-step&lt;/code&gt; inside the &lt;code&gt;builders&lt;/code&gt; section which
will copy the artifacts from the previous build if they are present. Notice that I copy
artifacts for a particular job number, which is the job for codec-rpm PR.&lt;/p&gt;
&lt;p&gt;Making use of local artifacts is handled inside bdcs' &lt;code&gt;make ci&lt;/code&gt; because it is
per-project specific and because I'd like to reuse my YAML templates.&lt;/p&gt;
&lt;h2&gt;Reporting statuses to GitHub&lt;/h2&gt;
&lt;p&gt;For &lt;code&gt;github-notifier&lt;/code&gt; to be able to report statuses back to the pull request
the job needs to be configured with the git repository this pull request came from.
This is done by specifying the same &lt;code&gt;scm&lt;/code&gt; section for all jobs that are related and
&lt;code&gt;current-parameters: true&lt;/code&gt; to pass the revision information to the other jobs.&lt;/p&gt;
&lt;p&gt;This also means that if I want to report status from &lt;code&gt;codec-rpm-rebuild-bdcs&lt;/code&gt; then
it needs to be configured for the &lt;code&gt;codec-rpm&lt;/code&gt; repository (see yaml) but somehow
it should trigger jobs for another repository!&lt;/p&gt;
&lt;p&gt;When jobs are started via &lt;code&gt;trigger-parameterized-builds&lt;/code&gt; their statuses are reported
separately to GitHub. When they are started via &lt;code&gt;trigger-builds&lt;/code&gt; there should be only
one status reported.&lt;/p&gt;
&lt;h2&gt;Trigger chain for dependency rebuilds&lt;/h2&gt;
&lt;p&gt;With all of the above info we can now look at the &lt;code&gt;codec-rpm-rebuild-bdcs&lt;/code&gt; job.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is configured for the codec-rpm repository so it will report its status to the PR&lt;/li&gt;
&lt;li&gt;It is conditionally started after &lt;code&gt;codec-rpm-PR-runtest&lt;/code&gt; finishes successfully&lt;/li&gt;
&lt;li&gt;It triggers &lt;code&gt;bdcs-master-trigger&lt;/code&gt; which in turn will rebuild &amp;amp; retest the bdcs component.
  Additional parameters specify whether we're going to use locally built artifacts or
  attempt to download then from Hackage&lt;/li&gt;
&lt;li&gt;It uses &lt;code&gt;block: true&lt;/code&gt; so that the status of &lt;code&gt;codec-rpm-rebuild-bdcs&lt;/code&gt; is dependent
  on the status of &lt;code&gt;bdcs-master-runtest&lt;/code&gt; (everything in the job chain uses &lt;code&gt;block: true&lt;/code&gt; because of this)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How this looks like in practice&lt;/h2&gt;
&lt;p&gt;I have opened &lt;a href="https://github.com/weldr/codec-rpm/pull/39"&gt;codec-rpm #39&lt;/a&gt;
to validate my configuration. The chain of jobs that gets executed in Jenkins is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- console.log for bdcs-master-runtest ---&lt;/span&gt;
Started by upstream project &amp;quot;bdcs-jslave-1-provision&amp;quot; build number 267
originally caused by:
 Started by upstream project &amp;quot;bdcs-master-trigger&amp;quot; build number 133
 originally caused by:
  Started by upstream project &amp;quot;codec-rpm-rebuild-bdcs&amp;quot; build number 25
  originally caused by:
   Started by upstream project &amp;quot;codec-rpm-PR-runtest&amp;quot; build number 77
   originally caused by:
    Started by upstream project &amp;quot;codec-rpm-jslave-1-provision&amp;quot; build number 178
    originally caused by:
     Started by upstream project &amp;quot;codec-rpm-PR-trigger&amp;quot; build number 118
     originally caused by:
      GitHub pull request #39 of commit b00c923065e367afd5b7a7cc068b049bb1ed25e1, no merge conflicts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Statuses are reported on GitHub as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example of PR statuses" src="/images/codec-rpm-pr-39.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt; is coming from the provisioning step and I think this is some sort of a bug
or misconfiguration of the provisioning job. We don't really care about this.&lt;/p&gt;
&lt;p&gt;On the picture you can see that &lt;code&gt;codec-rpm-PR-runtest&lt;/code&gt; was successful but
&lt;code&gt;codec-rpm-rebuild-bdcs&lt;/code&gt; was not. The actual error when compiling bdcs is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;BDCS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Import&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;RPM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Couldn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;C8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ByteString&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conduit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2.13.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conduit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conduit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConduitM&lt;/span&gt;
                       &lt;span class="n"&gt;C8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ByteString&lt;/span&gt;
                       &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;
                       &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CsMonad&lt;/span&gt;
                       &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;ObjectDigest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conduit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2.13.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conduit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conduit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConduitM&lt;/span&gt;
                       &lt;span class="n"&gt;Entry&lt;/span&gt;
                       &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Void&lt;/span&gt;
                       &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CsMonad&lt;/span&gt;
                       &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;ObjectDigest&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namely&lt;/span&gt;
        &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;getZipConduit&lt;/span&gt;
           &lt;span class="p"&gt;((,)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;digests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namely&lt;/span&gt;
        &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="n"&gt;getZipConduit&lt;/span&gt;
               &lt;span class="p"&gt;((,)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;digests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namely&lt;/span&gt;
        &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;runConduit&lt;/span&gt;
           &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
                 &lt;span class="n"&gt;getZipConduit&lt;/span&gt;
                   &lt;span class="p"&gt;((,)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;digests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;getZipConduit&lt;/span&gt; &lt;span class="p"&gt;((,)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ZipConduit&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt;                        &lt;span class="o"&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is because PR #39 changes the return type of &lt;code&gt;Codec.RPM.Conduit::payloadContentsC&lt;/code&gt;
from &lt;code&gt;Entry&lt;/code&gt; to &lt;code&gt;C8.ByteString&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;social image CC by https://pxhere.com/en/photo/226978&lt;/em&gt;&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Introducing pylint-django 0.8.0</title><link href="http://atodorov.org/blog/2018/01/22/introducing-pylint-django-080/" rel="alternate"></link><updated>2018-01-22T17:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2018-01-22:blog/2018/01/22/introducing-pylint-django-080/</id><summary type="html">&lt;p&gt;Since my previous post was about
&lt;a href="http://atodorov.org/blog/2018/01/05/how-to-write-pylint-checker-plugins/"&gt;writing pylint plugins&lt;/a&gt;
I figured I'd let you know that I've released
&lt;a href="https://github.com/landscapeio/pylint-django"&gt;pylint-django&lt;/a&gt; version 0.8.0
over the weekend. This release merges all pull requests which were
pending till now so make sure to read the change log.&lt;/p&gt;
&lt;p&gt;Starting with this release Colin Howe and myself are the new
maintainers of this package. My immediate goal is to triage all of the
open issue and figure out if they still reproduce. If yes try to
come up with fixes for them or at least get the conversation going again.&lt;/p&gt;
&lt;p&gt;My next goal is to integrate pylint-django with
&lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt; and start resolving all the 4000+
errors and warnings that it produces.&lt;/p&gt;
&lt;p&gt;You are welcome to contribute of course. I'm also interested in hosting a
workshop on the topic of pylint plugins.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>How to write pylint checker plugins</title><link href="http://atodorov.org/blog/2018/01/05/how-to-write-pylint-checker-plugins/" rel="alternate"></link><updated>2018-01-05T13:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2018-01-05:blog/2018/01/05/how-to-write-pylint-checker-plugins/</id><summary type="html">&lt;p&gt;In this post I will walk you through the process of learning how to write
additional checkers for pylint!&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Read
   &lt;a href="https://pylint.readthedocs.io/en/latest/development_guide/contribute.html"&gt;Contributing to pylint&lt;/a&gt;
   to get basic knowledge of how to execute the test suite and how it is structured.
   Basically call &lt;code&gt;tox -e py36&lt;/code&gt;. Verify that all tests &lt;strong&gt;PASS&lt;/strong&gt; locally!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read pylint's
   &lt;a href="https://pylint.readthedocs.io/en/latest/how_tos/index.html"&gt;How To Guides&lt;/a&gt;,
   in particular the section about writing a new checker. A plugin is usually
   a Python module that registers a new checker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most of pylint checkers are AST based, meaning they operate on the
   abstract syntax tree of the source code. You will have to familiarize
   yourself with the AST node reference for the &lt;code&gt;astroid&lt;/code&gt; and &lt;code&gt;ast&lt;/code&gt; modules.
   Pylint uses Astroid for parsing and augmenting the AST.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; there is compact and excellent documentation provided by the
   &lt;em&gt;Green Tree Snakes&lt;/em&gt; project. I would recommend the
   &lt;a href="http://greentreesnakes.readthedocs.io/en/latest/nodes.html"&gt;Meet the Nodes&lt;/a&gt;
   chapter.&lt;/p&gt;
&lt;p&gt;Astroid also provides exhaustive documentation and
   &lt;a href="http://astroid.readthedocs.io/en/latest/api/astroid.nodes.html"&gt;node API reference&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; sometimes Astroid node class names don't match the ones from ast!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your interactive shell weapons are &lt;code&gt;ast.dump()&lt;/code&gt;, &lt;code&gt;ast.parse()&lt;/code&gt;, &lt;code&gt;astroid.parse()&lt;/code&gt; and
   &lt;code&gt;astroid.extract_node()&lt;/code&gt;. I use them inside an interactive Python shell to
   figure out how a piece of source code is parsed and converted back to AST nodes!
   You can also try this
   &lt;a href="https://bitbucket.org/takluyver/greentreesnakes/src/default/astpp.py?fileviewer=file-view-default"&gt;ast node pretty printer&lt;/a&gt;!
   I personally haven't used it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How pylint processes the AST tree&lt;/h2&gt;
&lt;p&gt;Every checker class may include special methods with names
&lt;code&gt;visit_xxx(self, node)&lt;/code&gt; and &lt;code&gt;leave_xxx(self, node)&lt;/code&gt; where xxx is the lowercase
name of the node class (as defined by astroid). These methods are executed
automatically when the parser iterates over nodes of the respective type.&lt;/p&gt;
&lt;p&gt;All of the magic happens inside such methods. They are responsible for collecting
information about the context of specific statements or patterns that you wish to
detect. The hard part is figuring out how to collect all the information you need
because sometimes it can be spread across nodes of several different types (e.g.
more complex code patterns).&lt;/p&gt;
&lt;p&gt;There is a special decorator called &lt;code&gt;@utils.check_messages&lt;/code&gt;. You have to list
all message ids that your &lt;code&gt;visit_&lt;/code&gt; or &lt;code&gt;leave_&lt;/code&gt; method will generate!&lt;/p&gt;
&lt;h2&gt;How to select message codes and IDs&lt;/h2&gt;
&lt;p&gt;One of the most unclear things for me is message codes. pylint
&lt;a href="https://pylint.readthedocs.io/en/latest/how_tos/custom_checkers.html"&gt;docs&lt;/a&gt; say&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The message-id should be a 5-digit number, prefixed with a message category.
There are multiple message categories, these being &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;W&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;,
standing for &lt;code&gt;Convention&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt; and &lt;code&gt;Refactoring&lt;/code&gt;.
The rest of the 5 digits should not conflict with existing checkers and they
should be consistent across the checker. For instance, the first two digits should
not be different across the checker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm usually having troubles with the numbering part so you will have to get creative
or look at existing checker codes.&lt;/p&gt;
&lt;h2&gt;Practical example&lt;/h2&gt;
&lt;p&gt;In &lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt; there's legacy code that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_cases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case_ids&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;trs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestRun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pre_process_ids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_ids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pre_process_ids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_ids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tcs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_case_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the dangling &lt;code&gt;return&lt;/code&gt; statement at the end! It is useless because when missing
the default return value of this function will still be &lt;code&gt;None&lt;/code&gt;. So I've decided to
create a plugin for that.&lt;/p&gt;
&lt;p&gt;Armed with the knowledge above I first try the ast parser in the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;20150623&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;astroid&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;def func():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Module(body=[FunctionDef(name=&amp;#39;func&amp;#39;, args=arguments(args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=None)], decorator_list=[], returns=None)])&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astroid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;def func():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f5b04621b38&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FunctionDef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f5b046219e8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FunctionDef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f5b046219e8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f5b04621c18&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see there is a &lt;code&gt;FunctionDef&lt;/code&gt; node representing the function and it has
a &lt;code&gt;body&lt;/code&gt; attribute which is a list of all statements inside the function. The last
element is &lt;code&gt;.body[-1]&lt;/code&gt; and it is of type &lt;code&gt;Return&lt;/code&gt;! The &lt;code&gt;Return&lt;/code&gt; node also has an
attribute called &lt;code&gt;.value&lt;/code&gt; which is the return value! The complete code will look
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;uselessreturn.py&lt;/span&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;astroid&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;checkers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interfaces&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pylint.checkers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UselessReturnChecker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BaseChecker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__implements__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interfaces&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IAstroidChecker&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;useless-return&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;R2119&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Useless return at end of function or method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;#39;useless-return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;#39;Emitted when a bare return statement is found at the end of &amp;#39;&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;#39;function or method definition&amp;#39;&lt;/span&gt;
                  &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nd"&gt;@utils.check_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;useless-return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_functiondef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;            Checks for presence of return statement at the end of a function&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;quot;return&amp;quot; or &amp;quot;return None&amp;quot; are useless because None is the default&lt;/span&gt;
&lt;span class="sd"&gt;            return type if they are missing&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# if the function has empty body then return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;astroid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# e.g. &amp;quot;return&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;useless-return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# e.g. &amp;quot;return None&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;astroid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;useless-return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;required method to auto register this checker&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;linter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_checker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UselessReturnChecker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's how to execute the new plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./myplugins pylint --load-plugins&lt;span class="o"&gt;=&lt;/span&gt;uselessreturn tcms/xmlrpc/api/testrun.py &lt;span class="p"&gt;|&lt;/span&gt; grep useless-return
W: 40, 0: Useless &lt;span class="k"&gt;return&lt;/span&gt; at end of &lt;span class="k"&gt;function&lt;/span&gt; or method &lt;span class="o"&gt;(&lt;/span&gt;useless-return&lt;span class="o"&gt;)&lt;/span&gt;
W:117, 0: Useless &lt;span class="k"&gt;return&lt;/span&gt; at end of &lt;span class="k"&gt;function&lt;/span&gt; or method &lt;span class="o"&gt;(&lt;/span&gt;useless-return&lt;span class="o"&gt;)&lt;/span&gt;
W:242, 0: Useless &lt;span class="k"&gt;return&lt;/span&gt; at end of &lt;span class="k"&gt;function&lt;/span&gt; or method &lt;span class="o"&gt;(&lt;/span&gt;useless-return&lt;span class="o"&gt;)&lt;/span&gt;
W:495, 0: Useless &lt;span class="k"&gt;return&lt;/span&gt; at end of &lt;span class="k"&gt;function&lt;/span&gt; or method &lt;span class="o"&gt;(&lt;/span&gt;useless-return&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTES:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you contribute this code upstream and pylint releases it you will get a traceback:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pylint.exceptions.InvalidMessageError: Message symbol &amp;#39;useless-return&amp;#39; is already defined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this means your checker has been released in the latest version and you can drop the custom
plugin!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is example is fairly simple because the AST tree provides the information we
  need in a very handy way. Take a look at some of
  &lt;a href="https://github.com/PyCQA/pylint/pulls/atodorov"&gt;my other checkers&lt;/a&gt; to get a feeling
  of what a more complex checker looks like!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write and run tests for your new checkers, especially if contributing upstream.
  Have in mind that the new checker will be executed against existing code and in
  combination with other checkers which could lead to some interesting results.
  I will leave the testing to yourself, all is written in the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This particular example I've contributed as
&lt;a href="https://github.com/PyCQA/pylint/pull/1821"&gt;PR #1821&lt;/a&gt; which happened to contradict
an existing checker. The update, raising warnings only when there's a single return
statement in the function body, is &lt;a href="https://github.com/PyCQA/pylint/pull/1823"&gt;PR #1823&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Workshop around the corner&lt;/h2&gt;
&lt;p&gt;I will be working together with &lt;a href="http://hacksoft.io"&gt;HackSoft&lt;/a&gt; on an in-house
workshop/training for writing pylint plugins. I'm also looking at reviving
&lt;a href="https://github.com/landscapeio/pylint-django/"&gt;pylint-django&lt;/a&gt; so we can
write more plugins specifically for Django based projects.&lt;/p&gt;
&lt;p&gt;If you are interested in workshop and training on the topic let me know!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>On Pytest-django and LiveServerTestCase with initial data</title><link href="http://atodorov.org/blog/2017/12/26/on-pytest-django-and-liveservertestcase-with-initial-data/" rel="alternate"></link><updated>2017-12-26T11:20:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-12-26:blog/2017/12/26/on-pytest-django-and-liveservertestcase-with-initial-data/</id><summary type="html">&lt;p&gt;While working on &lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt; I've had the opportunity to
learn in-depth about how the standard test case classes in Django work. This
is a quick post about creating initial data and order of execution!&lt;/p&gt;
&lt;h2&gt;Initial test data for TransactionTestCase or LiveServerTestCase&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;class LiveServerTestCase(TransactionTestCase)&lt;/code&gt;, as the name suggests, provides a running
Django instance during testing. We use that for Kiwi's XML-RPC API tests, issuing
http requests against the live server instance and examining the responses!
For testing to work we also need some initial data. There are few key items
that need to be taken into account to accomplish that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self._fixture_teardown()&lt;/code&gt; - performs &lt;code&gt;./manage.py flush&lt;/code&gt; which
  deletes all records from the database, including the ones created during initial
  migrations;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.serialized_rollback&lt;/code&gt; - when set to True will serialize initial
  records from the database into a string and then load this back. Required if
  subsequent tests need to have access to the records created during migrations!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cls.setUpTestData&lt;/code&gt; is an attribute of &lt;code&gt;class TestCase(TransactionTestCase)&lt;/code&gt; and hence
  can't be used to create records before any transaction based test case is executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self._fixture_setup()&lt;/code&gt; is where the serialized rollback happens, thus it can
  be used to create initial data for your tests!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Kiwi TCMS all XML-RPC test classes have &lt;code&gt;serialized_rollback = True&lt;/code&gt; and
implement a &lt;code&gt;_fixture_setup()&lt;/code&gt; method instead of &lt;code&gt;setUpTestData()&lt;/code&gt; to create the
necessary records before testing!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; you can also use fixtures in the above scenario but I don't like using them
and we've deleted all fixtures from Kiwi TCMS a long time ago so I didn't feel like
going back to that!&lt;/p&gt;
&lt;h2&gt;Order of test execution&lt;/h2&gt;
&lt;p&gt;From
&lt;a href="https://docs.djangoproject.com/en/2.0/topics/testing/overview/#order-in-which-tests-are-executed"&gt;Django's docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to guarantee that all TestCase code starts with a clean database, the Django test runner reorders
tests in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All TestCase subclasses are run first.&lt;/li&gt;
&lt;li&gt;Then, all other Django-based tests (test cases based on SimpleTestCase, including TransactionTestCase) are run
  with no particular ordering guaranteed nor enforced among them.&lt;/li&gt;
&lt;li&gt;Then any other unittest.TestCase tests (including doctests) that may alter the database without restoring it to
  its original state are run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is not of much concern most of the time but becomes important when you decide
to mix and match transaction and non-transaction based tests into one test suite.
As seen in &lt;a href="https://travis-ci.org/kiwitcms/Kiwi/jobs/321018491"&gt;Job #471.1&lt;/a&gt;
&lt;code&gt;tcms/xmlrpc/tests/test_serializer.py&lt;/code&gt; tests errored out! If you execute these tests
standalone they all pass! The root cause is that these serializer tests are based on
Django's &lt;code&gt;test.TestCase&lt;/code&gt; class and are executed after a &lt;code&gt;test.LiveServerTestCase&lt;/code&gt; class!&lt;/p&gt;
&lt;p&gt;The tests in &lt;code&gt;tcms/xmlrpc/tests/test_product.py&lt;/code&gt; will flush the database, removing all
records, including the ones from initial migrations. Then when &lt;code&gt;test_serializer.py&lt;/code&gt; is
executed it will call its factories which in turn rely on initial records being available
and produces an error because these records have been deleted!&lt;/p&gt;
&lt;p&gt;The reason for this is that &lt;strong&gt;pytest doesn't respect the order of execution for Django tests&lt;/strong&gt;!
As seen
in the build log above tests are executed in the order in which they were discovered!
My solution was not to use pytest (I don't need it for anything else)!&lt;/p&gt;
&lt;p&gt;At the moment I'm dealing with strange errors/segmentation faults when running Kiwi's tests
under Django 2.0. It looks like the http response has been closed before the client side
tries to read it. Why this happens I have not been able to figure out yet. Expect another
blog post when I do.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="Django"></category></entry><entry><title>How to configure MTU for the Docker network</title><link href="http://atodorov.org/blog/2017/12/08/how-to-configure-mtu-for-the-docker-network/" rel="alternate"></link><updated>2017-12-08T16:02:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-12-08:blog/2017/12/08/how-to-configure-mtu-for-the-docker-network/</id><summary type="html">&lt;p&gt;On one of my Jenkins slaves I've been experiencing problems when downloading
files from the network. In particular with &lt;code&gt;cabal update&lt;/code&gt; which fetches data
from hackage.haskell.org. As suggested by David Roble the problem and solution
lies in the MTU configured for the default &lt;code&gt;docker0&lt;/code&gt; interface!&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;docker0&lt;/code&gt; had MTU of &lt;code&gt;1500&lt;/code&gt; which should be lower than the
host &lt;code&gt;eth0&lt;/code&gt; MTU of 1400! To configure this before the docker daemon is started
place any non-default settings in &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;! For more information
head to
&lt;a href="https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/"&gt;https://docs.docker.com/engine/userguide/networking/default_network/custom-docker0/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>4 Situational Leadership Styles</title><link href="http://atodorov.org/blog/2017/11/11/4-situational-leadership-styles/" rel="alternate"></link><updated>2017-11-11T01:22:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-11-11:blog/2017/11/11/4-situational-leadership-styles/</id><summary type="html">&lt;p&gt;At &lt;a href="http://seetest.org"&gt;SEETEST&lt;/a&gt; this year I visited only tracks related to
management and leadership. The presentation
&lt;em&gt;How good leadership makes you a great team player&lt;/em&gt; by Jeroen Rosink
was of particular interest to me. He talked about
&lt;a href="https://en.wikipedia.org/wiki/Situational_leadership_theory"&gt;situational leadership&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Leadership styles" src="/images/situational_leadership_styles_big.png" title="Leadership styles" /&gt;
&lt;em&gt;Image by Penn State University&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;According to Hersey &amp;amp; Blanchard each situation/person is different and it requires
a leader or manager to adjust their style in order to be successful. In particular
as a leader you have to approach each team, person and skill differently based on how
developed they are. In this context a skill can be any technical or non-technical
skill, a particular competence level required or anything really. The idea is that
for ever item that we would like to develop we would go through the cycle shown
on the image above.&lt;/p&gt;
&lt;h2&gt;Directing&lt;/h2&gt;
&lt;p&gt;Every new employee, team member, junior IT specialist starts with some directing.
This is the phase where you tell people what they have to do and how to do it
exactly. This is the phase of the almighty boss who provides the what, how,
why, when and where!&lt;/p&gt;
&lt;p&gt;In this phase an inexperienced(or new) person will figure out what is required
of them and give them detailed steps of how to achieve it.
Experienced team members will quickly find their bearings and transition out
of this phase.&lt;/p&gt;
&lt;h2&gt;Coaching&lt;/h2&gt;
&lt;p&gt;In this phase the individual has already acquired some skills but they are not
fully developed. In addition to tasks here we also focus at supporting the individual to improve
their skills and deepen the connection and trust between them and the leader. This
is the basis of creating strong commitment in the future.&lt;/p&gt;
&lt;p&gt;Think about coaches of sport teams. What they do is give direction in order to
create the best players/teams.&lt;/p&gt;
&lt;h2&gt;Supporting&lt;/h2&gt;
&lt;p&gt;This phase comes naturally after coaching. Here we can also make the parallel with
sport teams. In this phase team members are already competent in their skills but
somewhat inconsistent in their performance and not very committed to the
end goal of the team (e.g. winning, testing all bugs, delivering software on time).&lt;/p&gt;
&lt;p&gt;This is the phase in which
shared decisions are taken (what to test, how we should test, how to split the
tasks between team members) and in which teams are formed.
Here a leader must focus less on the particular tasks and much more on the
relationships within the group (don't forget the leader is also part of the group).&lt;/p&gt;
&lt;h2&gt;Delegating&lt;/h2&gt;
&lt;p&gt;This is the end phase in which we have individuals with strong skills and strong
commitment. They are able to work and progress on their own. The job of the leader
here is to monitor progress and still be part of some decisions. What I've seen
people who I believe were delegating do is mostly
reaffirm the decisions taken by the team.&lt;/p&gt;
&lt;p&gt;In this phase there's no need for the leader to focus on tasks and relationship
but rather high level goals and IMO providing opportunities for growth of
each individual team member. This is the phase where future leaders will come from.&lt;/p&gt;
&lt;h2&gt;What that means for the team ?&lt;/h2&gt;
&lt;p&gt;Notice the smaller section in the image above titled &lt;em&gt;Development Level&lt;/em&gt;!
While an individual or a team is going through the different phases of
leadership they also go through various stages of development. At the end
of the cycle we get individuals with very strong skills and very strong
commitment and work ethics.&lt;/p&gt;
&lt;h2&gt;What that means for the leader ?&lt;/h2&gt;
&lt;p&gt;(stats from presentation at the conference)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;54% of leaders can use only 1 style&lt;/li&gt;
&lt;li&gt;34% of leaders can use 2 styles&lt;/li&gt;
&lt;li&gt;11% of leaders can use 3 styles&lt;/li&gt;
&lt;li&gt;1% of leaders can use 4 styles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means as leaders we have a lot to learn if we want to become effective.
We have to learn to recognize at what stage of development an organization and/or
a team is and what are the various stages of development of individual team members.
Then apply this model as appropriate.&lt;/p&gt;
&lt;p&gt;A side note: I am currently working with a group of young developers on an open source
project where all of them are pretty much at the beginning of their journey. They
lack almost all necessary technical skills that are needed to work on the project
and their profiles, including age are very similar to one another. I believe this is
an ideal situation to apply this model and see how it goes (expect results in a year or so).&lt;/p&gt;
&lt;p&gt;Note2: I will have 2 more developers joining the same project a bit later and I expect
one of them to be able to get up to speed faster (so far I have observed very
impressive self-development in them) so that will spice things up a bit :)&lt;/p&gt;
&lt;h2&gt;Bonus question&lt;/h2&gt;
&lt;p&gt;Do you remember
&lt;a href="http://atodorov.org/blog/2016/10/09/the-4-basic-communication-styles/"&gt;The 4 Basic Communication Styles&lt;/a&gt;
post from last year? I have the feeling that these styles are very much related
to the leadership strategies described above. For example Director is using the directing style,
Expresser sounds a lot like a coach to me and Harmonizer is using the supporting style.
Only a Thinker doesn't quite fit but on the other hand they can be quite self-driven
and not need supervision.&lt;/p&gt;
&lt;p&gt;I don't know if there's something here or I'm totally making things up. I'd love to
get some insights from psychologists, leadership experts and communication experts.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;Here are a few basic articles to get you started&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://online.stu.edu/situational-leadership/"&gt;https://online.stu.edu/situational-leadership/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://johnkwhitehead.ca/situational-leadership/"&gt;https://johnkwhitehead.ca/situational-leadership/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.leadership-central.com/situational-leadership-theory.html#axzz4y4I4vrZ7"&gt;http://www.leadership-central.com/situational-leadership-theory.html#axzz4y4I4vrZ7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and happy testing (your leaderhip skills)!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>Fallback to default values for NULL columns in Rust SQLite</title><link href="http://atodorov.org/blog/2017/10/27/fallback-to-default-values-for-null-columns-in-rust-sqlite/" rel="alternate"></link><updated>2017-10-27T16:12:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-10-27:blog/2017/10/27/fallback-to-default-values-for-null-columns-in-rust-sqlite/</id><summary type="html">&lt;p&gt;I have been working on code which changed its DB schema to add a NULL column
without a default value! The standard &lt;code&gt;row.get()&lt;/code&gt; from Rusqlite throws errors
because NULL is not a valid integer value.&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;code&gt;row.get_checked()&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_checked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interestingly enough I wasn't able to find clear information about this on the
Internet so here it is.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy hacking!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>The ARCS model of motivational design</title><link href="http://atodorov.org/blog/2017/10/05/the-arcs-model-of-motivational-design/" rel="alternate"></link><updated>2017-10-05T10:40:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-10-05:blog/2017/10/05/the-arcs-model-of-motivational-design/</id><summary type="html">&lt;p&gt;&lt;img alt="Motivation" src="/images/motivation.jpg" title="Motivation" /&gt;&lt;/p&gt;
&lt;p&gt;The ARCS model is an instructional design method developed by John Keller
that focuses on motivation. ARCS is based on a research into best practices
and successful teachers and gives you tactics on how to evaluate your
lessons in order to build motivation right into them.&lt;/p&gt;
&lt;p&gt;I have conducted and oversaw quite a few trainings and I have not been impressed
with the success rate of those so this topic is very dear to me.
Success for me measures in the ability to complete the training and
learn the basis of a technical topic. And then gather the initial
momentum to continue developing your skills within the chosen field.
This is what I've been doing for myself and this is what I'd like to
see my students do.&lt;/p&gt;
&lt;p&gt;In his paper (I have a year 2000 printed copy from Cuba)
Keller argues that motivation is a product of four factors:
&lt;strong&gt;Attention, Relevance, Confidence and Satisfaction&lt;/strong&gt;. You need all of them
incorporated in your lessons and learning materials for them to be motivational.
I could argue that you need the same characteristics at work in order to
motivate people to do their job as you wish.&lt;/p&gt;
&lt;p&gt;Once you start a lesson you need to grab the audience &lt;strong&gt;Attention&lt;/strong&gt; so they
can listen to you. Then the topic needs to be &lt;strong&gt;relevant&lt;/strong&gt; to the audience
so they will continue listening to the end. This makes for a good start
but is not enough. &lt;strong&gt;Confidence&lt;/strong&gt; means for the audience to feel confident
they can perform all the necessary tasks on their own, that they have
what it takes to learn (and you have to build that). If they think they
can't make it from the start then it is a lost battle. And &lt;strong&gt;Satisfaction&lt;/strong&gt;
means the person feels that achievements are due to their own abilities and
hard work not due to external factors (work not demanding enough, luck, etc).&lt;/p&gt;
&lt;p&gt;If all of the above 4 factors are true then the audience should feel
personally motivated to learn because they can clearly understand the
benefit for themselves and they realize that everything depends on them.&lt;/p&gt;
&lt;p&gt;ARCS gives you a model to evaluate your target audience and lesson properties
and figure out tactics by which to address any shortcomings in the above 4 areas.&lt;/p&gt;
&lt;p&gt;Last Friday I hosted 2 training sessions: a Python and Selenium workshop
at HackConf and then a lecture about test case management and demo of
&lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt; before students at Pragmatic IT academy.
For both of them I used the simplified ARCS evaluation matrix.&lt;/p&gt;
&lt;p&gt;In this matrix the columns map to the ARCS areas while the rows map to
different parts of the lesson: audience, presentation media, exercise, etc.
Here's how I used them (I've mostly analyzed the audience).&lt;/p&gt;
&lt;h2&gt;Python &amp;amp; Selenium workshop&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Attention&lt;ul&gt;
&lt;li&gt;(+) this is an elective workshop&lt;/li&gt;
&lt;li&gt;(+) the topic is clear and the curricula is on GitHub&lt;/li&gt;
&lt;li&gt;(+) the title is catchy (Learn Python &amp;amp; Selenium in 6 hours)&lt;/li&gt;
&lt;li&gt;(+) I am well known in the industry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relevance&lt;ul&gt;
&lt;li&gt;(+) Basic Python practical skills, being able to write small programs,
  knowing the basic building blocks&lt;/li&gt;
&lt;li&gt;(+) Basic Selenium skills: finding and using elements&lt;/li&gt;
&lt;li&gt;(+) Basic Python test automation skills: writing simple tests and asserts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidence&lt;ul&gt;
&lt;li&gt;(+) each task has tests which need to report PASS at the end&lt;/li&gt;
&lt;li&gt;(-) need to use PyCharm IDE, unfamiliar with IDEs&lt;/li&gt;
&lt;li&gt;(-) not enough experience with programming or Linux&lt;/li&gt;
&lt;li&gt;(-) not enough experience with (automation) testing&lt;/li&gt;
&lt;li&gt;(-) all materials and exercises are in English&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Satisfaction&lt;ul&gt;
&lt;li&gt;(-) not being able to create a simple program&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the above it was clear that I didn't need to spend much time on building
attention or relevance. The topic itself and the fact that these are skill which
can be immediately applied at work gave the workshop a huge boost. During the
opening part of my workshop I've stated "this training takes around 2 months,
I've seen some of you forking my GitHub repo so I know you are prepared. Let's
see how much you can do in 6 hours" which sets the challenge and was my attention
building moment. Then I reiterated that all skills are directly applicable in
daily work confirming the relevance part.&lt;/p&gt;
&lt;p&gt;I did need a confidence building strategy though. So having all the tests ready
meant evaluation was quick and easy. Anton (my assistant) and I promised to help
with the IDE and all other questions to counter the other items on the list.
During the course of the workshop I did quick code review of all participants
that managed to complete their tasks within the hour giving them quick tips on
how to perform or highlighting pieces of code/approaches that were different
from mine or that I found elegant or interesting. This was my confidence building
strategy. Code review and verbal praising also touches on the satisfaction
area, i.e. the participant gets the feeling they are doing well.&lt;/p&gt;
&lt;p&gt;My Satisfaction building strategy was kind of mixed. Before I read about ARCS
I wanted to give penalty points to participants who didn't complete on time and then
send them home after 3 fails. At the end I only said I will do this but didn't
do it.&lt;/p&gt;
&lt;p&gt;Instead I used the challenge statement from the attention phase and
turned that into a competition. The first 3 participants to complete their module tasks on time
were rewarded chocolates. With the agreement of the entire group the grand prize
was set to be a small box of the same chocolates and this would be awarded to
the person with the most chocolates (e.g. the one who's been in top 3 the most times).&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Bistra is our winner. 4/5 times in top 3 &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Selenium?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Selenium&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/testing?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#testing&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/HC17?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#HC17&lt;/a&gt; &lt;a href="https://t.co/vXrPhElbbW"&gt;pic.twitter.com/vXrPhElbbW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexander Todorov (@atodorov_) &lt;a href="https://twitter.com/atodorov_/status/913787872032980993?ref_src=twsrc%5Etfw"&gt;September 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I don't know if ARCS had anything to do with it but this workshop
was the most successful training I've ever done. 40% of the participants
managed to get at least one chocolate and at least 50% have completed all of
their tasks within the hour. Normally a passing rate on such training is
around 10 to 20 %.&lt;/p&gt;
&lt;p&gt;During the workshop we had 5 different modules which consisted of 10-15 minutes
explanation of Python basics (e.g. loops or if conditions), quick Q&amp;amp;A session
and around 30 minutes for working alone and code review. I don't think I was following
ARCS for each of the separate modules because I didn't have time to analyze them
individually. I gambled all my money on the introductory 10 minutes!&lt;/p&gt;
&lt;h2&gt;TCMS lecture&lt;/h2&gt;
&lt;p&gt;My second lecture for the day was about test case management. The audience was
students who are aspiring to become software testers and attending the
Software Testing training at Pragmatic. In my lecture (around 1 hour) I wanted
to explain what test management is, why it is important and also demo the
tool I'm working on - &lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt;. The analysis looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attention&lt;ul&gt;
&lt;li&gt;(+) the entire training was elective but&lt;/li&gt;
&lt;li&gt;(-) that particular lecture was mandatory. Students were not able to select
      what they are going to study&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relevance&lt;ul&gt;
&lt;li&gt;(-) it may not be clear what TCMS is and why we need it&lt;/li&gt;
&lt;li&gt;(+) however students may sense that this is something work related since
      the entire training is&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidence&lt;ul&gt;
&lt;li&gt;(-) unknown UI, generally unfamiliar workflow&lt;/li&gt;
&lt;li&gt;(-) not enough knowledge how to write a Test Plan document or test cases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Satisfaction&lt;ul&gt;
&lt;li&gt;(-) how to make sure new skills can be applied in practice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I was in a medium need of a strategy to build attention. My opening was by introducing
myself to establish my professional level and introducing &lt;a href="http://kiwitcms.org"&gt;Kiwi TCMS&lt;/a&gt;
by saying it is the best open source test case management system to which I'm one of the
core maintainers.&lt;/p&gt;
&lt;p&gt;Then I had a medium need of a relevance building strategy. I did this by explaining what
test management is and why it is important. I've talked briefly about QA managers trying to
indirectly inspire the audience to aim for this position. I finished this part by telling
the students how a TCMS system helps the ordinary guy in their daily work - namely by
giving you a dashboard where you can monitor all the work you need to do, check your
progress, etc.&lt;/p&gt;
&lt;p&gt;I was in a strong need to build confidence. I did a 20-30 minutes demonstration where
I was writing a Test Plan and test cases and then pretending to execute them and marking bugs
and test results in the system. I told the students "you are my boss for today, tell me what
I need to test". So they instructed me to test the login functionality of the system
and we agreed on 5 different test cases. I described all of these into Kiwi TCMS and began
executing them. During execution I opened another browser window and did exactly what the
test case steps were asking for. There were some bugs so I promptly marked them as such and
I promised I will fix them.&lt;/p&gt;
&lt;p&gt;To build satisfaction I was planning on having the students write one test plan and some
test cases but we didn't have time for this. Their instructor promised they will be doing
more exercises and using Kiwi TCMS in the next 2 months but this remains to be seen.
I've wrapped my lecture by giving advise to use Kiwi TCMS as a portfolio building tool.
Since these students are newcomers to the QA industry their next priority will be looking
for a job. I've advised them to document their test plans and test cases into Kiwi TCMS
and then present these artifacts to future employers.
I've also told them they are more than welcome to test and report bugs against Kiwi TCMS
on GitHub and add these bugs to their portfolio!&lt;/p&gt;
&lt;p&gt;This is how I've applied ARCS for the first time. I like it and will continue to use it for
my trainings and workshops. I will try harder to make the application process more iterative
and apply the method not only to my opening speech but for all submodules as well!&lt;/p&gt;
&lt;p&gt;One thing that bothers me is can I apply the ARCS principles when doing a technical
presentation and how do they play together or clash with storytelling, communication style and
rhetoric (all topics I'm exploring for my public speaking). If you do have more experience
with these please share it in the comments below.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Storytelling for test professionals</title><link href="http://atodorov.org/blog/2017/10/03/storytelling-for-test-professionals/" rel="alternate"></link><updated>2017-10-03T15:06:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-10-03:blog/2017/10/03/storytelling-for-test-professionals/</id><summary type="html">&lt;p&gt;This is a very condensed brief of an 8 hour workshop I visited
earlier this year held by Huib Schoots. You can find the
&lt;a href="https://www.dropbox.com/s/b2si3swfthtwtpi/Workshop%20Storytelling%20-%20RTC%202017%20-%20Huib%20Schoots.pdf?dl=1"&gt;slides here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Storytelling is the form in which people naturally communicate.
Understanding the building blocks of a story will help us
understand other people's motivations, serve as map for actions and emotions,
help uncover unknown perspectives and serve as source for inspiration.&lt;/p&gt;
&lt;p&gt;Stories stand on their own and have a beginning, middle and an end. There is a
main character and a storyline with development. Stories are authentic and
personal and often provocative and evoke emotions.&lt;/p&gt;
&lt;h2&gt;7 basic story plots&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Overcoming the Monster&lt;/li&gt;
&lt;li&gt;Rags to Riches&lt;/li&gt;
&lt;li&gt;The Quest&lt;/li&gt;
&lt;li&gt;Voyage and return&lt;/li&gt;
&lt;li&gt;Comedy&lt;/li&gt;
&lt;li&gt;Tragedy&lt;/li&gt;
&lt;li&gt;Rebirth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From these we can derive the following
&lt;a href="http://annettesimmons.com/the-six-kinds-of-stories/"&gt;types of stories&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;6 types of stories&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Who am I (identity stories)&lt;/li&gt;
&lt;li&gt;Why am I here (motive and mission stories)&lt;/li&gt;
&lt;li&gt;Vision stories (the big picture)&lt;/li&gt;
&lt;li&gt;Future scenarios (imagining the future)&lt;/li&gt;
&lt;li&gt;Product stories (branding)&lt;/li&gt;
&lt;li&gt;Culture stories (a sum of other stories)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;12 Common Archetypes&lt;/h2&gt;
&lt;p&gt;Each story needs a hero and there are
&lt;a href="http://www.soulcraft.co/essays/the_12_common_archetypes.html"&gt;12 common archetypes&lt;/a&gt;
of heroes. More importantly you can also find these archetypes within your team and
organization. Read the link above to find out what their motto, core desire, goals,
fears and motives are. The 12 types are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Innocent&lt;/li&gt;
&lt;li&gt;Everyman&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Caregiver&lt;/li&gt;
&lt;li&gt;Explorer&lt;/li&gt;
&lt;li&gt;Rebel&lt;/li&gt;
&lt;li&gt;Lover&lt;/li&gt;
&lt;li&gt;Creator&lt;/li&gt;
&lt;li&gt;Jester&lt;/li&gt;
&lt;li&gt;Sage&lt;/li&gt;
&lt;li&gt;Magician&lt;/li&gt;
&lt;li&gt;Ruler&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6 key elements of a story&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Who's the hero?&lt;/li&gt;
&lt;li&gt;What is their desire?&lt;/li&gt;
&lt;li&gt;What is stopping them?&lt;/li&gt;
&lt;li&gt;What is the turning point?&lt;/li&gt;
&lt;li&gt;What are their insights?&lt;/li&gt;
&lt;li&gt;What is the solution?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Dramatic structure and Freytag's pyramid&lt;/h2&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Freytag's pyramid&amp;quot;" src="https://upload.wikimedia.org/wikipedia/commons/a/af/Freytags_pyramid.svg" title="Freytag's pyramid" /&gt;&lt;/p&gt;
&lt;p&gt;One of the most commonly used storytelling structures is the Freytag's Pyramid.
According to it each story has an exposition, rising action, climax, falling action
and resolution. I think this can be applied directly when preparing presentations
even technical ones.&lt;/p&gt;
&lt;h2&gt;The Hero's journey&lt;/h2&gt;
&lt;p&gt;Successful stories follow the 12 steps of the hero's journey&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ordinary world&lt;/li&gt;
&lt;li&gt;Call to adventure&lt;/li&gt;
&lt;li&gt;Refusal of the Call&lt;/li&gt;
&lt;li&gt;Meeting the mentor&lt;/li&gt;
&lt;li&gt;Crossing the threshold (after which the hero enters the Special world)&lt;/li&gt;
&lt;li&gt;Tests, allies and enemies&lt;/li&gt;
&lt;li&gt;Approach&lt;/li&gt;
&lt;li&gt;Ordeal, death &amp;amp; rebirth&lt;/li&gt;
&lt;li&gt;Rewards, seizing the sword&lt;/li&gt;
&lt;li&gt;The road back (to the ordinary world)&lt;/li&gt;
&lt;li&gt;Resurrection&lt;/li&gt;
&lt;li&gt;Return with elixir&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As part of the workshop we worked in groups and created a completely made up
story. Every person in the group was contributing couple of sentences from
their own experiences, trying to describe the particular step in the hero's journey.
At the end we told a story from the point of view of a single hero which was
a complete mash-up of moments that had nothing to do with each other. Still it
sounded very realistic and plausible.&lt;/p&gt;
&lt;h2&gt;Storytelling techniques&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://booksinbusiness.wordpress.com/2013/04/30/make-your-story-sticky-using-6-principles-s-u-c-c-e-s/"&gt;SUCCESS&lt;/a&gt;
means Simple, Unexpected, Concrete, Credible, Emotional, Stories. To use this
technique find the core of your idea, grab people's attention by
surprising them and make sure the idea can be understood and remembered later.
Find a way to make people believe in the idea so they can test it for themselves,
make them feel something to understand why this idea is important. Tell stories and
empower people to use an idea through narrative.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tweakyourslides.wordpress.com/tag/something-theyll-always-remember/"&gt;STAR&lt;/a&gt; means
Something They will Always Remember. A STAR Moment should be
Simple, Transferable, Audience-centered, Repeatable, and Meaningful.
There are
&lt;a href="http://www.wiley.com/legacy/email_templates/images/resonate.pdf"&gt;5 types of STAR moments&lt;/a&gt;:
memorable dramatization, repeatable sound bites, evocative visuals,
emotive storytelling, shocking statistics.&lt;/p&gt;
&lt;p&gt;To enhance our stories and presentations we should appeal to senses
(smell, sounds, sight, touch, taste) and make it visual.&lt;/p&gt;
&lt;p&gt;I will be using some of these techniques combined with others in my future
presentations and workshops. I'd love to be able to summarize all of them
into a short guide targeted at IT professionals but I don't know if this
is even possible.&lt;/p&gt;
&lt;p&gt;Anyway if you do try some of these techniques in your public speaking please
let me know how it goes. I want to hear what works for you and your audience
and what doesn't.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>More tests for login forms</title><link href="http://atodorov.org/blog/2017/10/02/more-tests-for-login-forms/" rel="alternate"></link><updated>2017-10-02T15:06:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-10-02:blog/2017/10/02/more-tests-for-login-forms/</id><summary type="html">&lt;p&gt;&lt;img alt="&amp;quot;Telenor's login form&amp;quot;" src="/images/telenor_login.png" title="Telenor's login form" /&gt;&lt;/p&gt;
&lt;p&gt;By now I probably have documented more test cases for login forms than anyone
else. You can check out my previous posts on the topic
&lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;here&lt;/a&gt; and
&lt;a href="http://atodorov.org/blog/2017/06/14/vmwares-favorite-login-form/"&gt;here&lt;/a&gt;. I give you a few more
examples.&lt;/p&gt;
&lt;p&gt;Test 01 and 02:
First of all let's start by saying that a "Remember me" checkbox should actually
remember the user and login them automatically on the next visit if checked. The
other way around if not checked. I don't think this has been mentioned previously!&lt;/p&gt;
&lt;p&gt;Test 03:
When there is a "Remember me" checkbox it should be selectable both with the mouse
and the keyboard. On my.telenor.bg the checkbox changes its image only when
clicked with the mouse. Also clicking the login button with Space doesn't work!&lt;/p&gt;
&lt;p&gt;Interestingly enough when I don't select "Remember me" at all and close then
revisit the page I am still able to access the internal pages of my account!
At this point I'm not quite sure what this checkbox does!&lt;/p&gt;
&lt;p&gt;Test 04:
Testing two factor authentication. I had the case where GitHub SMS didn't
arrive for over 24 hrs and I wasn't able to login. After requesting a new code
you can see the UI updating but I didn't receive another message. In this particular
case I received only one message with an already invalid code. So test for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how long does it take for the codes to expire&lt;/li&gt;
&lt;li&gt;is there a visual feedback indicating how many codes have been requested&lt;/li&gt;
&lt;li&gt;do latest code invalidates all the previous ones or all that have been unused
  still work&lt;/li&gt;
&lt;li&gt;what happens if I'm already logged in and somebody tries to access my account
  requesting additional codes which may or may not invalidate my login session?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test 05:
Check that confirmation codes, links, etc will actually expire after their
configured time. Kiwi TCMS had this problem which has been fixed in
&lt;a href="https://github.com/kiwitcms/Kiwi/commit/92162112bf2214b8eacf37ba3a796414b129a700#diff-353aa238f7ee459b1236e2a21f1142ba"&gt;version 3.32&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Test 06:
Is this a social-network-login only site? Then which of my profiles did I use?
Check that there is a working
&lt;a href="http://atodorov.org/blog/2013/03/14/django-social-auth-tip-reminder-of-login-provider/"&gt;social auth provider reminder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Test 07:
Check that there is an error message visible (e.g. wrong login credentials).
After the redesign Kiwi TCMS had stopped displaying this message and instead
presents the user with the login form again!&lt;/p&gt;
&lt;p&gt;Also checkout these
&lt;a href="http://testingchallenges.thetestingmap.org/index.php"&gt;testing challenges&lt;/a&gt;
by Claudiu Draghia where you can see many cases related to input field
validation! For example empty field, value too long, special characters in field, etc.
All of these can lead to issues depending on how login is implemented.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Xiaomi's selfie bug</title><link href="http://atodorov.org/blog/2017/09/08/xiaomis-selfie-bug/" rel="alternate"></link><updated>2017-09-08T09:50:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-09-08:blog/2017/09/08/xiaomis-selfie-bug/</id><summary type="html">&lt;p&gt;Recently I've been exploring the user interface of a Xiaomi Redmi Note 4X
phone and noticed a peculiar bug, adding to my collection of
&lt;a href="http://atodorov.org/blog/2013/03/19/bug-in-nokia-software-shows-wrong-caller-id/"&gt;obscure phone bugs&lt;/a&gt;.
Sometimes when taking selfies the images
will not be saved in the correct orientation. Instead they will be saved as
if looking in the mirror and this is a bug!&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Samsung S5 front screen&amp;quot;" src="/images/samsung_s5_front_screen.jpg" title="Samsung S5 front screen" /&gt;&lt;/p&gt;
&lt;p&gt;While taking the selfie the display correctly acts as a mirror, see my personal
Samsung S5 (black) and the Xiaomi device (white).&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Xiaomi front screen&amp;quot;" src="/images/xiaomi_front_screen.jpg" title="Xiaomi front screen" /&gt;&lt;/p&gt;
&lt;p&gt;However when the image is saved and then viewed through the gallery application
there is a difference. The image below is taken with the Xiaomi device and there
have been no effects added to it except scaling and cropping. As you can see
the letters on the cereal box are mirrored!&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Xiaomi mirrored image&amp;quot;" src="/images/xiaomi_adi_mirrored.jpeg" title="Xiaomi mirrored image" /&gt;&lt;/p&gt;
&lt;p&gt;The symptoms of the bug are not quite clear as of yet. I've managed to reproduce at
around 50% rate so far. I've tried taking pictures during the day in direct sunlight
and in the shade, also in the evening under bad artificial lighting.
Taking photo of a child's face and then child plus varying number of adults.
Then photo of only 1 or more adults, heck I even made a picture of myself. I though that
lighting or the number of faces and their age have something to do with this bug
but so far I'm not getting consistent results. Sometimes the images turn out OK
and other times they don't regardless of what I take a picture of.&lt;/p&gt;
&lt;p&gt;I also took a picture of the same cereal box, under the same conditions as above but
not capturing the child's face and the image came out not mirrored. The only clue
that seems to hold true so far is that you need to have people's faces in the picture
for this bug to reproduce but that isn't an edge case when taking selfies, right?&lt;/p&gt;
&lt;p&gt;I've also compared the results with my Samsung S5 (Android version 6.0.1) and BlackBerry Z10 devices
and both work as expected: while taking the picture the display acts as a mirror
but when viewing the saved image it appears in normal orientation. On S5 there is
also a clearly visible "Processing" progress bar while the picture is being saved!&lt;/p&gt;
&lt;p&gt;For reference the system information is below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Model number: Redmi Note 4X
Android version: 6.0 MRA58K
Android security patch level: 2017-03-01
Kernel version: 3.18.22+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'd love if somebody
from Xiaomi's engineering department looks into this and sends me a root cause analysis
of the problem.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing! Oh and btw this is my breakfast, not hers!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Speeding up Rust builds inside Docker</title><link href="http://atodorov.org/blog/2017/08/30/speeding-up-rust-builds-inside-docker/" rel="alternate"></link><updated>2017-08-30T09:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-08-30:blog/2017/08/30/speeding-up-rust-builds-inside-docker/</id><summary type="html">&lt;p&gt;Currently &lt;a href="https://github.com/rust-lang/cargo/pull/3567"&gt;it is not possible&lt;/a&gt;
to instruct &lt;code&gt;cargo&lt;/code&gt;, the Rust package manager, to build only the dependencies
of the software you are compiling! This means you can't easily pre-install
build dependencies. Luckily you can workaround this with &lt;code&gt;cargo build -p&lt;/code&gt;!
I've been using this Python script to parse &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;parse-cargo-toml.py&lt;/span&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;toml&lt;/span&gt;

&lt;span class="n"&gt;_pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cargo.toml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dependencies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;dev-dependencies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cargo build -p &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then inside my &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;RUN mkdir /bdcs-api-rs/&lt;/span&gt;
&lt;span class="x"&gt;COPY parse-cargo-toml.py /bdcs-api-rs/&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Manually install cargo dependencies before building&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; so we can have a reusable intermediate container.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; This workaround is needed until cargo can do this by itself:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; https://github.com/rust-lang/cargo/issues/2644&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; https://github.com/rust-lang/cargo/pull/3567&lt;/span&gt;
&lt;span class="x"&gt;COPY Cargo.toml /bdcs-api-rs/&lt;/span&gt;
&lt;span class="x"&gt;WORKDIR /bdcs-api-rs/&lt;/span&gt;
&lt;span class="x"&gt;RUN python ./parse-cargo-toml.py | while read cmd; do \&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="x"&gt;;                                    \&lt;/span&gt;
&lt;span class="x"&gt;    done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn't take into account the version constraints specified in &lt;code&gt;Cargo.toml&lt;/code&gt; but
is still able to produce an intermediate docker layer which I can use to
&lt;a href="http://atodorov.org/blog/2017/08/07/faster-travis-ci-tests-with-docker-cache/"&gt;speed-up my tests by caching the dependency compilation part&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As seen in the &lt;a href="https://travis-ci.org/weldr/bdcs-api-rs/builds/268489460#L1173"&gt;build log&lt;/a&gt;,
lines 1173-1182, when doing &lt;code&gt;cargo build&lt;/code&gt; it downloads and compiles &lt;code&gt;chrono v0.3.0&lt;/code&gt; and
&lt;code&gt;toml v0.3.2&lt;/code&gt;. The rest of the dependencies are already available. The logs also show
that after Job #285 the build times dropped from 16 minutes down to 3-4 minutes due to
Docker caching. This would be even less if the cache is kept locally!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Code coverage from Nightmare.js tests</title><link href="http://atodorov.org/blog/2017/08/12/code-coverage-from-nightmarejs-tests/" rel="alternate"></link><updated>2017-08-12T18:11:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-08-12:blog/2017/08/12/code-coverage-from-nightmarejs-tests/</id><summary type="html">&lt;p&gt;In this article I'm going to walk you through the steps required
to collect code coverage when running an end-to-end test suite
against a React.js application.&lt;/p&gt;
&lt;p&gt;The application under test looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;layout-pf layout-pf-fixed&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- js dependencies skipped --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./dist/main.js?0ca4cedf3884d3943762&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is served as an &lt;code&gt;index.html&lt;/code&gt; file and a &lt;code&gt;main.js&lt;/code&gt; file which intercepts
all interactions from the user and sends requests to the backend API when
needed.&lt;/p&gt;
&lt;p&gt;There is an existing unit-test suite which loads the individual components
and tests them in isolation.
&lt;a href="https://twitter.com/atodorov_/status/886881560754102272"&gt;Apparently people do this&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;There is also an end-to-end test suite which does the majority of the testing.
It fires up a browser instance and interacts with the application. Everything
runs inside Docker containers providing a full-blown production-like environment.
They look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should switch to Edit Recipe page - recipe creation success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nightmare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Nightmare&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;nightmare&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnCreateRecipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnCreateRecipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogRootElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;block&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;varRecName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputDescription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;varRecDesc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnSave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentListItemRootElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editRecipePage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentListItemRootElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// remove this!&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// here goes coverage collection helper&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// remove this!&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The browser interaction is handled by Nightmare.js (sort of like Selenium) and
the test runner is Jest.&lt;/p&gt;
&lt;h2&gt;Code instrumentation&lt;/h2&gt;
&lt;p&gt;The first thing we need is to instrument the application code to provide coverage
statistics. This is done via &lt;code&gt;babel-plugin-istanbul&lt;/code&gt;. Because unit-tests are
executed a bit differently we want to enable conditional instrumentation. In reality
for unit tests we use &lt;code&gt;jest --coverage&lt;/code&gt; which enables istanbul on the fly and having
the code already instrumented breaks this. So I have the following in &lt;code&gt;webpack.config.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--with-coverage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;babelConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;istanbul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then build my application with &lt;code&gt;node run build --with-coverage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can execute &lt;code&gt;node run start --with-coverage&lt;/code&gt;, open the JavaScript console
in your browser and inspect the &lt;code&gt;window.__coverage__&lt;/code&gt; variable. If this is defined
then the application is instrumented correctly.&lt;/p&gt;
&lt;h2&gt;Fetching coverage information from within the tests&lt;/h2&gt;
&lt;p&gt;Remember that &lt;code&gt;main.js&lt;/code&gt; from the beginning of this post? It lives inside &lt;code&gt;index.html&lt;/code&gt;
which means everything gets downloaded to the client side and executed there.
When running the end-to-end test suite that is the browser instance which is controlled
via Nightmare. &lt;strong&gt;You have to pass &lt;code&gt;window.__coverage__&lt;/code&gt; from the browser scope back to
nodejs scope via &lt;code&gt;nightmare.evaluate()&lt;/code&gt;&lt;/strong&gt;! I opted to directly save the coverage data
on the file system and make it available to coverage reporting tools later!&lt;/p&gt;
&lt;p&gt;My coverage collecting snippet looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;nightmare&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__coverage__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// this executes in browser scope&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// terminate the Electron (browser) process&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cov&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this executes in Node scope&lt;/span&gt;
    &lt;span class="c1"&gt;// handle the data passed back to us from browser scope&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strCoverage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cov&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;crypto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createHmac&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strCoverage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;coverage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strCoverage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// the callback from the test&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nightmare returns &lt;code&gt;window.__coverage__&lt;/code&gt; from browser scope back to nodejs scope
and we save it under &lt;code&gt;/tmp&lt;/code&gt; using a hash value of the coverage data as the file
name.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note:&lt;/em&gt; I do have about 40% less coverage files than number of test cases.
This means some test scenarios exercise the same code paths. Storing the individual
coverage reports under a hashed file name makes this very easy to see!&lt;/p&gt;
&lt;p&gt;Note that in my coverage handling code I also call &lt;code&gt;.end()&lt;/code&gt; which will terminate
the browser instance and also execute the &lt;code&gt;done()&lt;/code&gt; callback which is being passed
as parameter to the test above! This is important because it means we had to update
the way tests were written. In particular the Nightmare method sequence doesn't
have to call &lt;code&gt;.end()&lt;/code&gt; and &lt;code&gt;done()&lt;/code&gt; except in the coverage handling code. The
coverage helper must be the last code executed inside the body of the last
&lt;code&gt;.then()&lt;/code&gt; method. This is usually after all assertions (expectations) have been met!&lt;/p&gt;
&lt;p&gt;Now this coverage helper needs to be part of every single test case so I
wanted it to be a one line function, easy to copy&amp;amp;paste! All my attempts to
move this code inside a module have been futile. I can get the module loaded
but it kept failing with
&lt;code&gt;Unhandled promise rejection (rejection id: 1): cov_23rlop1885 is not defined&lt;/code&gt;;`&lt;/p&gt;
&lt;p&gt;At the end I've resorted to this simple hack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utils/coverage.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Shout-out to &lt;a href="http://krasimirtsonev.com/"&gt;Krasimir Tsonev&lt;/a&gt; who joined me on a two
days pairing session to figure this stuff out. Too bad we couldn't quite figure it
out. If you do please send me a pull request!&lt;/p&gt;
&lt;h2&gt;Reporting the results&lt;/h2&gt;
&lt;p&gt;All of these &lt;code&gt;coverage-*.json&lt;/code&gt; files are directly consumable by &lt;code&gt;nyc&lt;/code&gt; - the
coverage reporting tool that comes with the Istanbul suite! I mounted
&lt;code&gt;.nyc_output/&lt;/code&gt; directly under &lt;code&gt;/tmp&lt;/code&gt; inside my Docker container so I could&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nyc report
nyc report --reporter=lcov | codecov
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also modify the unit-test command to
&lt;code&gt;jest --coverage --coverageReporters json --coverageDirectory .nyc_output&lt;/code&gt; so it
produces a &lt;code&gt;coverage-final.json&lt;/code&gt; file for &lt;code&gt;nyc&lt;/code&gt;. Use this if you want to combine
the coverage reports from both test suites.&lt;/p&gt;
&lt;p&gt;Because I'm using Travis CI the two test suites are executed independently and
there is no easy way to share information between them. Instead I've switched
from Coveralls to CodeCov which is smart enough to merge coverage submissions
coming from multiple jobs on the same git commits. You can compare the commit
&lt;a href="https://codecov.io/gh/atodorov/welder-web/commit/46556808e42a21f48d008ced2d53ffe176c01b6d"&gt;submitting only unit-test results&lt;/a&gt;
with the one
&lt;a href="https://codecov.io/gh/atodorov/welder-web/commit/15f437477c17b63797cdb2455f1371336d7dc0e5"&gt;submitting coverage from both test suites&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the above steps are put into practice in
&lt;a href="https://github.com/weldr/welder-web/pull/136"&gt;PR #136&lt;/a&gt; if you want to check them out!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>Faster Travis CI tests with Docker cache</title><link href="http://atodorov.org/blog/2017/08/07/faster-travis-ci-tests-with-docker-cache/" rel="alternate"></link><updated>2017-08-07T11:11:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-08-07:blog/2017/08/07/faster-travis-ci-tests-with-docker-cache/</id><summary type="html">&lt;p&gt;For a while now I've been running tests on Travis CI using Docker
containers to build the project and execute the tests inside. In this
post I will explain how to speed up execution times.&lt;/p&gt;
&lt;p&gt;A Docker image is a filesystem snapshot similar to a virtual machine
image. From these images we build containers (e.g. we run the container X
from the image Y). The construction of Docker images is controlled via
&lt;code&gt;Dockerfile&lt;/code&gt; which contains a set of instructions how to build the image.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FROM welder/web-nodejs:latest
MAINTAINER Brian C. Lane &amp;lt;bcl@redhat.com&amp;gt;
RUN dnf install -y nginx

CMD nginx -g &amp;quot;daemon off;&amp;quot;
EXPOSE 3000

## Do the things more likely to change below here. ##

COPY ./docker/nginx.conf /etc/nginx/

# Update node dependencies only if they have changed
COPY ./package.json /welder/package.json
RUN cd /welder/ &amp;amp;&amp;amp; npm install

# Copy the rest of the UI files over and compile them
COPY . /welder/
RUN cd /welder/ &amp;amp;&amp;amp; node run build

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT [&amp;quot;/usr/local/bin/entrypoint.sh&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; is smart enough to actually build intermediate layers for each
command and store them on your computer. Each command is hashed and it is rebuilt
only if it has been changed. Thus the stuff which doesn't change often goes first
(like setting up a web server or a DB) and the stuff that changes (like the project source code)
goes at the end. All of this is beautifully explained by &lt;a href="https://www.youtube.com/watch?v=3a0gVrfmWC8"&gt;Stefan Kanev in
this video&lt;/a&gt; (in Bulgarian).&lt;/p&gt;
&lt;h2&gt;Travis and Docker&lt;/h2&gt;
&lt;p&gt;While intermediate layer caching is a standard feature for Docker it is disabled
by default in Travis CI and any other CI service I was able to find. To be frank
Circles CI offer this as a premium feature but their pricing plans on that aren't
clear at all.&lt;/p&gt;
&lt;p&gt;However you can enable the use of caching following a few simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make your Docker images publicly available (e.g. Docker Hub or Amazon EC2 Container Service)&lt;/li&gt;
&lt;li&gt;Before starting the test job do a &lt;code&gt;docker pull my/image:latest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When building your Docker images in Travis add &lt;code&gt;--cache-from my/image:latest&lt;/code&gt; to &lt;code&gt;docker build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After successful execution &lt;code&gt;docker tag&lt;/code&gt; the latest image with the build job number and
   &lt;code&gt;docker push&lt;/code&gt; it again to the hub!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTES:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything you do will become public so take care not to expose internal code.
  Alternatively you may configure a private docker registry (e.g. Amazon EC2 CS)
  and use encrypted passwords for Travis to access your images;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker pull&lt;/code&gt; will download all layers that it needs. If your hosting is slow
  this will negatively impact execution times;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker push&lt;/code&gt; will upload only the layers that have been changed;&lt;/li&gt;
&lt;li&gt;I only push images coming from the master branch which are not from a pull request
  build job. This prevents me from accidentally messing something up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you examine the logs of &lt;a href="https://travis-ci.org/weldr/welder-web/jobs/260970675"&gt;Job #247.4&lt;/a&gt;
and &lt;a href="https://travis-ci.org/weldr/welder-web/jobs/261732264"&gt;Job #254.4&lt;/a&gt; you will notice
that almost all intermediate layers were re-used from cache:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Step 3/12 : RUN dnf install -y nginx
 ---&amp;gt; Using cache
 ---&amp;gt; 25311f052381
Step 4/12 : CMD nginx -g &amp;quot;daemon off;&amp;quot;
 ---&amp;gt; Using cache
 ---&amp;gt; 858606811c85
Step 5/12 : EXPOSE 3000
 ---&amp;gt; Using cache
 ---&amp;gt; d778cbbe0758
Step 6/12 : COPY ./docker/nginx.conf /etc/nginx/
 ---&amp;gt; Using cache
 ---&amp;gt; 56bfa3fa4741
Step 7/12 : COPY ./package.json /welder/package.json
 ---&amp;gt; Using cache
 ---&amp;gt; 929f20da0fc1
Step 8/12 : RUN cd /welder/ &amp;amp;&amp;amp; npm install
 ---&amp;gt; Using cache
 ---&amp;gt; 68a30a4aa5c6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the slowest operations are &lt;code&gt;dnf install&lt;/code&gt; and &lt;code&gt;npm install&lt;/code&gt; which on normal execution
will take around 5 minutes.&lt;/p&gt;
&lt;p&gt;You can check-out my
&lt;a href="https://github.com/weldr/welder-web/blob/master/.travis.yml"&gt;.travis.yml&lt;/a&gt; for more info.&lt;/p&gt;
&lt;h2&gt;First time cache&lt;/h2&gt;
&lt;p&gt;It is important to note that you need to have your docker images available in the
registry before you execute the first &lt;code&gt;docker pull&lt;/code&gt; from CI. I do this by manually building
the images on my computer and uploading them before configuring CI integration. Afterwards
the CI system takes care of updating the images for me.&lt;/p&gt;
&lt;p&gt;Initially you may not notice a significant improvement as seen in
&lt;a href="https://travis-ci.org/weldr/bdcs-api-rs/builds/261510313"&gt;Job #262&lt;/a&gt;, Step 18/22.
The initial image available on Docker Hub has all the build dependencies installed
and the code has not been changed when job #262 was executed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;COPY&lt;/code&gt; command copies the entire contents of the directory, including filesystem metadata!
Things like uid/gid (file ownership), timestamps (not sure if taken into account)
and/or extended attributes (e.g. SELinux)
will cause the intermediate layers checksums to differ even though the actual
source code didn't change. This will resolve itself once your CI system starts automatically
pushing the latest images to the registry.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>TransactionManagementError during testing with Django 1.10</title><link href="http://atodorov.org/blog/2017/08/04/transactionmanagementerror-during-testing-with-django-110/" rel="alternate"></link><updated>2017-08-04T22:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-08-04:blog/2017/08/04/transactionmanagementerror-during-testing-with-django-110/</id><summary type="html">&lt;p&gt;During the past 3 weeks I've been debugging a weird error which
started happening after I migrated &lt;a href="http://MrSenko.com/kiwi/"&gt;KiwiTestPad&lt;/a&gt; to
Django 1.10.7. Here is the reason why this happened.&lt;/p&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;After migrating to Django 1.10 all tests appeared to be working locally
on SQLite however they
&lt;a href="https://travis-ci.org/MrSenko/Kiwi/jobs/258309883"&gt;failed on MySQL&lt;/a&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TransactionManagementError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;occurred&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t execute queries until the end of the &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The exact same test cases
&lt;a href="https://travis-ci.org/MrSenko/Kiwi/jobs/258309884"&gt;failed on PostgreSQL&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;InterfaceError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since version 1.10 Django executes all tests inside transactions so my first
thoughts were related to the auto-commit mode. However upon closer inspection
we can see that the line which triggers the failure is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self.assertTrue(users.exists())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is essentially a &lt;code&gt;SELECT&lt;/code&gt; query aka
&lt;code&gt;User.objects.filter(username=username).exists()&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My tests were failing on a SELECT query!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reading the numerous posts about &lt;code&gt;TransactionManagementError&lt;/code&gt; I discovered it may
be caused by a run-away cursor. The application did use raw SQL statements which
I've converted promptly to ORM queries, that took me some time. Then I also fixed
a couple of places where it used &lt;code&gt;transaction.atomic()&lt;/code&gt; as well. No luck!&lt;/p&gt;
&lt;p&gt;Then, after numerous experiments and tons of logging inside Django's own code I was
able to figure out when the failure occurred and what events were in place. The test
code looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/confirm/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The failure was happening after the view had been rendered upon the
first time I do a SELECT against the database!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem was that the connection to the database had been closed
midway during the transaction!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In particular (after more debugging of course) the sequence of events was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;execute &lt;code&gt;django/test/client.py::Client::get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;django/test/client.py::ClientHandler::__call__()&lt;/code&gt;, which takes
   care to disconnect/connect &lt;code&gt;signals.request_started&lt;/code&gt; and &lt;code&gt;signals.request_finished&lt;/code&gt;
   which are responsible for tearing down the DB connection, so problem not here&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;django/core/handlers/base.py::BaseHandler::get_response()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;django/core/handlers/base.py::BaseHandler::_get_response()&lt;/code&gt; which goes through
   the middleware (needless to say I did inspect all of it as well since there
   have been some changes in Django 1.10)&lt;/li&gt;
&lt;li&gt;execute &lt;code&gt;response = wrapped_callback()&lt;/code&gt; while still inside &lt;code&gt;BaseHandler._get_response()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;execute &lt;code&gt;django/http/response.py::HttpResponseBase::close()&lt;/code&gt; which looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# These methods partially implement the file-like object interface.&lt;/span&gt;
&lt;span class="c"&gt;# See https://docs.python.org/3/library/io.html#io.IOBase&lt;/span&gt;
 
&lt;span class="c"&gt;# The WSGI server must call this method upon completion of the request.&lt;/span&gt;
&lt;span class="c"&gt;# See http://blog.dscpl.com.au/2012/10/obligations-for-calling-close-on.html&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;closable&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_closable_objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;closable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_finished&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handler_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;signals.request_finished&lt;/code&gt; is fired&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django/db/__init__.py::close_old_connections()&lt;/code&gt; closes the connection!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; On MySQL setting &lt;code&gt;AUTO_COMMIT=False&lt;/code&gt; and &lt;code&gt;CONN_MAX_AGE=None&lt;/code&gt; helps
workaround this problem but is not the solution for me because it didn't help on
PostgreSQL.&lt;/p&gt;
&lt;p&gt;Going back to &lt;code&gt;HttpResponseBase::close()&lt;/code&gt; I started wondering who calls this method.
The answer was it was getting called by the &lt;code&gt;@content.setter&lt;/code&gt; method at
&lt;code&gt;django/http/response.py::HttpResponse::content()&lt;/code&gt; which is even more weird because
we assign to &lt;code&gt;self.content&lt;/code&gt; inside &lt;code&gt;HttpResponse::__init__()&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Root cause&lt;/h2&gt;
&lt;p&gt;The root cause of my problem was precisely this &lt;code&gt;HttpResponse::__init__()&lt;/code&gt; method
or rather the way we arrive at it inside the application. &lt;/p&gt;
&lt;p&gt;The offending view last line was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Prompt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;info_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Prompt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;core-views-index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the Prompt class looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;prompt.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking back at the internals of &lt;code&gt;HttpResponse&lt;/code&gt; we see that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if content is a string we call &lt;code&gt;self.make_bytes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the content is an iterator then we assign it and if the object has a close method
  then it is executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;HttpResponse&lt;/code&gt; itself is an iterator, inherits from &lt;code&gt;six.Iterator&lt;/code&gt; so when we initialize
&lt;code&gt;HttpResponse&lt;/code&gt; with another &lt;code&gt;HttpResponse&lt;/code&gt; object (aka the content) we execute &lt;code&gt;content.close()&lt;/code&gt;
which unfortunately happens to close the database connection as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; note that from the point of view of a person using the application the
HTML content is exactly the same regardless of whether we have nested &lt;code&gt;HttpResponse&lt;/code&gt; objects
or not.
Also during normal execution the code doesn't run inside a transaction so we never notice
the problem in production.&lt;/p&gt;
&lt;p&gt;The fix of course is very simple, just &lt;code&gt;return Prompt.render()&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category><category term="Django"></category></entry><entry><title>Producing coverage report for Haskell binaries</title><link href="http://atodorov.org/blog/2017/06/27/producing-coverage-report-for-haskell-binaries/" rel="alternate"></link><updated>2017-06-27T10:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-27:blog/2017/06/27/producing-coverage-report-for-haskell-binaries/</id><summary type="html">&lt;p&gt;Recently I've started testing a Haskell application and a question I find
unanswered (or at least very poorly documented) is how to produce coverage
reports for binaries ?&lt;/p&gt;
&lt;h2&gt;Understanding HPC &amp;amp; cabal&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hpc&lt;/code&gt; is the Haskell code coverage tool. It produces the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.mix - module index file, contains information about &lt;em&gt;tick boxes&lt;/em&gt; - their type
  and location in the source code;&lt;/li&gt;
&lt;li&gt;.tix - tick index file aka coverage report;&lt;/li&gt;
&lt;li&gt;.pix - program index file, used only by &lt;code&gt;hpc trans&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The invocation to &lt;code&gt;hpc report&lt;/code&gt; needs to know where to find the .mix files in order
to be able to translate the coverage information back to source and it needs to
know the location (full path or relative from pwd) to the tix file we want to
report.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; is the package management tool for Haskell. Among other thing it can be used
to build your code, execute the test suite and produce the coverage report for you.
&lt;code&gt;cabal build&lt;/code&gt; will produce module information in &lt;code&gt;dist/hpc/vanilla/mix&lt;/code&gt; and
&lt;code&gt;cabal test&lt;/code&gt; will store coverage information in &lt;code&gt;dist/hpc/vanilla/tix&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;A particular thing about Haskell is that you can only test code which can be
&lt;code&gt;import&lt;/code&gt;ed, e.g. it is a library module. You can't test (via Hspec or Hunit) code which
lives inside a file that produces a binary (e.g. Main.hs). However you can still
execute these binaries (e.g. invoke them from the shell) and they will produce a
coverage report in the current directory (e.g. main.tix).&lt;/p&gt;
&lt;h2&gt;Putting everything together&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;cabal build&lt;/code&gt; and &lt;code&gt;cabal test&lt;/code&gt; build the project and execute your unit tests.
   This will create the necessary .mix files (including ones for binaries) and .tix
   files coming from unit testing;&lt;/li&gt;
&lt;li&gt;Invoke your binaries passing appropriate data and examining the results (e.g. compare
   the output to a known value). A simple shell or Python script could do the job;&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;binary.tix&lt;/code&gt; file under &lt;code&gt;dist/hpc/vanilla/binary/binary.tix&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Produce coverage report with hpc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hpc markup --hpcdir=dist/hpc/vanilla/mix/lib --hpcdir=dist/hpc/vanilla/mix/binary  dist/hpc/vanilla/tix/binary/binary.tix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Convert the coverage report to JSON and send it to Coveralls.io:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cabal install hpc-coveralls
~/.cabal/bin/hpc-coveralls --display-report tests binary
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href="https://github.com/weldr/haskell-rpm/pull/18"&gt;haskell-rpm&lt;/a&gt; repository
for an example. See &lt;a href="https://coveralls.io/builds/12131112"&gt;job #45&lt;/a&gt; where there is now
coverage for the &lt;code&gt;inspect.hs&lt;/code&gt;, &lt;code&gt;unrpm.hs&lt;/code&gt; and &lt;code&gt;rpm2json.hs&lt;/code&gt; files, producing binary executables.
Also notice that in
&lt;a href="https://coveralls.io/builds/12131112/source?filename=.%2FRPM%2FParse.hs"&gt;RPM/Parse.hs&lt;/a&gt;
the function &lt;code&gt;parseRPMC&lt;/code&gt; is now covered, while it was not covered in the
&lt;a href="https://coveralls.io/builds/12102486/source?filename=.%2FRPM%2FParse.hs"&gt;previous job #42&lt;/a&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;.travis.yml snippet&lt;/span&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;~/.cabal/bin/hlint .&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cabal install --dependencies-only --enable-tests&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cabal configure --enable-tests --enable-coverage --ghc-option=-DTEST&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cabal build&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cabal test --show-details=always&lt;/span&gt;

  &lt;span class="c1"&gt;# tests to produce coverage for binaries&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;wget https://s3.amazonaws.com/atodorov/rpms/macbook/el7/x86_64/efivar-0.14-1.el7.x86_64.rpm&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./tests/test_binaries.sh ./efivar-0.14-1.el7.x86_64.rpm&lt;/span&gt;

  &lt;span class="c1"&gt;# move .tix files in appropriate directories&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mkdir ./dist/hpc/vanilla/tix/inspect/ ./dist/hpc/vanilla/tix/unrpm/ ./dist/hpc/vanilla/tix/rpm2json/&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mv inspect.tix ./dist/hpc/vanilla/tix/inspect/&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mv rpm2json.tix ./dist/hpc/vanilla/tix/rpm2json/&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mv unrpm.tix ./dist/hpc/vanilla/tix/unrpm/&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cabal install hpc-coveralls&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;~/.cabal/bin/hpc-coveralls --display-report tests inspect rpm2json unrpm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>What's the bug in this pseudo-code</title><link href="http://atodorov.org/blog/2017/06/26/whats-the-bug-in-this-pseudo-code/" rel="alternate"></link><updated>2017-06-26T13:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-26:blog/2017/06/26/whats-the-bug-in-this-pseudo-code/</id><summary type="html">&lt;p&gt;&lt;img alt="Rails Girls Vratsa sticker" src="/images/bug_rails_girls_vratsa.jpg" title="Rails Girls Vratsa sticker" /&gt;&lt;/p&gt;
&lt;p&gt;This is one of the stickers for the second edition of Rails Girls Vratsa which
was held yesterday. Let's explore some of the bug proposals submitted by the Bulgarian QA group:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;sad() == true is ugly&lt;/li&gt;
&lt;li&gt;sad() is not very nice, better make it if(isSad())&lt;/li&gt;
&lt;li&gt;use sadStop(), and even better - stopSad()&lt;/li&gt;
&lt;li&gt;there is an extra space character in beAwesome( )&lt;/li&gt;
&lt;li&gt;the last curly bracket needs to be on a new line&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lyudmil Latinov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My friend Lu describes what I would call style issues. The style he refers to
is mostly Java oriented, especially with naming things. In Ruby we would probably
go with &lt;code&gt;sad?&lt;/code&gt; instead of &lt;code&gt;isSad&lt;/code&gt;. Style is important and there are many tools
to help us with that this will not cause a functional problem! While I'm at it let me say
the curly brackets are not the problem either. They are not valid in Ruby this is
a pseudo-code and they also fall in the style category.&lt;/p&gt;
&lt;p&gt;The next interesting proposal comes from Tsveta Krasteva. She examines the possibility
of &lt;code&gt;sad()&lt;/code&gt; returning an object or nil instead of boolean value. Her first question was
will the if statement still work, and the answer is yes. In Ruby everything is an object
and every object can be compared to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. See
&lt;a href="http://www.skorks.com/2009/09/true-false-and-nil-objects-in-ruby/"&gt;Alan Skorkin's&lt;/a&gt; blog
post on the subject.&lt;/p&gt;
&lt;p&gt;Then Tsveta says the answer is to use &lt;code&gt;sad().stop()&lt;/code&gt; with the warning that it may return
nil. In this context the &lt;code&gt;sad()&lt;/code&gt; method returns on object indicating that the person
is feeling sad. If the method returns nil then the person is feeling OK.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;example by Tsveta&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Csad&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stop&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sad&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="no"&gt;Csad&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beAwesome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;beAwesome&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# notice == true was removed&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sad&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Yes, I am sad&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;beAwesome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this is coming closer to a functioning solution something about it is bugging me.
In the if statement the developer has typed more characters than required (&lt;code&gt;== true&lt;/code&gt;).
This sounds to me unlikely but is possible with less experienced developers.
The other issue is that we are using an object (of &lt;code&gt;class Csad&lt;/code&gt;) to represent an internal
state in the system under test. There is one method to return the state (&lt;code&gt;sad()&lt;/code&gt;) and
another one to alter the state (&lt;code&gt;Csad.stop()&lt;/code&gt;). The two methods don't operate on
the same object! Not a very strong OOP design. On top of that we have to call the
method twice, first time in the if statement, the second time in the body of the
if statement, which may have unwanted side effects. It is best to assign the return
value to some variable instead.&lt;/p&gt;
&lt;p&gt;IMO if we are to use this OOP approach the code should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sad&lt;/span&gt;?()
  &lt;span class="nb"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;stopBeingSad&lt;/span&gt;()
  &lt;span class="nb"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;beAwesome&lt;/span&gt;()
  &lt;span class="nb"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;.&lt;span class="nb"&gt;new&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;.&lt;span class="n"&gt;sad&lt;/span&gt;?
    &lt;span class="n"&gt;p&lt;/span&gt;.&lt;span class="n"&gt;stopBeingSad&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;.&lt;span class="n"&gt;beAwesome&lt;/span&gt;
&lt;span class="nb"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let me return back to assuming we don't use classes here.
The first &lt;em&gt;obvious&lt;/em&gt; mistake is the space in &lt;code&gt;sad stop();&lt;/code&gt; first spotted by Peter Sabev*.
His proposal, backed by others is to use &lt;code&gt;sad.stop()&lt;/code&gt;. However they
didn't use my hint asking what is the return value of &lt;code&gt;sad()&lt;/code&gt; ?&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;sad()&lt;/code&gt; returns boolean then we'll get
&lt;code&gt;undefined method 'stop' for true:TrueClass (NoMethodError)&lt;/code&gt;!
Same thing if &lt;code&gt;sad()&lt;/code&gt; returns nil, although we skip the if block in this case.&lt;/p&gt;
&lt;p&gt;In Ruby we are allowed to skip parentheses when calling a method, like I've shown
above. If we ignore this fact for a second, then &lt;code&gt;sad?.stop()&lt;/code&gt; will mean execute the
method named &lt;code&gt;stop()&lt;/code&gt; which is a member of the &lt;code&gt;sad?&lt;/code&gt; variable, which is of type method!
Again, methods don't have an attribute named &lt;code&gt;stop&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;The last two paragraphs are the semantic/functional mistake I see in this code. The only way
for it to work is to use an OOP variant which is further away from what the existing
clues give us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The variant &lt;code&gt;sad? stop()&lt;/code&gt; is syntactically correct. This means call the function &lt;code&gt;sad?&lt;/code&gt;
with parameter the result of calling the method &lt;code&gt;stop()&lt;/code&gt;, which depending on the outer scope of this program may or may not
be correct (e.g. &lt;code&gt;stop&lt;/code&gt; is defined, &lt;code&gt;sad?&lt;/code&gt; accepts optional parameters, &lt;code&gt;sad?&lt;/code&gt; maintains
global state).&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="fedora.planet"></category><category term="QA"></category><category term="Ruby"></category></entry><entry><title>Design for developers in 5 steps</title><link href="http://atodorov.org/blog/2017/06/15/design-for-developers-in-5-steps/" rel="alternate"></link><updated>2017-06-15T12:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-15:blog/2017/06/15/design-for-developers-in-5-steps/</id><summary type="html">&lt;p&gt;Design is a method! Design can be taught! Developers can do good design!
If this sounds outrageous then I present you
&lt;a href="http://sugarenia.com/"&gt;Zaharenia Atzitzikaki&lt;/a&gt; who is a developer by
education, not a graphics designer and she thinks otherwise. This
blog post will summarize her workshop held at the DEVit conference last month.&lt;/p&gt;
&lt;p&gt;We are going to build a site called DevMatch, which is like Tinder for
developers. The initial version doesn't look bad but we can do better:
&lt;img alt="initial version of DevMatch" src="/images/design4devs/step0.png" title="initial version of DevMatch" /&gt;&lt;/p&gt;
&lt;h2&gt;Step 1: Layout&lt;/h2&gt;
&lt;p&gt;Layout is grids and the most popular designs use grids with 12, 16 or 24 columns. The
idea is to make everything align to the grid which allows the eyes to follow a straight
line and makes the content easier to perceive. You don't want to break the story line.
Don't fear the white space but don't leave it random. &lt;/p&gt;
&lt;p&gt;Make everything align to the grid ... but not so much (checkout this
&lt;a href="https://www.youtube.com/watch?v=LadUft_ly50"&gt;TEDx talk&lt;/a&gt; about
predictability and variability in music).&lt;/p&gt;
&lt;p&gt;Make sure not to use centered alignment, nor justified alignment because they
don't provide a single line for the eyes to follow. Align to the left,
buttons align at the bottom.&lt;/p&gt;
&lt;p&gt;To make an element more prominent (like the recommended plan) then make it
double width!&lt;/p&gt;
&lt;p&gt;Finally we remove the stock images because they are distracting!&lt;/p&gt;
&lt;p&gt;Here's how everything looks now:
&lt;img alt="DevMatch after aligning" src="/images/design4devs/step1.png" title="DevMatch after aligning" /&gt;&lt;/p&gt;
&lt;h2&gt;Step 2: Typography&lt;/h2&gt;
&lt;p&gt;The web is 95% typography. Serif fonts are good for reading long passages of text
because they allow the eyes to follow. Sans-serif fonts look great on screens,
especially for smaller sizes (&amp;lt; 12px). Monospaced fonts are only for code!
Script fonts are fun but use them with caution.&lt;/p&gt;
&lt;p&gt;The fonts we select need to improve readability, not hinder it. Minimum
font size should be 16px or even 18px.&lt;/p&gt;
&lt;p&gt;Use a typographic scale which tells you how big certain text should be,
e.g. h1 vs h2 vs h3 vs paragraph!&lt;/p&gt;
&lt;p&gt;Find a font pair which works (e.g. Oxygen + Source Sans). Also compile
a list of fallback fonts, e.g. Futura, Trebuchet MS, Arial, Sans-serif.
This makes sure that your fonts work well together and that visitors
on your site will use fonts which are as close as possible to what you intended.&lt;/p&gt;
&lt;p&gt;Increase line height to improve readability of paragraphs. The minimum is 1.4em.
Keep line length short, between 45 and 75 characters.&lt;/p&gt;
&lt;p&gt;Layout and Typography are the two most important design steps and you will
achieve very good results if you apply only the two of them.
Here's how everything looks now:
&lt;img alt="DevMatch after typography changes" src="/images/design4devs/step2.png" title="DevMatch after typography changes" /&gt;&lt;/p&gt;
&lt;h2&gt;Step 3: Color&lt;/h2&gt;
&lt;p&gt;Find a color palette generator and use it. For new projects start with
competitor analysis, a logo or a picture you like or something that conveys
a known meaning to the customer. Zaharenia's tips include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid clear black and clear white because they are not easy to read. Use a gray-scale
  shade or change the transparency channel to get a new color;&lt;/li&gt;
&lt;li&gt;Success is GREEN;&lt;/li&gt;
&lt;li&gt;Error is RED. Don't use red color for normal text;&lt;/li&gt;
&lt;li&gt;Don't rely on color alone because some people may be color blind,
  others may be using a gray scale (or a bad quality) screen, etc.;&lt;/li&gt;
&lt;li&gt;For links use underlines;&lt;/li&gt;
&lt;li&gt;For background use the brand color - this is the most visible color;&lt;/li&gt;
&lt;li&gt;Use an accent color. This is the most striking color (purple in
  this example) but use it sparingly, only for buttons or important items;&lt;/li&gt;
&lt;li&gt;We need a light background color as well;&lt;/li&gt;
&lt;li&gt;Need dark text color, but not black;&lt;/li&gt;
&lt;li&gt;Need link color;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how everything looks now:
&lt;img alt="DevMatch after applying color" src="/images/design4devs/step3.png" title="DevMatch after applying color" /&gt;&lt;/p&gt;
&lt;h2&gt;Step 4: Visual elements&lt;/h2&gt;
&lt;p&gt;Here we talk about icons and images which are to be used only as
visual aid, not alone (especially for navigation). The best thing you can do
is find a good icon set (with lots of sizes) or even better an SVG set. Then
combine several icons together if need be, instead of using stock photos.&lt;/p&gt;
&lt;p&gt;It is best to use SVG for all icons because we can use CSS to modify the colors
inside the SVG. For example the features icons below are all gray and some SVG paths
have been styled with the accent color. Here's how it looks now:
&lt;img alt="DevMatch after applying icons" src="/images/design4devs/step4.png" title="DevMatch after applying icons" /&gt;&lt;/p&gt;
&lt;p&gt;Other tips include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use logo and header images for the headers;&lt;/li&gt;
&lt;li&gt;To make element pop add border, add header, add accent color in the middle
  (e.g. the pricing section).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 5: Copyright&lt;/h2&gt;
&lt;p&gt;This is about what text we provide on the screen. The rules of thumb are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People scan, they don't read;&lt;/li&gt;
&lt;li&gt;Aim for clarity;&lt;/li&gt;
&lt;li&gt;Avoid industry/technical slang;&lt;/li&gt;
&lt;li&gt;Keep lines short: 45 to 75 characters;&lt;/li&gt;
&lt;li&gt;Write clear error messages and clear call to actions.
  Repeat the actual verb in the call to action and be more verbose.
  E.g. &lt;em&gt;Yes, delete this&lt;/em&gt; or &lt;em&gt;No, I changed my mind&lt;/em&gt;.
  Instead of &lt;em&gt;Submit&lt;/em&gt; use &lt;em&gt;Create account&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Truncate your text: cut in half and then again;&lt;/li&gt;
&lt;li&gt;Design your text to be roughly even which helps with alignment
  but don't over do it;&lt;/li&gt;
&lt;li&gt;Keep forms very short&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is the final version of our website (note: the header logo mishap
is probably from my side, not intentional):
&lt;img alt="DevMatch after copyright changes" src="/images/design4devs/step5.png" title="DevMatch after copyright changes" /&gt;&lt;/p&gt;
&lt;p&gt;These are the 5 basic design steps. You don't need to be a trained designer to be
able to apply them. Now that you know what the steps are simply search for fonts,
scales, color palettes and icon sets and apply them. This is what Zaharenia does
(in her own words). You can find all HTML, CSS and images for this workshop at the
&lt;a href="https://github.com/sugarenia/design4devs-devit"&gt;design4devs-devit&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy designing!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>VMware's favorite login form</title><link href="http://atodorov.org/blog/2017/06/14/vmwares-favorite-login-form/" rel="alternate"></link><updated>2017-06-14T11:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-14:blog/2017/06/14/vmwares-favorite-login-form/</id><summary type="html">&lt;p&gt;&lt;em&gt;How do you test a login form?&lt;/em&gt; is one of my favorite questions when
screening candidates for QA positions and also a good brain exercise
even for experienced testers. I've written about it
&lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;last year&lt;/a&gt;. In this
blog post I'd like to share a different perspective on this same question,
this time courtesy of my friend Rayna Stankova.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Login form" src="/images/login_form_vmware.png" title="Login form" /&gt;&lt;/p&gt;
&lt;h2&gt;What bugs do you see above&lt;/h2&gt;
&lt;p&gt;The series of images above is from a
&lt;a href="https://www.meetup.com/Women-Who-Code-Sofia/events/239480974/"&gt;Women Who Code Sofia&lt;/a&gt;
workshop where the participants were given printed copies and asked to find
as much defects as possible. Here they are (counting clock-wise from the top-left corner):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Typo in "Registr" link at the bottom;&lt;/li&gt;
&lt;li&gt;UI components are not aligned;&lt;/li&gt;
&lt;li&gt;Missing "Forgot your password?" link&lt;/li&gt;
&lt;li&gt;Backend credentials validation with empty password;
   plain text password field; Too specific information about incorrect credentials;&lt;/li&gt;
&lt;li&gt;Too specific information about incorrect credentials with visual hint
   as to what exactly is not correct. In this case it looks like the password
   is OK, maybe it was one of
   &lt;a href="https://www.youtube.com/watch?v=0Jx8Eay5fWQ"&gt;the 4 most commonly used passwords&lt;/a&gt;,
   but the username is wrong which we can easily figure out;&lt;/li&gt;
&lt;li&gt;In this case the error handling appears to be correct, not disclosing what
   exactly is wrong. The placement is somewhat wrong, it looks like an error
   message for one of the fields instead for the entire form. I'd move that to the top
   and even slightly update the wording to be more like &lt;em&gt;Login failed, bad credentials,
   try again&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How do you test this&lt;/h2&gt;
&lt;p&gt;Here is a list of possible test scenarios, proposed by Rayna. Notes are mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UI Layer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test 1: Verify Email (User ID) field has focus on page load&lt;/li&gt;
&lt;li&gt;Test 2: Verify Empty Email (User ID) field and Password field&lt;/li&gt;
&lt;li&gt;Test 3: Verify Empty Email (User ID) field&lt;/li&gt;
&lt;li&gt;Test 4: Verify Empty Password field&lt;/li&gt;
&lt;li&gt;Test 5: Verify Correct sign in&lt;/li&gt;
&lt;li&gt;Test 6: Verify Incorrect sign in&lt;/li&gt;
&lt;li&gt;Test 7: Verify Password Reset - working link&lt;/li&gt;
&lt;li&gt;Test 8: Verify Password Reset - invalid emails&lt;/li&gt;
&lt;li&gt;Test 9: Verify Password Reset - valid email&lt;/li&gt;
&lt;li&gt;Test 10: Verify Password Reset - using new password&lt;/li&gt;
&lt;li&gt;Test 11: Verify Password Reset - using old password&lt;/li&gt;
&lt;li&gt;Test 12: Verify whether password text is hidden&lt;/li&gt;
&lt;li&gt;Test 13: Verify text field limits - whether the browser accepts more than the allowed database limits&lt;/li&gt;
&lt;li&gt;Test 14: Verify that validation message is displayed in case user exceeds the character limit of the username and password fields&lt;/li&gt;
&lt;li&gt;Test 15: Verify if there is checkbox with label "remember password" in the login page&lt;/li&gt;
&lt;li&gt;Test 16: Verify if it’s allowed the username to contain non printable characters? If not, this is invalid on the 'create user' section.&lt;/li&gt;
&lt;li&gt;Test 17: Verify if the user must be logged in to access any other area of the site.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tests 10 and 11 are particularly relevant for Fedora Account System where
you need a really strong password and (at least in the past) had to change it more often
and couldn't reuse any of your old passwords. As a user I really hate this b/c I can't remember
my own password but it makes for a good test scenario.&lt;/p&gt;
&lt;p&gt;13 and 14 are also something I rarely see and could make a nice case for
property based testing.&lt;/p&gt;
&lt;p&gt;16 would have been the bread and butter of testing Emoj.li (the first emoji-only
social network).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyboard Specific&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test 18: Verify Navigate to all fields&lt;/li&gt;
&lt;li&gt;Test 19: Verify Enter submits on password focus&lt;/li&gt;
&lt;li&gt;Test 20: Verify Space submits on login focus&lt;/li&gt;
&lt;li&gt;Test 21: Verify Enter submits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all so relevant with beautifully styled websites nowadays. The one I hate the most
is when space key doesn't trigger select/unselect for checkboxes which are actually
images!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test 22: Verify SQL Injections testing - password field&lt;/li&gt;
&lt;li&gt;Test 23: Verify SQL Injections testing - username field&lt;/li&gt;
&lt;li&gt;Test 24: Verify SQL Injections testing - reset password&lt;/li&gt;
&lt;li&gt;Test 25: Verify Password/username not visible from URL login&lt;/li&gt;
&lt;li&gt;Test 26: Verify For security point of view, in case of incorrect credentials user is displayed the message like
  "incorrect username or password" instead of exact message pointing at the field that is incorrect.
  As message like "incorrect username" will aid hacker in brute-forcing the fields one by one&lt;/li&gt;
&lt;li&gt;Test 27: Verify the timeout of the login session&lt;/li&gt;
&lt;li&gt;Test 28: Verify if the password can be copy-pasted or not&lt;/li&gt;
&lt;li&gt;Test 29: Verify that once logged in, clicking back button doesn't logout user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;22, 23 and 24 are a bit generic and I guess can be collapsed into one. Better yet make
them more specific instead.&lt;/p&gt;
&lt;p&gt;Test 28 may sound like nonsense but is not. I remember back in the days that
it was possible to copy and paste the password out of Windows dial-up credentials screen.
With heavily styled form fields it is possible to have this problem again so it is
a valid check IMO.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Others:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test 30: Verify that the password is in encrypted form when entered&lt;/li&gt;
&lt;li&gt;Test 31: Verify the user must be logged in to call any web services.&lt;/li&gt;
&lt;li&gt;Test 32: Verify if the username is allowed to contain non printable characters,
  the code handling login can deal with them and no error is thrown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think Test 30 means to validate that the backend doesn't store passwords in plain text
but rather stores their hashes.&lt;/p&gt;
&lt;p&gt;32 is a duplicate of 16. I also say why only the username? Password field is also
a good candidate for this.&lt;/p&gt;
&lt;p&gt;If you check how I
&lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;would test a login form&lt;/a&gt; you will find
some similarities but there are also scenarios which are different. I'm interested to
see what other scenarios we've both missed, especially ones which have manifested themselves
as bugs in actual applications.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry></feed>