<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[atodorov.org - you can logoff, but you can never leave]]></title>
  <link href="http://atodorov.org/atom.xml" rel="self"/>
  <link href="http://atodorov.org/"/>
  <updated>2015-04-07T17:07:02+03:00</updated>
  <id>http://atodorov.org/</id>
  <author>
    <name><![CDATA[Alexander Todorov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Configure iSCSI Target on Red Hat Enterprise Linux 7]]></title>
    <link href="http://atodorov.org/blog/2015/04/07/how-to-configure-iscsi-target-on-red-hat-enterprise-linux-7/"/>
    <updated>2015-04-07T15:52:00+03:00</updated>
    <id>http://atodorov.org/blog/2015/04/07/how-to-configure-iscsi-target-on-red-hat-enterprise-linux-7</id>
    <content type="html"><![CDATA[<p>Linux-IO (LIO) Target is an open-source implementation of the SCSI target that
has become the standard one included in the Linux kernel and the one present in
Red Hat Enterprise Linux 7. The popular <em>scsi-target-utils</em> package is replaced
by the newer <em>targetcli</em> which makes configuring a software iSCSI target quite
different.</p>

<p>In earlier versions one had to edit the <code>/etc/tgtd/targets.conf</code> file and
<code>service tgtd restart</code>. Here is an example configuration:</p>

<pre><code>&lt;target iqn.2008-09.com.example:server.target1&gt;
    backing-store /dev/vg_iscsi/lv_lun1
    backing-store /dev/vg_iscsi/lv_lun2

    incominguser user2 secretpass23
    outgoinguser userA secretpassA
&lt;/target&gt;
</code></pre>

<p><em>targetcli</em> can be used either as an interactive shell or as stand alone commands.
Here is an example shell session which creates a file-based disk image. Comments are
provided inline:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install -y targetcli
</span><span class='line'># systemctl enable target
</span><span class='line'>
</span><span class='line'># targetcli 
</span><span class='line'>
</span><span class='line'># first create a disk image with the name of disk1. All files are sparsely created.
</span><span class='line'>
</span><span class='line'>/> backstores/fileio create disk1 /var/lib/libvirt/images/disk1.img 10G
</span><span class='line'>Created fileio disk1 with size 10737418240
</span><span class='line'>
</span><span class='line'># create an iSCSI target. NB: this only defines the target
</span><span class='line'>
</span><span class='line'>/> iscsi/ create iqn.2015-04.com.example:target1
</span><span class='line'>Created target iqn.2015-04.com.example:target1.
</span><span class='line'>Created TPG 1.
</span><span class='line'>Global pref auto_add_default_portal=true
</span><span class='line'>Created default portal listening on all IPs (0.0.0.0), port 3260.
</span><span class='line'>
</span><span class='line'># TPGs (Target Portal Groups) allow the iSCSI to support multiple complete
</span><span class='line'># configurations within one target. This is useful for complex quality-of-service
</span><span class='line'># configurations. targetcli will automatically create one TPG when the target
</span><span class='line'># is created, and almost all setups only need one.
</span><span class='line'>
</span><span class='line'># switch to TPG definition for our target
</span><span class='line'>
</span><span class='line'>/> cd iscsi/iqn.2015-04.com.example:target1/tpg1
</span><span class='line'>
</span><span class='line'># list the contents
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> ls 
</span><span class='line'>o- tpg1 ..................................................................................................... [no-gen-acls, no-auth]
</span><span class='line'>  o- acls ................................................................................................................ [ACLs: 0]
</span><span class='line'>  o- luns ................................................................................................................ [LUNs: 0]
</span><span class='line'>  o- portals .......................................................................................................... [Portals: 1]
</span><span class='line'>    o- 0.0.0.0:3260 ........................................................................................................... [OK]
</span><span class='line'>
</span><span class='line'># create a portal aka IP:port pairs which expose the target on the network
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> portals/ create
</span><span class='line'>Using default IP port 3260
</span><span class='line'>Binding to INADDR_ANY (0.0.0.0)
</span><span class='line'>This NetworkPortal already exists in configFS.
</span><span class='line'>
</span><span class='line'># create logical units (LUNs) aka disks inside our target
</span><span class='line'># in other words bind the target to its on-disk storage
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> luns/ create /backstores/fileio/disk1
</span><span class='line'>Created LUN 0.
</span><span class='line'>
</span><span class='line'># disable authentication
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set attribute authentication=0
</span><span class='line'>Parameter authentication is now '0'.
</span><span class='line'>
</span><span class='line'># enable read/write mode
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set attribute demo_mode_write_protect=0
</span><span class='line'>Parameter demo_mode_write_protect is now '0'.
</span><span class='line'>
</span><span class='line'># Enable generate_node_acls mode. This can be thought of as 
</span><span class='line'># "ignore ACLs mode" -- both  authentication and LUN mapping
</span><span class='line'># will then use the TPG settings.
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set attribute generate_node_acls=1
</span><span class='line'>Parameter generate_node_acls is now '1'.
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> ls
</span><span class='line'>o- tpg1 ........................................................................................................ [gen-acls, no-auth]
</span><span class='line'>  o- acls ................................................................................................................ [ACLs: 0]
</span><span class='line'>  o- luns ................................................................................................................ [LUNs: 1]
</span><span class='line'>  | o- lun0 ..................................................................... [fileio/disk1 (/var/lib/libvirt/images/disk1.img)]
</span><span class='line'>  o- portals .......................................................................................................... [Portals: 1]
</span><span class='line'>    o- 0.0.0.0:3260 ........................................................................................................... [OK]
</span><span class='line'>
</span><span class='line'># exit or Ctrl+D will save the configuration under /etc/target/saveconfig.json
</span><span class='line'>
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> exit
</span><span class='line'>Global pref auto_save_on_exit=true
</span><span class='line'>Last 10 configs saved in /etc/target/backup.
</span><span class='line'>Configuration saved to /etc/target/saveconfig.json
</span><span class='line'>
</span><span class='line'># after creating a second target the layout looks like this
</span><span class='line'>
</span><span class='line'>/> ls
</span><span class='line'>o- / ......................................................................................................................... [...]
</span><span class='line'>  o- backstores .............................................................................................................. [...]
</span><span class='line'>  | o- block .................................................................................................. [Storage Objects: 0]
</span><span class='line'>  | o- fileio ................................................................................................. [Storage Objects: 2]
</span><span class='line'>  | | o- disk1 .................................................. [/var/lib/libvirt/images/disk1.img (10.0GiB) write-back activated]
</span><span class='line'>  | | o- disk2 .................................................. [/var/lib/libvirt/images/disk2.img (10.0GiB) write-back activated]
</span><span class='line'>  | o- pscsi .................................................................................................. [Storage Objects: 0]
</span><span class='line'>  | o- ramdisk ................................................................................................ [Storage Objects: 0]
</span><span class='line'>  o- iscsi ............................................................................................................ [Targets: 2]
</span><span class='line'>  | o- iqn.2015-04.com.example:target1 ................................................................................... [TPGs: 1]
</span><span class='line'>  | | o- tpg1 .................................................................................................. [gen-acls, no-auth]
</span><span class='line'>  | |   o- acls .......................................................................................................... [ACLs: 0]
</span><span class='line'>  | |   o- luns .......................................................................................................... [LUNs: 1]
</span><span class='line'>  | |   | o- lun0 ............................................................... [fileio/disk1 (/var/lib/libvirt/images/disk1.img)]
</span><span class='line'>  | |   o- portals .................................................................................................... [Portals: 1]
</span><span class='line'>  | |     o- 0.0.0.0:3260 ..................................................................................................... [OK]
</span><span class='line'>  | o- iqn.2015-04.com.example:target2 ................................................................................... [TPGs: 1]
</span><span class='line'>  |   o- tpg1 .................................................................................................. [gen-acls, no-auth]
</span><span class='line'>  |     o- acls .......................................................................................................... [ACLs: 0]
</span><span class='line'>  |     o- luns .......................................................................................................... [LUNs: 1]
</span><span class='line'>  |     | o- lun0 ............................................................... [fileio/disk2 (/var/lib/libvirt/images/disk2.img)]
</span><span class='line'>  |     o- portals .................................................................................................... [Portals: 1]
</span><span class='line'>  |       o- 0.0.0.0:3260 ..................................................................................................... [OK]
</span><span class='line'>  o- loopback ......................................................................................................... [Targets: 0]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># enable CHAP and Reverse CHAP (mutual) for both discovery and login authentication
</span><span class='line'>
</span><span class='line'># discovery authentication is enabled under the global iscsi node
</span><span class='line'>
</span><span class='line'>/> cd /iscsi
</span><span class='line'>/iscsi> set discovery_auth enable=1
</span><span class='line'>/iscsi> set discovery_auth userid=IncomingUser
</span><span class='line'>/iscsi> set discovery_auth password=SomePassword1
</span><span class='line'>/iscsi> set discovery_auth mutual_userid=OutgoingUser
</span><span class='line'>/iscsi> set discovery_auth mutual_password=AnotherPassword2
</span><span class='line'>
</span><span class='line'># login authentication is enabled either under the TPG node or under ACLs
</span><span class='line'>
</span><span class='line'>/iscsi> cd iqn.2015-04.com.example:target1/tpg1
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set attribute authentication=1
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set auth userid=IncomingUser2
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set auth password=SomePassword3
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set auth mutual_userid=OutgoingUser2
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> set auth mutual_password=AnotherPassword4
</span><span class='line'>/iscsi/iqn.20...:target1/tpg1> exit</span></code></pre></td></tr></table></div></figure>


<p>Hints:</p>

<ul>
<li>activating targetcli service at boot is mandatory, otherwise your configuration won’t be read after a reboot</li>
<li>if you type <code>cd</code> <em>targetcli</em> will display an interactive node tree</li>
<li>after configuration is saved you don&#8217;t need to restart anything</li>
<li>the old <em>scsi-target-utils</em> doesn&#8217;t support discovery authentication</li>
<li><em>targetcli</em> allows kernel memory to be shared as a block SCSI device via the
ramdisk backstore. It also supports &#8220;nullio&#8221; mode, which discards all writes, and returns all-zeroes for reads.</li>
<li>I&#8217;m having troubles configuring portals to listen both on any IPv4 addresses and any IPv6 addresses
the system has. I&#8217;ve still not figured that out entirely.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining E-mail Identities with Gravatar]]></title>
    <link href="http://atodorov.org/blog/2015/03/16/mining-e-mail-identities-with-gravatar/"/>
    <updated>2015-03-16T23:16:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/03/16/mining-e-mail-identities-with-gravatar</id>
    <content type="html"><![CDATA[<p>Recently I&#8217;ve laid my hands on a list of little over 7000 email addresses.
This begs the question how much of them are still in use and what for ?</p>

<p>My data is not fresh so I&#8217;ve uploaded the list to Facebook and created a custom
audience. 2400 of 7129 addresses were recognized - 30% of these addresses are
on Facebook and easy to target! Need to figure out which ones.</p>

<p>I could have tried some sort of batch search combined with the custom audience
functionality but I didn&#8217;t find an API for that and decided not to bother.
Instead I&#8217;ve opted for Gravatar.</p>

<figure class='code'><figcaption><span>gravatars.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">while </span><span class="nb">read </span>LINE; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">HASH</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> -n <span class="nv">$LINE</span> | md5sum | cut -f1 -d<span class="s1">&#39; &#39;</span><span class="sb">`</span>
</span><span class='line'>    wget <span class="s2">&quot;http://gravatar.com/avatar/$HASH&quot;</span> -O <span class="s2">&quot;$LINE&quot;</span>
</span><span class='line'><span class="k">done</span> &lt; /dev/stdin
</span></code></pre></td></tr></table></div></figure>


<p>Feed <code>gravatars.sh</code> with the email list and it will download all images to the
current working directory and use the address as the file name. After
<code>md5sum *@* | cut -f1 -d' ' | sort | uniq -c</code> I quickly noticed the following:</p>

<ul>
<li>4563 addresses have the <code>a1719586837f0fdac8835f74cf4ef04a</code> check-sum; These are
not found on Gravatar.</li>
<li>2400 addresses have the <code>d5fe5cbcc31cff5f8ac010db72eb000c</code> check-sum. These are
addresses which are registered with Gravatar but didn&#8217;t bother to change the default
image.</li>
<li>166 remaining addresses, each with a different check-sum. These have their custom
pictures uploaded to Gravatar and probably much more actively used.</li>
</ul>


<p>A second check with Facebook reveals 900 out of these 2566 addresses were recognized.
This begs the question is Facebook showing incorrect stats or are there 1500 addresses
using Gravatar (or have used at some point) which are not on Facebook ?</p>

<p>At least some of the remaining 4000 addresses are still active and used to send emails.
Next I will be looking for ways to identify them. Any suggestions and comments are more
than welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pedometer Bug in Samsung Gear Fit Smartwatch]]></title>
    <link href="http://atodorov.org/blog/2015/01/09/pedometer-bug-in-samsung-gear-fit-smartwatch/"/>
    <updated>2015-01-09T10:53:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/01/09/pedometer-bug-in-samsung-gear-fit-smartwatch</id>
    <content type="html"><![CDATA[<p><a style="float:left;display:inline-block;margin-right:10px;" href="http://www.amazon.com/gp/product/B00J4DY8RU/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00J4DY8RU&linkCode=as2&tag=atodorovorg-20&linkId=RNJGVYUTOOJFGWOU">
<img src="http://atodorov.org/images/samsung/gear_fit.jpg" />
</a>
<sub>
Image source <a href="http://pocketnow.com/2014/05/02/samsung-gear-fit-review-pre-buttal-video">Pocketnow</a>
<sub></p>

<p>Recently I&#8217;ve been playing around with a
<a href="http://www.amazon.com/gp/product/B00J4DY8RU/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00J4DY8RU&linkCode=as2&tag=atodorovorg-20&linkId=RNJGVYUTOOJFGWOU">Samsung Gear Fit</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=B00J4DY8RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
and while the hardware seems good I&#8217;m a bit disapointed on the software side.
There is at least one bug which is clearly visible - <strong>pedometer counts calories twice
when it&#8217;s on and exercise mode is started</strong>.</p>

<p>How to test:</p>

<ul>
<li>Start the <em>Pedometer</em> app and record any initial readings;</li>
<li>Walk a fixed distance and at the end record all readings;</li>
<li>Now go back to the <em>Exercise</em> app and select a <em>Walking</em>
exercise from the menu. Tap <em>Start</em>;</li>
<li>Walk back the same distance/road as before. At the end of the journey
stop the walking exercise and record all readings.</li>
</ul>


<p>Expected results:</p>

<p>At the end of the trip I expect to see roughly the same calories burned
for both directions.</p>

<p>Actual results:</p>

<p>The return trip counted twice as many calories compared to the forward trip.
Here&#8217;s some actual data to prove it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+--------------------------+----------+----------------+---------+-------------+---------+
</span><span class='line'>|                          | Initial  | Forward trip   |         | Return trip |         |
</span><span class='line'>|                          | Readings | Pedometer only |  Delta  | Pedometer & |  Delta  |
</span><span class='line'>|                          |          |                |         | Exercise    |         |
</span><span class='line'>+--------------------------+----------+----------------+---------+-------------+---------+
</span><span class='line'>|              Total Steps | 14409 st | 14798 st       | 389 st  | 15246 st    | 448 st  |
</span><span class='line'>+--------------------------+----------+----------------+---------+-------------+---------+
</span><span class='line'>|           Total Distance | 12,19 km | 12,52 km       | 0,33 km | 12,90 km    | 0,38 km |
</span><span class='line'>+--------------------------+----------+----------------+---------+-------------+---------+
</span><span class='line'>| Cal burned via Pedometer |  731 Cal |  751 Cal       | 20 Cal  |  772 Cal    | 21 Cal  |
</span><span class='line'>+--------------------------+----------+----------------+=========+-------------+=========+
</span><span class='line'>| Cal burned via Exercise  |  439 Cal |  439 Cal       | 0       |  460 Cal    | 21 Cal  |
</span><span class='line'>+--------------------------+----------+----------------+---------+-------------+=========+
</span><span class='line'>|    Total calories burned | 1170 Cal | 1190 Cal       | 20 cal  | 1232 Cal    | 42 Cal  |
</span><span class='line'>+--------------------------+----------+----------------+=========+-------------+=========+</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> Data values above were taken from Samsung&#8217;s <em>S Health</em> app which is easier to work with
instead of the Gear Fit itself.</p>

<p>The problem is that both apps are accessing the sensor simultaneously and not aware of each other.
In theory it should be relatively easy to block access of one app while the other is running but
that may not be so easy to implement on the limited platform the Gear Fit is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2 Barcode Related Bugs in MyFitnessPal]]></title>
    <link href="http://atodorov.org/blog/2015/01/07/2-barcode-related-bugs-in-myfitnesspal/"/>
    <updated>2015-01-07T14:44:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/01/07/2-barcode-related-bugs-in-myfitnesspal</id>
    <content type="html"><![CDATA[<p><img src="http://atodorov.org/images/barcode/fail.jpg" title="Barcode that fails to scan" alt="Barcode that fails to scan" /></p>

<p><strong>Did you know that the popular <em>MyFitnessPal</em> application can&#8217;t scan barcodes
printed on curved surfaces?</strong> The above barcode fails to scan because it is
printed on a metal can full of roasted almonds :). In contrast the
<em>Barcode Scanner</em> from <em>ZXing Team</em> understands it just fine. My bet is
<em>MyFitnessPal</em> uses less advanced barcode scanning library. Judging from
the visual clues in the app the issue is between 6 and 0 where white space is wider.</p>

<p><img src="http://atodorov.org/images/barcode/pass.jpg" title="Barcode that scans fine" alt="Barcode that scans fine" /></p>

<p>Despite being a bit blurry this second barcode is printed on a flat surface and
is understood by both <em>MyFitnessPal</em> and &#8220;ZXing Barcode Scanner&#8221;.</p>

<p><strong>NOTE</strong> I get the same results regardless if I try to scan the actual barcode
printed on packaging, a picture from a mobile device screen or these two images
from the laptop screen.</p>

<p><strong>MyFitnessPal also has problems with duplicate barcodes!</strong> Barcodes are not unique
and many producers use the same code for multiple products. I&#8217;ve seen this in the
case of two different varieties of salami from the same manufacturer on the good end
and two different products produced across the world (eggs and popcorn) on the
extreme end.</p>

<p>Once the user scans their barcodes and establish that the existing information is
not correct they can <em>Create a Food</em> and update the calories database. This is then
synced back to MyFitnesPal servers and overrides any existing information. When the same
barcode is scanned for the second time only the new DB entry is visible.</p>

<p>How to reproduce:</p>

<ul>
<li>Scan an existing barcode and enter it to MFP database if not already there;</li>
<li>Scan the same barcode one more time and pretend the information is not correct;</li>
<li>Click the <em>Create a Food</em> button and fill-in the fields. For example use a
different food name to distinguish between the two database entries. Save!</li>
<li>From another device with different account (to verify information in DB)
scan the same barcode again.</li>
</ul>


<p>Actual results:
The last entered information is shown.</p>

<p>Expected results:
User is shown both DB records and can select between them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Endless Loop Bug in Candy Crush Saga Level 80]]></title>
    <link href="http://atodorov.org/blog/2015/01/05/endless-loop-bug-candy-crush-saga-level-80/"/>
    <updated>2015-01-05T15:44:00+02:00</updated>
    <id>http://atodorov.org/blog/2015/01/05/endless-loop-bug-candy-crush-saga-level-80</id>
    <content type="html"><![CDATA[<p>Happy new year everyone. During the holidays I&#8217;ve discovered several interesting
bugs which will be revealed in this blog. Starting today with a bug in the popular
game <em>Candy Crush Saga</em>.</p>

<p>In level 80 one teleport is still open but the chocolates are blocking the rest.
The game has ended but candies keep flowing through the teleport and the level doesn&#8217;t exit.
My guess is that the game logic is missing a check whether or not it will go into an endless loop.</p>

<iframe width="560" height="315" src="http://atodorov.org//www.youtube.com/embed/haBepFwyaxY" frameborder="0" allowfullscreen></iframe>


<p>This bug seems to be generic for the entire game. It pops up also on
level 137 in the Owl part of the game (recorded by somebody else):</p>

<iframe width="420" height="315" src="http://atodorov.org//www.youtube.com/embed/6q1_LIdamqw" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BlackBerry Z10 is Killing My WiFi Router]]></title>
    <link href="http://atodorov.org/blog/2014/12/22/blackberry-z10-is-killing-my-wifi-router/"/>
    <updated>2014-12-22T15:46:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/12/22/blackberry-z10-is-killing-my-wifi-router</id>
    <content type="html"><![CDATA[<p>Few days ago I&#8217;ve resurrected my BlackBerry Z10 only to find out that it kills
my WiFi router shortly after connecting to the network.
It looks like many people are having the same problem with BlackBerry but most forum
threads don&#8217;t offer a meaningful solution so I did some tests.</p>

<p>Everything works fine when WiFi mode is set to either 11bgn mixed or 11n only and
WiFi security is disabled.</p>

<p>When using WPA2/Personal security mode and AES encryption the problem occurs
regardless of which WiFi mode is used. There is another type of encryption called TKIP
but the device itself warns that this is not supported by the 802.11n specification
(all my devices use it anyway).</p>

<p>So to recap:
<strong>BlackBerry Z10 causes my TP-Link router to die if using WPA2/Personal security with
AES Encryption. Switching to open network with MAC address filtering works fine!</strong></p>

<p>I haven&#8217;t had the time to upgrade the firmware of this router and see if the problem persists.
Most likely I&#8217;ll just go ahead and flash it with OpenWRT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Comparison of Web Proxies Written in Python Twisted and Go]]></title>
    <link href="http://atodorov.org/blog/2014/11/19/speed-comparison-of-web-proxies-written-in-python-twisted-and-go/"/>
    <updated>2014-11-19T16:57:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/19/speed-comparison-of-web-proxies-written-in-python-twisted-and-go</id>
    <content type="html"><![CDATA[<p>After I figured out that
<a href="http://atodorov.org/blog/2014/11/11/speeding-up-celery-backends-part-3/">Celery is rather slow</a>
I moved on to test another part of my environment - a web proxy server.
The test here compares two proxy
<a href="https://gist.github.com/atodorov/666035d270d97d982cd5">implementations</a>
- one with Python Twisted,
the other in Go. The backend is a simple web server written in Go, which is
probably the fastest thing when it comes to serving HTML.</p>

<p>The test content is a snapshot of the front page of this blog taken few days ago.
The system is a standard Lenovo X220 laptop, with Intel Core i7 CPU, with 4 cores.
The measurement instrument is the popular wrk tool with a
<a href="http://atodorov.org/blog/2014/11/18/proxy-support-for-wrk-http-benchmarking-tool/">custom Lua script to redirect the requests through the proxy</a>.</p>

<p>All tests were repeated several times, only the best results are shown here.
I&#8217;ve taken time between the tests in order for all open TCP ports to close.
I&#8217;ve also observed the number of open ports (e.g. sockets) using <code>netstat</code>.</p>

<h2>Baseline</h2>

<p>Using wrk against the web server in Go yields around 30000 requests per second
with an average of 2000 TCP ports in use:</p>

<pre><code>$ ./wrk -c1000 -t20 -d30s http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:8000/atodorov.html
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   304.43ms  518.27ms   1.47s    82.69%
    Req/Sec     1.72k     2.45k   17.63k    88.70%
  1016810 requests in 29.97s, 34.73GB read
  Non-2xx or 3xx responses: 685544
Requests/sec:  33928.41
Transfer/sec:      1.16GB
</code></pre>

<h2>Python Twisted</h2>

<p>The <a href="https://gist.github.com/atodorov/666035d270d97d982cd5">Twisted implementation</a>
performs at little over 1000 reqs/sec with an average TCP port use between 20000 and 30000:</p>

<pre><code>./wrk -c1000 -t20 -d30s http://127.0.0.1:8080 -s scripts/proxy.lua -- http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:8080
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   335.53ms  117.26ms 707.57ms   64.77%
    Req/Sec   104.14     72.19   335.00     55.94%
  40449 requests in 30.02s, 3.67GB read
  Socket errors: connect 0, read 0, write 0, timeout 8542
  Non-2xx or 3xx responses: 5382
Requests/sec:   1347.55
Transfer/sec:    125.12MB
</code></pre>

<h2>Go proxy</h2>

<p>First I&#8217;ve run several 30 seconds tests and performance was around 8000 req/sec
with around 20000 ports used (most of them remain in TIME_WAIT state for a while).
Then I&#8217;ve modified <code>proxy.go</code> to make use of all available CPUs on the system and let
the test run for 5 minutes.</p>

<pre><code>$ ./wrk -c1000 -t20 -d300s http://127.0.0.1:9090 -s scripts/proxy.lua -- http://127.0.0.1:8000/atodorov.html
Running 5m test @ http://127.0.0.1:9090
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   137.22ms  437.95ms   4.45s    97.55%
    Req/Sec   669.54    198.52     1.71k    76.40%
  3423108 requests in 5.00m, 58.27GB read
  Socket errors: connect 0, read 26, write 181, timeout 24268
  Non-2xx or 3xx responses: 2870522
Requests/sec:  11404.19
Transfer/sec:    198.78MB
</code></pre>

<p>Performance peaked at 10000 req/sec. TCP port usage initially rose to around 30000
but rapidly dropped and stayed around 3000. Both <code>webserver.go</code> and <code>proxy.go</code> were
printing the following messages on the console:</p>

<pre><code>2014/11/18 21:53:06 http: Accept error: accept tcp [::]:9090: too many open files; retrying in 1s
</code></pre>

<h2>Conclusion</h2>

<p>There&#8217;s no doubt that Go is blazingly fast compared to Python and I&#8217;m most likely to use it
further in my experiments. Still I didn&#8217;t expect a 3x difference in performance from webserver vs. proxy.</p>

<p>Another thing that worries me is the huge number of open TCP ports which then drops and stays
consistent over time and the error messages from both webserver and proxy (maybe per process sockets limit).</p>

<p>At the moment I&#8217;m not aware of the internal workings of neither wrk, nor
Go itself, nor the goproxy library to make conclusion if this is a bad thing or expected.
I&#8217;m eager to hear what others think in the comments. Thanks!</p>

<h2>Update 2015-01-27</h2>

<p>I have retested with PyPy but on a different system so I&#8217;m giving all the test results
on it as well. <code>/proc/cpuinfo</code> says we have 16 x Intel(R) Xeon(R) CPU E5-2450L 0 @ 1.80GHz
CPUs.</p>

<p>Baseline - Go server:</p>

<pre><code>$ ./wrk -c1000 -t20 -d30s http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:8000/atodorov.html
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    15.57ms   20.38ms 238.93ms   98.11%
    Req/Sec     3.55k     1.32k   15.91k    82.49%
  1980738 requests in 30.00s, 174.53GB read
  Socket errors: connect 0, read 0, write 0, timeout 602
  Non-2xx or 3xx responses: 60331
Requests/sec:  66022.87
Transfer/sec:      5.82GB
</code></pre>

<p>Go proxy (30 sec):</p>

<pre><code>$ ./wrk -c1000 -t20 -d30s http://127.0.0.1:9090 -s scripts/proxy.lua -- http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:9090
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    68.93ms  718.98ms  12.60s    99.58%
    Req/Sec     1.61k   784.01     4.83k    62.50%
  942757 requests in 30.00s, 32.16GB read
  Socket errors: connect 0, read 26, write 0, timeout 3050
  Non-2xx or 3xx responses: 589940
Requests/sec:  31425.47
Transfer/sec:      1.07GB
</code></pre>

<p>Python proxy with <code>Twisted==14.0.2</code> and <code>pypy-2.2.1-2.el7.x86_64</code>:</p>

<pre><code>$ ./wrk -c1000 -t20 -d30s http://127.0.0.1:8080 -s scripts/proxy.lua -- http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:8080
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   858.75ms    1.47s    6.00s    88.09%
    Req/Sec   146.39    104.83   341.00     54.18%
  85645 requests in 30.00s, 853.54MB read
  Socket errors: connect 0, read 289, write 0, timeout 3297
  Non-2xx or 3xx responses: 76567
Requests/sec:   2854.45
Transfer/sec:     28.45MB
</code></pre>

<p><strong>Update 2015-01-27-2</strong></p>

<p>Python proxy with <code>Twisted==14.0.2</code> and <code>python-2.7.5-16.el7.x86_64</code>:</p>

<pre><code>$ ./wrk -c1000 -t20 -d30s http://127.0.0.1:8080 -s scripts/proxy.lua -- http://127.0.0.1:8000/atodorov.html
Running 30s test @ http://127.0.0.1:8080
  20 threads and 1000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   739.64ms    1.58s   14.22s    96.18%
    Req/Sec    84.43     36.61   157.00     67.79%
  49173 requests in 30.01s, 701.77MB read
  Socket errors: connect 0, read 240, write 0, timeout 2463
  Non-2xx or 3xx responses: 41683
Requests/sec:   1638.38
Transfer/sec:     23.38MB
</code></pre>

<p>As seen Go proxy is slower than the Go server by factor of 2.
Python proxy is slower by than the Go server by factor of 20.
These results are similar to previous ones so I don&#8217;t think PyPy
makes any significant difference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy Support for wrk HTTP Benchmarking Tool]]></title>
    <link href="http://atodorov.org/blog/2014/11/18/proxy-support-for-wrk-http-benchmarking-tool/"/>
    <updated>2014-11-18T10:04:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/18/proxy-support-for-wrk-http-benchmarking-tool</id>
    <content type="html"><![CDATA[<p>Few times recently I&#8217;ve seen people using an HTTP benchmarking tool called
<a href="https://github.com/wg/wrk">wrk</a> and decided to give it a try. It is a very cool
instrument but didn&#8217;t fit my use case perfectly. What I needed is to be able to
redirect the connection through a web proxy and measure how much the proxy
slows down things compared to hitting the web server directly with wrk.
In other words - how fast is the proxy server.</p>

<h2>How does a proxy work</h2>

<p>I&#8217;ve examined the source code of two proxies (one in Python and another one in Go)
and what happens is this:</p>

<ul>
<li>The proxy server starts listening to a TCP port</li>
<li>A client (e.g. the browser) sends the request using an absolute URL (GET http://example.com/about.html)</li>
<li>Instead of connecting directly to the web server behind example.com the client connects to the proxy</li>
<li>The proxy server does connect to example.com directly, reads the response and delivers it back to
the client.</li>
</ul>


<h2>Proxy in wrk</h2>

<p>Luckily wrk supports the execution of Lua scripts so we can make a
<a href="https://github.com/wg/wrk/pull/107">simple script</a> like this:</p>

<pre><code>init = function(args)
    target_url = args[1] -- proxy needs absolute URL
end

request = function()
    return wrk.format("GET", target_url)
end
</code></pre>

<p>Then update your command line to something like this:</p>

<pre><code>./wrk [options] http://proxy:port -s proxy.lua -- http://example.com/about.html
</code></pre>

<p>This causes wrk to connect to our proxy server but instead issue GET requests for another URL.
Depending on how your proxy works you may need to add the <code>Host: example.com</code> header as well.
Now let&#8217;s do some testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HackFMI SMS Delivery Powered by Twilio]]></title>
    <link href="http://atodorov.org/blog/2014/11/17/hackfmi-sms-delivery-powered-by-twilio/"/>
    <updated>2014-11-17T15:00:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/17/hackfmi-sms-delivery-powered-by-twilio</id>
    <content type="html"><![CDATA[<p>Ten days ago the regular <a href="http://hackfmi.com/">HackFMI</a> competition was held.
This year they tried sending SMS notifications to all participants which was powered
by <a href="http://twilio.com">Twilio</a> both in terms of infrastructure and cost.</p>

<p><strong>Twilio</strong> provided a <strong>20$ upgrade code</strong> valid in the next 6 months for all new accounts.
This was officially announced at the opening ceremony (although at the last possible time) of the
competition, however no teams decided to incorporate SMS/Voice into their games.
I&#8217;m a little disappointed by this fact.</p>

<p>In terms of software a simple <a href="https://github.com/atodorov/django-twilio-sms">Django app</a>
was used. It is by no means production ready but does the job and was quick to write.</p>

<p>A little over 300 messages were sent with number distribution as follows:</p>

<ul>
<li>Mtel - 166</li>
<li>Globul - 86</li>
<li>Vivacom - 50</li>
</ul>


<p>The total price for Mtel and Globul messages is roughly the same because sending
SMS to Globul via Twilio is as twice expensive. The total sums up to about 25 $.
HackFMI team used two accounts to send the messages - one using the provided
20$ upgrade code from Twilio and the second one was mine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up Celery Backends, Part 3]]></title>
    <link href="http://atodorov.org/blog/2014/11/11/speeding-up-celery-backends-part-3/"/>
    <updated>2014-11-11T15:59:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/11/speeding-up-celery-backends-part-3</id>
    <content type="html"><![CDATA[<p>In the second part of this article we&#8217;ve seen
<a href="http://atodorov.org/blog/2014/11/07/speeding-up-celery-backends-part-2/">how slow Celery actually is</a>.
Now let&#8217;s explore what happens inside and see if we can&#8217;t speed things up.</p>

<p>I&#8217;ve used <a href="http://pycallgraph.slowchop.com/en/latest/">pycallgraph</a> to create
call graph visualizations of my application. It has the nice feature to also show
execution time and use different colors for fast and slow operations.</p>

<p>Full command line is:</p>

<pre><code>pycallgraph -v --stdlib --include ... graphviz -o calls.png -- ./manage.py celery_load_test
</code></pre>

<p>where the <code>--include</code> is used to limit the graph to a particular Python module(s).</p>

<h2>General findings</h2>

<p><img src="http://atodorov.org/images/celery/general.png" title="call graph" alt="call graph" /></p>

<ul>
<li>The first four calls is where most of the time is spent as seen on the picture.</li>
<li>As it seems most of the slow down comes from Celery itself, not the underlying messaging
transport Kombu (not shown on picture)</li>
<li><code>celery.app.amqp.TaskProducer.publish_task</code> takes half of the execution time of
<code>celery.app.base.Celery.send_task</code></li>
<li><code>celery.app.task.Task.delay</code> directly executes <code>.apply_async</code> and can be skipped if one
rewrites the code.</li>
</ul>


<h2>More findings</h2>

<p>In <code>celery.app.base.Celery.send_task</code> there is this block of code:</p>

<pre><code>349         with self.producer_or_acquire(producer) as P:
350             self.backend.on_task_call(P, task_id)
351             task_id = P.publish_task(
352                 name, args, kwargs, countdown=countdown, eta=eta,
353                 task_id=task_id, expires=expires,
354                 callbacks=maybe_list(link), errbacks=maybe_list(link_error),
355                 reply_to=reply_to or self.oid, **options
356             )
</code></pre>

<p><code>producer</code> is always None because delay() doesn&#8217;t pass it as argument.
I&#8217;ve tried passing it explicitly to apply_async() as so:</p>

<pre><code>from djapp.celery import *

# app = debug_task._get_app() # if not defined in djapp.celery
producer = app.amqp.producer_pool.acquire(block=True)
debug_task.apply_async(producer=producer)
</code></pre>

<p>However this doesn&#8217;t speedup anything. If we replace the above code block like this:</p>

<pre><code>349         with producer as P:
</code></pre>

<p>it blows up on the second iteration because producer and its channel is already None !?!</p>

<p>If you are unfamiliar with the with statement in Python please read
<a href="http://effbot.org/zone/python-with-statement.htm">this article</a>. In short the with statement is
a compact way of writing try/finally. The underlying <code>kombu.messaging.Producer</code> class does a
<code>self.release()</code> on exit of the with statement.</p>

<p>I also tried killing the with statement and using producer directly but with limited success. While
it was not released(was non None) on subsequent iterations the memory usage grew much more and there
wasn&#8217;t any performance boost.</p>

<h2>Conclusion</h2>

<p>The with statement is used throughout both Celery and Kombu and I&#8217;m not at all sure if
there&#8217;s a mechanism for keep-alive connections. My time constraints are limited and I&#8217;ll probably
not spend anymore time on this problem soon.</p>

<p>Since my use case involves task producer and consumers on localhost I&#8217;ll try to workaround the
current limitations by using Kombu directly
(see <a href="https://gist.github.com/atodorov/2bc1fcd34531ad260ed7">this gist</a>) with a transport that
uses either a UNIX domain socket or a name pipe (FIFO) file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up Celery Backends, Part 2]]></title>
    <link href="http://atodorov.org/blog/2014/11/07/speeding-up-celery-backends-part-2/"/>
    <updated>2014-11-07T15:48:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/07/speeding-up-celery-backends-part-2</id>
    <content type="html"><![CDATA[<p>In the <a href="http://atodorov.org/blog/2014/11/05/speeding-up-celery-backends/">first part</a> of this
post I looked at a few celery backends and discovered they didn&#8217;t meet my needs.
Why is the Celery stack slow? How slow is it actually?</p>

<h2>How slow is Celery in practice</h2>

<ul>
<li>Queue: 500`000 msg/sec</li>
<li>Kombu:  14`000 msg/sec</li>
<li>Celery:  2`000 msg/sec</li>
</ul>


<h2>Detailed test description</h2>

<p>There are three main components of the Celery stack:</p>

<ul>
<li>Celery itself</li>
<li>Kombu which handles the transport layer</li>
<li>Python Queue()&#8217;s underlying everything</li>
</ul>


<p>Using the <a href="https://gist.github.com/atodorov/2bc1fcd34531ad260ed7">Queue and Kombu tests</a>
run for 1 000 000 messages I got the following results:</p>

<ul>
<li>Raw Python Queue: Msgs per sec: 500`000</li>
<li>Raw Kombu without Celery where <code>kombu/utils/__init__.py:uuid()</code> is set to return 0

<ul>
<li>with json serializer: Msgs per sec: 5`988</li>
<li>with pickle serializer: Msgs per sec: 12`820</li>
<li>with the custom mem_serializer from <a href="http://atodorov.org/blog/2014/11/05/speeding-up-celery-backends/">part 1</a>:
Msgs per sec: 14`492</li>
</ul>
</li>
</ul>


<p><strong>Note:</strong> when the test is executed with 100K messages mem_serializer yielded
25`000 msg/sec then the performance is saturated. I&#8217;ve observed similar behavior
with raw Python Queue()&#8217;s. I saw some cache buffers being managed internally to avoid OOM
exceptions. This is probably the main reason performance becomes saturated over a longer
execution.</p>

<ul>
<li>Using <a href="https://gist.github.com/atodorov/0156cc41491a5e1ff953">celery_load_test.py</a> modified to
loop 1 000 000 times I got 1908.0 tasks created per sec.</li>
</ul>


<p>Another interesting this worth outlining - in the kombu test there are these lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>with producers[connection].acquire(block=True) as producer:
</span><span class='line'>    for j in range(1000000):</span></code></pre></td></tr></table></div></figure>


<p>If we swap them the performance drops down to 3875 msg/sec which is comparable with the
Celery results. Indeed inside Celery there&#8217;s the same <code>with producer.acquire(block=True)</code>
construct which is executed every time a new task is published. Next I will be looking
into this to figure out exactly where the slowliness comes from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up Celery Backends, Part 1]]></title>
    <link href="http://atodorov.org/blog/2014/11/05/speeding-up-celery-backends/"/>
    <updated>2014-11-05T15:20:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/05/speeding-up-celery-backends</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on an application which fires a lot of Celery tasks - the more
the better! Unfortunately Celery backends seem to be rather slow :(.
Using the <a href="https://gist.github.com/atodorov/0156cc41491a5e1ff953">celery_load_test.py</a>
command for Django I was able to capture some metrics:</p>

<ul>
<li>Amazon SQS backend: 2 or 3 tasks/sec</li>
<li>Filesystem backend: 2000 - 2500 tasks/sec</li>
<li>Memory backend: around 3000 tasks/sec</li>
</ul>


<p>Not bad but I need in the order of 10000 tasks created per sec!
The other noticeable thing is that memory backend isn&#8217;t much faster compared to
the filesystem one! NB: all of these backends actually come from the kombu package.</p>

<h2>Why is Celery slow ?</h2>

<p>Using <code>celery_load_test.py</code> together with
<a href="http://atodorov.org/blog/2014/11/05/performance-profiling-in-python-with-cprofile/">cProfile</a> I
was able to pin-point some problematic areas:</p>

<ul>
<li><code>kombu/transports/virtual/__init__.py</code>: class Channel.basic_publish() - does
self.encode_body() into base64 encoded string. Fixed with custom transport backend
I called fastmemory which redefines the body_encoding property:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@cached_property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">body_encoding</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Celery uses json or pickle (or other) serializers to serialize the data.
While json yields between 2000-3000 tasks/sec, pickle does around 3500 tasks/sec.
Replacing with a custom serializer which just returns
the objects (since we read/write from/to memory) yields about 4000 tasks/sec tops:</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">kombu.serialization</span> <span class="kn">import</span> <span class="n">register</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">loads</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">dumps</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="n">register</span><span class="p">(</span><span class="s">&#39;mem_serializer&#39;</span><span class="p">,</span> <span class="n">dumps</span><span class="p">,</span> <span class="n">loads</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;application/x-memory&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content_encoding</span><span class="o">=</span><span class="s">&#39;binary&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>kombu/utils/__init__.py</code>: def uuid() - generates random unique identifiers
which is a slow operation. Replacing it with <code>return "00000000"</code> boosts performance
to 7000 tasks/sec.</li>
</ul>


<p>It&#8217;s clear that a constant UUID is not of any practical use but serves well to illustrate
how much does this function affect performance.</p>

<p><strong>Note:</strong>
Subsequent executions of <code>celery_load_test</code> seem to report degraded performance even with
the most optimized transport backend. I&#8217;m not sure why is this. One possibility is the random
UUID usage in other parts of the Celery/Kombu stack which drains entropy on the system and
generating more random numbers becomes slower. If you know better please tell me!</p>

<p>I will be looking for a better understanding
of these IDs in Celery and hope to be able to produce a faster uuid() function. Then I&#8217;ll be
exploring the transport stack even more in order to reach the goal of 10000 tasks/sec.
If you have any suggestions or pointers please share them in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Profiling in Python with cProfile]]></title>
    <link href="http://atodorov.org/blog/2014/11/05/performance-profiling-in-python-with-cprofile/"/>
    <updated>2014-11-05T14:40:00+02:00</updated>
    <id>http://atodorov.org/blog/2014/11/05/performance-profiling-in-python-with-cprofile</id>
    <content type="html"><![CDATA[<p>This is a quick reference on profiling Python applications with
<a href="https://docs.python.org/2/library/profile.html#module-cProfile">cProfile</a>:</p>

<pre><code>$ python -m cProfile -s time application.py
</code></pre>

<p>The output is sorted by execution time <code>-s time</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>9072842 function calls (8882140 primitive calls) in 9.830 CPU seconds
</span><span class='line'>
</span><span class='line'>   Ordered by: internal time
</span><span class='line'>
</span><span class='line'>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
</span><span class='line'>    61868    0.575    0.000    0.861    0.000 abstract.py:28(__init__)
</span><span class='line'>    41250    0.527    0.000    0.660    0.000 uuid.py:101(__init__)
</span><span class='line'>    61863    0.405    0.000    1.054    0.000 abstract.py:40(as_dict)
</span><span class='line'>    41243    0.343    0.000    1.131    0.000 __init__.py:143(uuid4)
</span><span class='line'>   577388    0.338    0.000    0.649    0.000 abstract.py:46(&lt;genexpr>)
</span><span class='line'>    20622    0.289    0.000    8.824    0.000 base.py:331(send_task)
</span><span class='line'>    61907    0.232    0.000    0.477    0.000 datastructures.py:467(__getitem__)
</span><span class='line'>    20622    0.225    0.000    9.298    0.000 task.py:455(apply_async)
</span><span class='line'>    61863    0.218    0.000    2.502    0.000 abstract.py:52(__copy__)
</span><span class='line'>    20621    0.208    0.000    4.766    0.000 amqp.py:208(publish_task)
</span><span class='line'>   462640    0.193    0.000    0.247    0.000 {isinstance}
</span><span class='line'>   515525    0.162    0.000    0.193    0.000 abstract.py:41(f)
</span><span class='line'>    41246    0.153    0.000    0.633    0.000 entity.py:143(__init__)</span></code></pre></td></tr></table></div></figure>


<p>In the example above (actual application) first line is kombu&#8217;s
<code>abstract.py: class Object(object).__init__()</code>
and the second one is Python&#8217;s
<code>uuid.py: class UUID().__init__()</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Mtel, the Biggest Mobile Operator in Bulgaria, Fucked-Up Their Online Invoice System]]></title>
    <link href="http://atodorov.org/blog/2014/10/14/mtel-fuck-up-online-invoices/"/>
    <updated>2014-10-14T09:08:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/10/14/mtel-fuck-up-online-invoices</id>
    <content type="html"><![CDATA[<p>Prompted by <a href="http://radorado.me/">Rado&#8217;s</a> post about
<a href="https://www.facebook.com/radorado.radoslav.georgiev/posts/10204276374941470">Mtel not fixing a business customer Internet connection</a>
I want to tell you a story about how the big company totally fucked up their
online invoice system and give you a few more hints about how stupidity
reigns supreme even in big companies, especially in Bulgaria.</p>

<p>I&#8217;ve never received a paper invoice for my phone bill and used the website to access any information
about my bills and calls duration, etc. The problem is that I ported my number to another operator.</p>

<p><strong>Porting a number away from Mtel automatically cuts access to your previous invoices online</strong></p>

<h2>The problem in technical terms</h2>

<p>This is a tech blog so let&#8217;s be technical. Users can register at Mtel&#8217;s website via
username and password. If they are customers then they can add their numbers to their
profile. Once the number is verified (via SMS code), the user has access to additional services
one of which is online invoices and monthly usage reports.</p>

<p>Migrating away to another operator &#8220;erases&#8221; your number from the system but
this is not true actually. All the information is still there because they can give me
print outs if I pay all the extra fees and simply because no business will voluntarily
erase their database records.</p>

<p><strong>The genius who designed the <em>if-number-migrated-then-delete-from-user-profile-and-cut-off-access</em>
business process/software implementation is the biggest idiot in the world.</strong></p>

<h2>How Mtel handled my complaint</h2>

<p>My request for
explanation (see below) was answered with a nice letter, basically telling me to piss off. None of my
questions were answered. To make things worse they want to charge extra fees for detailed print outs.</p>

<p>What I&#8217;ve asked for:</p>

<ul>
<li>To be granted access back to all of my invoices online. Not only I paid for them but this
is something of a personal information;</li>
<li>To be given copies of my last 5 invoices, preferably via email;</li>
<li>To be given explanation why my online access to previous invoices was cut off;</li>
<li>Mtel to stop doing this and allow access to online invoices for everyone of their past
or current customers;</li>
</ul>


<p>I&#8217;ve also told them I&#8217;m available to help them fix their system if they don&#8217;t have
the resources to do so (hint, hint: it&#8217;s an if-then condition or something very close I bet).</p>

<p>A copy of my complaint and the response to it (in Bulgarian only):</p>

<p><img src="http://atodorov.org/images/mtel/complaint_01.jpg" title="Complaint" alt="&quot;Complaint&quot;" />
<img src="http://atodorov.org/images/mtel/complaint_01.jpg" title="Complaint" alt="&quot;Complaint&quot;" />
<img src="http://atodorov.org/images/mtel/response.jpg" title="Response" alt="&quot;Response&quot;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shutdown Your Startup in 7 Steps]]></title>
    <link href="http://atodorov.org/blog/2014/10/13/shutdown-your-startup-in-7-steps/"/>
    <updated>2014-10-13T14:17:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/10/13/shutdown-your-startup-in-7-steps</id>
    <content type="html"><![CDATA[<p>A month ago one of my startups Difio stopped working forever.
This is the story of how to go about shutting down a working
web service and not about why it came around to this.</p>

<h2>Step #1: Disable new registrations</h2>

<p>You obviously need to make sure new customers
arriving at your web site will not sing up to only find the service is
shutting down later.</p>

<p>Disable whatever sign-on/registration system you have in place
but leave currently registered users to login as they wish.</p>

<h2>Step #2: Disable payments</h2>

<p>Difio had paying customers, just not enough of them and it was based on
a subscription model which was automatically renewed without any interaction
from the customer.</p>

<p>The first thing I did was to disable all payments for the service which
was quite easy (just a few comments) because Difio used an external payment
processor.</p>

<p>Next thing was to go through all subscriptions that were still active and
cancel them. This prevented the payment processor to automatically charge
the customers next time their subscription renewal was due.</p>

<p>Because all subscriptions were charged in advance and when canceled were
still considered active (due to expire at some later date) Difio had to
keep operating at least one month after all subscriptions have been canceled.</p>

<h2>Step #3: Notify all customers that you are shutting down</h2>

<p>I scheduled this to happen right after the last subscription was canceled.
An email to everyone who registered to the website and a blog post should work
for most startups. See ours <a href="http://www.dif.io/blog/2014/08/10/difio-is-shutting-down/">here</a>.</p>

<p>Make sure to provide a gratis period if necessary. Difio had a gratis period
of one month after the shutdown announcement.</p>

<h2>Step #4: Disable all external triggers</h2>

<p>Difio was a complex piece of software which relied on external triggers like
web hooks and repetitive tasks executed by cron.</p>

<p>Disabling these will prevent external services or hosting providers
getting errors about your URLs not being accessible. It is just polite
to do so.</p>

<p>You may want to keep these still operational during the gratis period
before the physical shutdown or disable them straight away. In Difio&#8217;s
case they were left operational because there were customers who have paid
in advance and relied on this functionality.</p>

<h2>Step #5: Prepare your &#8216;Service Disabled&#8217; banner</h2>

<p>You will probably want to let people know why something isn&#8217;t working
as it used (or is expected) to be. A simple page explaining that
you&#8217;re going to shut down should be enough.</p>

<p>Difio required the user to be logged in to see most of the website.
This made it very easy to redirect everything to the same page.
A few more places were linking to public URLs which were manually rewritten
to point to the same &#8216;Service Disabled&#8217; page.</p>

<p>It is the same page used previously to redirect new registrations to.</p>

<h2>Step #6: Terminate all processing resources</h2>

<p>Difio used both AWS EC2 instances and an OpenShift PaaS instance to do its
processing. Simply terminating all of them was enough. The only thing left
is a couple of static HTML pages behind the domain.</p>

<h2>Step #7: Database archival</h2>

<p>The last thing you need to do is archive your database. Although the
startup is out of business already you have gathered additional information
which may come handy at a later time.</p>

<p>Difio didn&#8217;t collect any personal information about its users, except email
and didn&#8217;t store financial information either. This made it safe to just make
a backup of the database and leave it lurking around on disk.</p>

<p>However beware
if you have collected personal and/or financial information from your customers.
You may want to erase/anonymize some of it before doing your backups and
probably safeguard them from unauthorized access.</p>

<p>That&#8217;s it, your startup is officially dead now! Let me know if I&#8217;ve missed
something in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traction: A Startup Guide to Getting Customers]]></title>
    <link href="http://atodorov.org/blog/2014/09/30/traction-a-startup-guide-to-getting-customers/"/>
    <updated>2014-09-30T10:43:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/09/30/traction-a-startup-guide-to-getting-customers</id>
    <content type="html"><![CDATA[<blockquote><p>Many entrepreneurs who build great products simply don&#8217;t have a good distribution strategy.</p><footer><strong>Mark Andreessen</strong> <cite>Venture Capitalist</cite></footer></blockquote>


<p><a href="http://www.amazon.com/gp/product/B00N06Y2DW/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00N06Y2DW&linkCode=as2&tag=atodorovorg-20&linkId=4GDHEYN66CPL7L72">Traction: A Startup Guide to Getting Customers</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=B00N06Y2DW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
introduces startup founders and employees to the &#8220;Bullseye Framework,&#8221;
a five-step process successful companies use to get traction.
This framework helps founders find the marketing channel that will be key to unlocking the next stage of growth.</p>

<p>Too often, startups building a product struggle with traction once they launch.
This struggle has startups trying random tactics - some ads, a blog post or two - in an unstructured way that leads to failure.
Traction shows readers how to systematically approach marketing, and covers how successful businesses have grown through each of
the following 19 channels:</p>

<ul>
<li>Viral Marketing</li>
<li>Public Relations (PR)</li>
<li>Unconventional PR</li>
<li>Search Engine Marketing (SEM)</li>
<li>Social and Display Ads</li>
<li>Offline Ads</li>
<li>Search Engine Optimization (SEO)</li>
<li>Content Marketing</li>
<li>Email Marketing</li>
<li>Engineering as Marketing</li>
<li>Target Market Blogs</li>
<li>Business Development (BD)</li>
<li>Sales</li>
<li>Affiliate Programs</li>
<li>Existing Platforms</li>
<li>Trade Shows</li>
<li>Offline Events</li>
<li>Speaking Engagements</li>
<li>Community Building</li>
</ul>


<p>The book is very easy to read and full of practical advice which should serve as a starting point and give you
more ideas how to approach a particular distribution channel. It took me two days to read and
I already had some ideas to test even before reading the whole of it. My next steps are to apply the principles
to my current startup <a href="http://obuvki41plus.com">Obuvki 41 Plus</a> and a future one I have in mind.</p>

<p>To anyone building a startup of any kind I would recommend the following selection of books:</p>

<ul>
<li><a href="http://www.amazon.com/gp/product/1591847788/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1591847788&linkCode=as2&tag=atodorovorg-20&linkId=IR465SOS3KA4BJLF">Hooked: How to Build Habit-Forming Products</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=1591847788" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
to learn how to make products (especially mobile apps) that customers keep using on their own without
additional external marketing (<a href="http://atodorov.org/blog/2014/01/28/book-review-january-2014/">review here</a>)</li>
<li><a href="http://www.amazon.com/gp/product/1449334911/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449334911&linkCode=as2&tag=atodorovorg-20&linkId=MHLGJPMJDO4FJDQB">UX for Lean Startups</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=1449334911" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
lean product development (<a href="http://atodorov.org/blog/2013/12/09/book-review-ux-for-lean-startups/">review here</a>)</li>
<li><a href="http://www.amazon.com/gp/product/B00N06Y2DW/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00N06Y2DW&linkCode=as2&tag=atodorovorg-20&linkId=AYMPCBH4MP5PC6G5">Traction: A Startup Guide to Getting Customers</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=B00N06Y2DW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> -
customer growth development</li>
</ul>


<p>Start reading right now (and also support this blog) by following the links below:</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=1591847788&asins=1591847788&linkId=SXJNPAOV2J4SKU4G&show_border=true&link_opens_in_new_window=true">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=1449334911&asins=1449334911&linkId=7UM2YUNUK5UNVPSI&show_border=true&link_opens_in_new_window=true">
</iframe>




<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://atodorov.org//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=atodorovorg-20&marketplace=amazon&region=US&placement=B00N06Y2DW&asins=B00N06Y2DW&linkId=WS2AWWLBNFAFA5PO&show_border=true&link_opens_in_new_window=true">
</iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: The 4-Hour Workweek]]></title>
    <link href="http://atodorov.org/blog/2014/08/03/book-review-4-hour-workweek/"/>
    <updated>2014-08-03T11:47:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/08/03/book-review-4-hour-workweek</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0307465357/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0307465357&linkCode=as2&tag=atodorovorg-20&linkId=MNAE55VHLT2NVN2Z">The 4-Hour Workweek: Escape 9-5, Live Anywhere, and Join the New Rich</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=0307465357" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
by Timothy Ferriss is one of my all time favorite books.
The basic idea is to ditch the traditional working environment
and work less utilizing more automation.</p>

<blockquote><p>Whenever you find yourself on the side of the majority, it is time to pause and reflect.</p><footer><strong>MARK TWAIN</strong></footer></blockquote>


<p>The book starts with a story about the Tango World Championship semifinals in
Argentina and poses the question
<em>“What on earth would I be doing right now, if I hadn’t left my job and the U.S. over a year ago?”</em>
Can you answer this? Keep reading!</p>

<h2>Step 1: Definition</h2>

<p>Tim defines two groups of people. The Deferrers, those who save it all for the
end only to find that life has passed them by and the New Rich.</p>

<blockquote><p>* The employee who rearranges his schedule and negotiates a remote work agreement<br/>  to achieve 90% of the results in one-tenth of the time, which frees him to<br/>  practice cross-country skiing and take road trips with his family two weeks per<br/>  month.</p><p>* The business owner who eliminates the least profitable customers and projects,<br/>  outsources all operations entirely, and travels the world collecting rare<br/>  documents, all while working remotely on a website to showcase her own<br/>  illustration work.</p><p>* The student who elects to risk it all—which is nothing—to establish an online<br/>  video rental service that delivers $5,000 per month in income from a small niche<br/>  of Blu-ray aficionados, a two-hour-per-week side project that allows him to work<br/>  full-time as an animal rights lobbyist.</p></blockquote>


<p>The possibilities are endless. What defines the New Rich is their unrestricted mobility
and availability of free time! Money alone doesn&#8217;t count anymore. Its practical value is
multiplied by the <em>what</em>, <em>when</em>, <em>where</em> and with <em>whom</em> you do what you do.</p>

<p>From that point of view earning less money but spending far less time on that is
much more powerful than working 80 hours per week for a million dollars.</p>

<h2>Step 2: Elimination</h2>

<blockquote><p>One does not accumulate but eliminate.<br/>It is not daily increase but daily decrease.<br/>The height of cultivation always runs to simplicity.</p><footer><strong>BRUCE LEE</strong></footer></blockquote>


<p>In this chapter Tim talks about developing selective ignorance of information,
the 80-20 <a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto principle</a>,
gives tips for faster reading and battling interruption like checking your e-mail
and smart phone.</p>

<h2>Step 3: Automation</h2>

<p>Outsourcing and technical automation are the keys here but there is more.
Tim talks about income autopilot - designing your income sources in such a way
so that they don&#8217;t consume much of your time and continue to produce income
even after the initial time investment.</p>

<p>Think about the following: working a 9-to-5 job yields an income only during
office hours. Having written a book yields income whenever a copy is sold, which
is while you&#8217;re asleep and long after the initial time investment required to
write the book.</p>

<p>Then you can diversify your income streams and voila - you&#8217;re making money
automatically :)</p>

<p>Tim also refers to the business management side of things. Why become the
manager when you can be the owner of the business ? It&#8217;s kind of hard to
let virtual assistants run your business and resolve issues for you but that
frees up your time which is more valuable.</p>

<p>In between he also mentions why as a business you should keep prices high!
Counter intuitive, isn&#8217;t it?</p>

<p>This is easier said than done but I&#8217;ve been working on it for the last couple
of years and its starting to take shape nicely so there&#8217;s truth to it.</p>

<h2>Step 4: Liberation</h2>

<p>This is the chapter which helps you escape the 9-5 office hours through some
interesting techniques. This is not only for freelancers like myself but also
for the regular employee. One of the principles is to ask for forgiveness,
not a permission (which will be denied anyway).</p>

<p>Another one boils down to:</p>

<ul>
<li>Increase company investment into you so that the loss is greater if you quit,
e.g. corporate training;</li>
<li>Prove increased output offsite - call in sick Tuesday to Thursday but continue
working. Produce more and leave some sort of digital trail, emails, etc;</li>
<li>Prepare the quantifiable business benefit - you need to present remote working
as a good business decision and not a personal perk, for example you&#8217;ve managed to
bill more hours to your company&#8217;s customers. As explanation use removal of commute
and fewer distractions from the office noise;</li>
<li>Propose a revocable trial period - plan everything that will be said but play it
cool and casual. You want to avoid the impression that remote working will be something
permanent (for now). Find a relaxed afternoon and give it a shot!</li>
<li>Expand remote time by making sure you&#8217;re most productive on your days out of the
office and if need be lower the productivity inside the office a bit. Then give it
a shot for a longer trial period or more days working remotely;</li>
</ul>


<p>There&#8217;s also another one called the hourglass approach, so named because you use a
long proof-of-concept up front to get a short remote agreement and then negotiate
back up to full-time out of the office.</p>

<p>I personally had it easier in terms of remote working. Before I became a contractor
I&#8217;ve been working with folks in the US to whom it doesn&#8217;t really matter whether I was
based in Czech Republic or in Bulgaria. Also I&#8217;ve been sick at that time and had an
important project to manage which all just played nicely in proving that I
can be productive in any location.</p>

<p>Then comes one of my favorite sections <em>Killing Your Job</em>. Boy you just have to read
this. Lots of people need to read this! Everything you are afraid of and keeps you from
quitting your job is total bulshit. There are always options. It might be emotionally
difficult, but you won’t starve!</p>

<h2>Extended edition</h2>

<p>This extended edition of the book completes with blog articles and bonus sections
like <em>Killing Your BlackBerry</em>.</p>

<blockquote><p>I’m a 37-year-old Subway franchisee owning and operating 13 stores. <br/>Been doing this for seven years. Prior to reading 4HWW I was KING at W4W<br/>(translate: work for work’s sake)<br/>&#8230;<br/>Crunched my “always open” workweek into four days and 20 hours. I immediately<br/>began taking Mondays OFF, giving me a nice three-day weekend.<br/>Tuesday to Friday I work 11 A.M.–4 P.M. (20 hours per week).<br/>&#8230;<br/>I was forced to appraise everything through the 80/20 filter and found that<br/>50% of the 80% was pure crap and the other 50% of the 80% could be done by someone<br/>on my payroll.<br/>&#8230;<br/>I still carry portable e-mail but I’ve killed “auto-sync”.<br/>Now it’s on a Tues–Fri, 11 A.M.–4 P.M. schedule.<br/>&#8230;<br/>My e-mail autoresponder eliminated 50% of my e-mail within two weeks as people sending<br/>me meaningless crap got fed up looking at my autoresponder and stopped including me.</p><footer><strong>ANDREW</strong> <cite>Self-employed in the UK</cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: How to Win Friends]]></title>
    <link href="http://atodorov.org/blog/2014/07/19/book-review-how-to-win-friends/"/>
    <updated>2014-07-19T18:05:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/07/19/book-review-how-to-win-friends</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0091906350/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0091906350&linkCode=as2&tag=atodorovorg-20&linkId=Q2DBNO4UJBZ6HQX2">How to Win Friends &amp; Influence People</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=atodorovorg-20&l=as2&o=1&a=0091906350" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
by Dale Carnegie teaches you how to deal with people. The book briefly explains
some easy to use principles, why and how they work and then provides tons of
real life examples behind those principles. This book is a must for everyone but
especially parents and teachers and folks in sales, management or business leaders.</p>

<p>I will only highlight the key points. What follows are direct quotes from the book.</p>

<h2>Part One: Fundamental Techniques in Handling People</h2>

<p><em>&#8216;If You Want to Gather Honey, Don&#8217;t Kick Over the Beehive&#8217;</em> - PRINCIPLE 1: Don&#8217;t criticise, condemn or complain.</p>

<p><em>The Big Secret of Dealing with People</em> - PRINCIPLE 2: Give honest and sincere appreciation.</p>

<p><em>&#8216;He Who Can Do This Has the Whole World with Him. He Who Cannot Walks a Lonely Way&#8217;</em> -
PRINCIPLE 3: Arouse in the other person an eager want.</p>

<h2>Part Two: Six Ways to Make People Like You</h2>

<p><em>Do This and You&#8217;ll Be Welcome Anywhere</em> - PRINCIPLE 1: Become genuinely interested in other people.</p>

<p><em>A Simple Way to Make a Good First Impression</em> - PRINCIPLE 2: Smile.</p>

<p><em>If You Don&#8217;t Do This, You Are Headed for Trouble</em> - PRINCIPLE 3:
Remember that a person&#8217;s name is to that person the sweetest and most important sound in any language.</p>

<p><em>An Easy Way to Become a Good Conversationalist</em> - PRINCIPLE 4: Be a good listener.
Encourage others to talk about themselves.</p>

<p><em>How to Interest People</em> - PRINCIPLE 5: Talk in terms of the other person&#8217;s interests.</p>

<p><em>How to Make People Like You Instantly</em> - PRINCIPLE 6: Make the other person feel important – and do it sincerely.</p>

<h2>Part Three: How to Win People to Your Way of Thinking</h2>

<p><em>You Can&#8217;t Win an Argument</em> - PRINCIPLE 1: The only way to get the best of an argument is to avoid it.</p>

<p><em>A Sure Way of Making Enemies – and How to Avoid It</em> - PRINCIPLE 2: Show respect for the other person&#8217;s opinions.
Never say, &#8216;You&#8217;re wrong&#8217;.</p>

<p><em>If You&#8217;re Wrong, Admit It</em> - PRINCIPLE 3: If you are wrong, admit it quickly and emphatically.</p>

<p><em>A Drop of Honey</em> - PRINCIPLE 4: Begin in a friendly way.</p>

<p><em>The Secret of Socrates</em> - PRINCIPLE 5: Get the other person saying &#8216;yes, yes&#8217; immediately.</p>

<p><em>The Safety Valve in Handling Complaints</em> - PRINCIPLE 6: Let the other person do a great deal of the talking.</p>

<p><em>How to Get Cooperation</em> - PRINCIPLE 7: Let the other person feel that the idea is his or hers.</p>

<p><em>A Formula That Will Work Wonders for You</em> - PRINCIPLE 8: Try honestly to see things from the other person&#8217;s point of view.</p>

<p><em>What Everybody Wants</em> - PRINCIPLE 9: Be sympathetic with the other person&#8217;s ideas and desires.</p>

<p><em>An Appeal That Everybody Likes</em> - PRINCIPLE 10: Appeal to the nobler motives.</p>

<p><em>The Movies Do It. TV Does It. Why Don&#8217;t You Do It?</em> - PRINCIPLE 11: Dramatise your ideas.</p>

<p><em>When Nothing Else Works, Try This</em> - PRINCIPLE 12: Throw down a challenge.</p>

<h2>Part Four: Be a Leader: How to Change People Without Giving Offense or Arousing Resentment</h2>

<p><em>If You Must Find Fault, This Is the Way to Begin</em> - PRINCIPLE 1: Begin with praise and honest appreciation.</p>

<p><em>How to Criticise – and Not Be Hated for It</em> - PRINCIPLE 2: Call attention to people&#8217;s mistakes indirectly.</p>

<p><em>Talk About Your Own Mistakes First</em> - PRINCIPLE 3: Talk about your own mistakes before criticising the other person.</p>

<p><em>No One Likes to Take Orders</em> - PRINCIPLE 4: Ask questions instead of giving direct orders.</p>

<p><em>Let the Other Person Save Face</em> - PRINCIPLE 5: Let the other person save face.</p>

<p><em>How to Spur People On to Success</em> - PRINCIPLE 6: Praise the slightest improvement and
praise every improvement. Be &#8216;hearty in your approbation and lavish in your praise&#8217;.</p>

<p><em>Give a Dog a Good Name</em> - PRINCIPLE 7: Give the other person a fine reputation to live up to.</p>

<p><em>Make the Fault Seem Easy to Correct</em> - PRINCIPLE 8: Use encouragement. Make the fault seem easy to correct.</p>

<p><em>Making People Glad to Do What You Want</em> - PRINCIPLE 9: Make the other person happy about doing the thing you suggest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SNAKE is no Longer Needed to Run Installation Tests in Beaker]]></title>
    <link href="http://atodorov.org/blog/2014/07/18/snake-is-no-longer-needed-to-run-installation-tests-in-beaker/"/>
    <updated>2014-07-18T23:05:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/07/18/snake-is-no-longer-needed-to-run-installation-tests-in-beaker</id>
    <content type="html"><![CDATA[<p>This is a quick status update for one of the pieces of
<a href="http://atodorov.org/blog/2013/11/19/open-source-quality-assurance-infrastructure-for-fedora-qa/">Fedora QA infrastructure</a>
and mostly a self-note.</p>

<p>Previously to control the kickstart configuration used during installation in Beaker one
had to either modify the job XML in Beaker or use SNAKE (<code>bkr workflow-snake</code>) to render
a kickstart configuration from a Python template.</p>

<p>SNAKE presented challenges when deploying and using
<a href="https://beaker.fedoraproject.org">beaker.fedoraproject.org</a> and is
virtually unmaintained.</p>

<p>I present the new <code>bkr workflow-installer-test</code> which uses Jinja2 templates to
generate a kickstart configuration when provisioning the system. This is already
available in beaker-client-0.17.1.</p>

<p>The templates make use of all Jinja2 features (as far as I can tell) so you can create
very complex ones. You can even include snippets from one template into another if required.
The standard context that is passed to the template is:</p>

<ul>
<li><strong>DISTRO</strong> - if specified, the distro name</li>
<li><strong>FAMILY</strong> - as returned by Beaker server, e.g. <em>RedHatEnterpriseLinux6</em></li>
<li><strong>OS_MAJOR</strong> and <strong>OS_MINOR</strong> - also taken from Beaker server. e.g. OS_MAJOR=6 and OS_MINOR=5 for RHEL 6.5</li>
<li><strong>VARIANT</strong> - if specified</li>
<li><strong>ARCH</strong> - CPU architecture like x86_64</li>
<li>any parameters passed to the test job with <code>--taskparam</code>. They are processed last and can override previous values.</li>
</ul>


<p>Installation related tests at <a href="https://bitbucket.org/fedoraqa/fedora-beaker-tests">fedora-beaker-tests</a>
have been updated with a <code>ks.cfg.tmpl</code> templates to use with this new workflow.</p>

<p>This workflow also has the ability to return boot arguments for the installer if needed.
If any, they should be defined in a {% block kernel_options %}{% endblock %}
block inside the template. A simpler variant is to define a comment line that stars with
<em>## kernel_options:</em></p>

<p>There are still a few issues which need to be fixed before beaker.fedoraproject.org
can be used by the general public though. I will be writing another post about that
so stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Collecting Emails - Webhooks for UserVoice and WordPress.com]]></title>
    <link href="http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress/"/>
    <updated>2014-07-12T23:15:00+03:00</updated>
    <id>http://atodorov.org/blog/2014/07/12/tip-collecting-emails-with-webhooks-uservoice-wordpress</id>
    <content type="html"><![CDATA[<p>In my practice I like to use webhooks and integrate auxiliary services with
my internal processes or businesses. One of these is the collection of emails.
In this short article I&#8217;ll show you an example of how to collect email addresses
from the comments of a WordPress.com blog and the UserVoice feedback/ticketing system.</p>

<h2>WordPress.com</h2>

<p>For your WordPress.com blog from the Admin Dashboard navigate to
Settings -> Webhooks and add a new webhook with action <code>comment_post</code>
and fields <code>comment_author</code>, <code>comment_author_email</code>. A simple
Django view that handles the input is shown below.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_wp_comment_post</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hook</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;hook&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">hook</span> <span class="o">!=</span> <span class="s">&quot;comment_post&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">first_name</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">last_name</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;first_name&#39;</span> <span class="p">:</span> <span class="n">first_name</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;last_name&#39;</span> <span class="p">:</span> <span class="n">last_name</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;comment_author_email&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>UserVoice</h2>

<p>For UserVoice navigate to Admin Dashboard -> Settings -> Integrations ->
Service Hooks and add a custom web hook for the New Ticket notification.
Then use a sample code like that:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook_uservoice_new_ticket</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Not a POST</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">event</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;event&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">event</span> <span class="o">!=</span> <span class="s">&quot;new_ticket&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;Go away</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">403</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;email&#39;</span> <span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;ticket&#39;</span><span class="p">][</span><span class="s">&#39;contact&#39;</span><span class="p">][</span><span class="s">&#39;email&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">store_user_details</span><span class="p">(</span><span class="n">details</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">content_type</span><span class="o">=</span><span class="s">&#39;text/plain&#39;</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>store_user_details()</code> is a function which handles the email/name received in the webhook,
possibly adding them to a database or anything else.</p>

<p>I find webhooks extremely easy to setup and develop and used them whenever they are
supported by the service provider. What other services do you use webhooks for? Please
share your story in the comments.</p>
]]></content>
  </entry>
  
</feed>
