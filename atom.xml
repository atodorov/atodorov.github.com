<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>atodorov.org</title><link href="http://atodorov.org/" rel="alternate"></link><link href="http://atodorov.org/atom.xml" rel="self"></link><id>http://atodorov.org/</id><updated>2016-12-28T11:48:00+02:00</updated><entry><title>4 Quick Wins to Manage the Cost of Software Testing</title><link href="http://atodorov.org/blog/2016/12/28/4-quick-wins-to-manage-the-cost-of-software-testing/" rel="alternate"></link><updated>2016-12-28T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-28:blog/2016/12/28/4-quick-wins-to-manage-the-cost-of-software-testing/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;Every activity in software development has a cost and a value. Getting cost to
trend down while increasing value, is the ultimate goal.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the introduction of an e-book called
&lt;a href="http://pi.qasymphony.com/four-quick-wins-thank-you"&gt;4 Quick Wins to Manage the Cost of Software Testing&lt;/a&gt;.
It was sent to me by Ivan Fingarov couple of months ago. Just now I've managed to
read it and here's a quick summary. I urge everyone to download the original copy
and give it a read.&lt;/p&gt;
&lt;p&gt;The paper focuses on several practices which organizations can apply immediately
in order to become more efficient and transparent in their software testing. While
larger organizations (e.g. enterprises) have most of these practices already in place
smaller companies (up to 50-100 engineering staff) may not be familiar with them
and will reap the most benefits of implementing said practices. Even though I work
for a large enterprise I find this guide useful when considered at the individual
team level!&lt;/p&gt;
&lt;p&gt;The first chapter focuses on &lt;em&gt;Tactics&lt;/em&gt; to minimize cost: Process, Tools, Bug System Mining
and Eliminating Handoffs.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Process&lt;/em&gt; the goal is to minimize the burden of documenting the test process
(aka testing artifacts), allow for better transparency and visibility outside the QA group
and streamline the decision making process of what to test and when to stop testing,
how much has been tested, what the risk is, ect. The authors propose testing core functionality
paired with emerging risk areas based on new features development. They propose making
a list of these and sorting that list by perceived risk/priority and testing as much
as possible. Indeed this is very similar to the method I've used at Red Hat when designing
testing for new features and new major releases of Red Hat Enterprise Linux. A similar
method I've seen in place at several start-ups as well, although in the small organization
the primary driver for this method is lack of sufficient test resources.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tools&lt;/em&gt; proposes the use of test case management systems to ease the documentation burden.
I've used &lt;a href="http://testlink.org/"&gt;TestLink&lt;/a&gt; and &lt;a href="https://github.com/Nitrate/Nitrate"&gt;Nitrate&lt;/a&gt;.
From them Nitrate has more features but is currently unmaintained with me being the
largest contributor on GitHub. From the paid variants I've used
&lt;a href="https://www.polarion.com/products/qa/test-automation"&gt;Polarion&lt;/a&gt; which I generally dislike.
Polarion is most suitable for large organizations because it gives lots of opportunities
for tracking and reporting. For small organizations it is an overkill.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bug System Mining&lt;/em&gt; is a technique which involves regularly scanning the bug tracker
and searching for patterns. This is useful for finding bug types which appear
frequently and generally point to a flaw in the software development process. The fix for these
flaws usually is a change in policy/workflow which eliminates the source of the errors.
I'm a fan of this technique when joining an existing project and need to assess
what the current state is. I've done this when consulting for a few start-ups, including
&lt;a href="http://meet.jit.si"&gt;Jitsi Meet&lt;/a&gt; (acquired by Atlassian), however I'm not doing bug mining
on a regular basis which I consider a drawback and I really should start doing!&lt;/p&gt;
&lt;p&gt;For example at one project I found lots of bugs reported against translations, e.g.
missing translations, text overflowing the visible screen area or not playing well with
existing design, chosen language/style not fitting well with the product domain, etc.&lt;/p&gt;
&lt;p&gt;The root cause of the problem was how the software in question has been localized.
The translators were given a file of English strings, which they would translate and
return back in an spread sheet. Developers would copy&amp;amp;paste the translated strings
into localization files and integrate with the software. Then QA would usually
inspect all the pages and report the above issues. The solution was to remove devel
and QA from the translation process, implement a translation management system together
with live preview (web based) so that translators can keep track of what is left to
translate and can visually inspect their work immediately after a string was translated.
Thus translators are given more context for their work but also given the responsibility
to produce good quality translations.&lt;/p&gt;
&lt;p&gt;Another example I've seen are many bugs which seem like a follow up/nice to have features
of partially implemented functionality. The root cause of this problem turned out to be
that devel was jumping straight to implementation without taking the time to brainstorm
and consult with QE and product owners, not taking into account corner cases and minor
issues which would have easily been raised by skillful testers. This process lead to
several iterations until the said functionality was considered initially implemented.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Eliminating Handoffs&lt;/em&gt; proposes the use of cross-functional teams to reduce idle time
and reduce the back-and-forth communication which happens when a bug is found, reported,
evaluated and considered for a fix, fixed by devel and finally deployed for testing.
This method argues that including testers early in the process and pairing them with
the devel team will produce faster bug fixes and reduce communication burden.&lt;/p&gt;
&lt;p&gt;While I generally agree with that statement it's worth noting that cross-functional
teams perform really well when all team members have relatively equal skill level
on the horizontal scale and strong experience on the vertical scale (think T-shaped specialist).
Cross-functional teams
don't work well when you have developers who aren't well versed in the testing domain
and/or testers who are not well versed in programming or the broader OS/computer science
fundamentals domain. In my opinion you need well experienced engineers for a good cross-functional
team.&lt;/p&gt;
&lt;p&gt;In the chapter &lt;em&gt;Collaboration&lt;/em&gt; the paper focuses on pairing, building the right thing
and faster feedback loops for developers. This overlaps with earlier proposals for
cross-functional teams and QA bringing value by asking the "what if" questions.
The chapter specifically talks about the Three Amigos meeting between PM, devel and QA
where they discuss a feature proposal from all angles and finally come to a conclusion
what the feature should look like. I'm a strong supporter of this technique and have
been working with it under one form or another during my entire career. This also
touches on the notion that testers need to move into the &lt;em&gt;Quality Assistance&lt;/em&gt; business
and be proactive during the software development process, which is something I'm
hoping to talk about at the
&lt;a href="http://www.romaniatesting.ro/"&gt;Romanian Testing Conference&lt;/a&gt; next year!&lt;/p&gt;
&lt;p&gt;Finally the book talks about &lt;em&gt;Skills Development&lt;/em&gt; and makes the distinction between
Centers of Excellence (CoE) and Communities of Practice (CoP). Both the book and I
are supporters of the CoP approach. This is a bottoms-up approach which is open for
everyone to join in and harnesses the team creative abilities. It also takes into
account that different teams use different methods and tools and that
"one size doesn't fit all"!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Skilled teams find important bugs faster, discover innovative solutions to hard
testing problems and know how to communicate their value. Sometimes, a few super
testers can replace an army of average testers.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While I consider myself to be a "super tester" with thousands of bugs reported there
is a very important note to make here. Communities of Practice are successful when
their members are self-focused on skill development! In my view and to some
extent the communities I've worked with everyone should strive to constantly improve
their skills but also exercise peer pressure on their co-workers to not fall behind.
This has been confirmed by other folks in the QA industry and I've heard it many times
when talking to friends from other companies.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Mutation Testing vs. Coverage</title><link href="http://atodorov.org/blog/2016/12/27/mutation-testing-vs-coverage/" rel="alternate"></link><updated>2016-12-27T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-27:blog/2016/12/27/mutation-testing-vs-coverage/</id><summary type="html">&lt;p&gt;At GTAC 2015 Laura Inozemtseva made a lightning talk titled
&lt;a href="https://www.youtube.com/watch?v=sAfROROGujU&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=47"&gt;Coverage is Not Strongly Correlated with Test Suite Effectiveness&lt;/a&gt;
which is the single event that got me hooked up with mutation testing.
This year, at GTAC 2016, Rahul Gopinath made a counter argument
with his lightning talk
&lt;a href="https://www.youtube.com/watch?v=NKEptA3KP08&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;Code Coverage is a Strong Predictor of Test Suite Effectiveness&lt;/a&gt;.
So which one is better ? I urge you to watch both talks and take notes before
reading about my practical experiment and other opinions on the topic!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I'm a heavy contributor to Cosmic-Ray, the mutation testing tool for Python
so my view is biased!&lt;/p&gt;
&lt;p&gt;Both Laura and Rahul (you will too) agree that a test suite effectiveness depends
on the strength of its oracles. In other words the assertions you make in your tests.
This is what makes a test suite good and determines its ability to detect bugs when
present. I've decided to use &lt;a href="https://github.com/MrSenko/pelican-ab"&gt;pelican-ab&lt;/a&gt; as
a practical example. pelican-ab is a plugin for Pelican, the static site generator
for Python. It allows you to generate A/B experiments by writing out the content
into different directories and adjusting URL paths based on the experiment name.&lt;/p&gt;
&lt;h2&gt;Can 100% code coverage detect bugs&lt;/h2&gt;
&lt;p&gt;Absolutely &lt;strong&gt;NOT&lt;/strong&gt;! In version 0.2.1,
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/ef1e2117ad8ffa5b9fa8470d32d54a36ccb140bb"&gt;commit ef1e211&lt;/a&gt;,
pelican-ab had the following bug:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Given&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;several&lt;/span&gt; &lt;span class="n"&gt;experiments&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;control&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xy&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xy&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt; &lt;span class="n"&gt;online&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;experiments&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;under&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because before each invocation Pelican deletes the output directory and
re-creates the entire content structure. The bug was not caught regardless of
having 100% line + branch coverage. See
&lt;a href="https://travis-ci.org/MrSenko/pelican-ab/builds/129514715"&gt;Build #10&lt;/a&gt; for more
info.&lt;/p&gt;
&lt;h2&gt;Can 100% mutation coverage detect bugs&lt;/h2&gt;
&lt;p&gt;So I've branched off since commit ef1e211 into the
&lt;a href="https://github.com/MrSenko/pelican-ab/commits/mutation_testing_vs_coverage_experiment"&gt;mutation_testing_vs_coverage_experiment branch&lt;/a&gt;
(requires Pelican==3.6.3).&lt;/p&gt;
&lt;p&gt;After initial execution of Cosmic Ray I have 2 mutants left:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cosmic-ray run --baseline=10 --test-runner=unittest example.json pelican_ab -- tests/
$ cosmic-ray report example.json 
job ID 29:Outcome.SURVIVED:pelican_ab
command: cosmic-ray worker pelican_ab mutate_comparison_operator 3 unittest -- tests/
&lt;span class="gd"&gt;--- mutation diff ---&lt;/span&gt;
&lt;span class="gd"&gt;--- a/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -14,7 +14,7 @@&lt;/span&gt;
     def __init__(self, output_path, settings=None):
         super(self.__class__, self).__init__(output_path, settings)
         experiment = os.environ.get(jinja_ab._ENV, jinja_ab._ENV_DEFAULT)
&lt;span class="gd"&gt;-        if (experiment != jinja_ab._ENV_DEFAULT):&lt;/span&gt;
&lt;span class="gi"&gt;+        if (experiment &amp;gt; jinja_ab._ENV_DEFAULT):&lt;/span&gt;
             self.output_path = os.path.join(self.output_path, experiment)
             Content.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_content_url.fget(s))))
             URLWrapper.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_urlwrapper_url.fget(s))))

job ID 33:Outcome.SURVIVED:pelican_ab
command: cosmic-ray worker pelican_ab mutate_comparison_operator 7 unittest -- tests/
&lt;span class="gd"&gt;--- mutation diff ---&lt;/span&gt;
&lt;span class="gd"&gt;--- a/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -14,7 +14,7 @@&lt;/span&gt;
     def __init__(self, output_path, settings=None):
         super(self.__class__, self).__init__(output_path, settings)
         experiment = os.environ.get(jinja_ab._ENV, jinja_ab._ENV_DEFAULT)
&lt;span class="gd"&gt;-        if (experiment != jinja_ab._ENV_DEFAULT):&lt;/span&gt;
&lt;span class="gi"&gt;+        if (experiment not in jinja_ab._ENV_DEFAULT):&lt;/span&gt;
             self.output_path = os.path.join(self.output_path, experiment)
             Content.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_content_url.fget(s))))
             URLWrapper.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_urlwrapper_url.fget(s))))

total jobs: 33
complete: 33 (100.00%)
survival rate: 6.06%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last one, job 33 is equivalent mutation. The first one, job 29 is killed by the test
added in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/b8bff85eeca6c18fbf62cac55fd1a0d64295c43c"&gt;commit b8bff85&lt;/a&gt;.
For all practical purposes we now have 100% code coverage and 100% mutation coverage.
The bug described above still exists thought.&lt;/p&gt;
&lt;h2&gt;How can we detect the bug&lt;/h2&gt;
&lt;p&gt;The bug isn't detected by any test because
we don't have tests designed to perform and validate the exact same steps that a
physical person will execute when using pelican-ab. Such test is added in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/ca85bd042d783f2f6551ae17f16b29aa3750711b"&gt;commit ca85bd0&lt;/a&gt;
and you can see that it causes
&lt;a href="https://travis-ci.org/MrSenko/pelican-ab/builds/186510356"&gt;Build #22&lt;/a&gt; to fail.&lt;/p&gt;
&lt;p&gt;Experiment with setting &lt;code&gt;DELETE_OUTPUT_DIRECTORY=False&lt;/code&gt; in &lt;code&gt;tests/pelicanconf.py&lt;/code&gt; and
the test will PASS!&lt;/p&gt;
&lt;h2&gt;Is pelican-ab bug free&lt;/h2&gt;
&lt;p&gt;Not of course. Even after 100% code and mutation coverage and after manually constructing
a test which mimics user behavior there is at least one more bug present. There
is a pylint &lt;code&gt;bad-super-call&lt;/code&gt; error, fixed in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/193e3db9e7d021e11b54f54ac8b8718651c633c8"&gt;commit 193e3db&lt;/a&gt;.
For more information about the error see
&lt;a href="http://mrsenko.com/blog/atodorov/2016/09/14/beware-of-recursion-loop-when-using-super/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other bugs found&lt;/h2&gt;
&lt;p&gt;During my humble experience with mutation testing so far I've added
&lt;a href="https://github.com/rhinstaller/pykickstart/pulls/atodorov"&gt;quite a few new tests&lt;/a&gt;
and discovered two bugs which went unnoticed for years. The first one is
constructor parameter not passed to parent constructor,
see
&lt;a href="https://github.com/rhinstaller/pykickstart/pull/96/files#diff-f4294048719aeac4da7a86eee0fbdfd3"&gt;PR#96, pykickstart/commands/authconfig.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     def __init__(self, writePriority=0, *args, **kwargs):
&lt;span class="gd"&gt;-        KickstartCommand.__init__(self, *args, **kwargs)&lt;/span&gt;
&lt;span class="gi"&gt;+        KickstartCommand.__init__(self, writePriority, *args, **kwargs)&lt;/span&gt;
         self.authconfig = kwargs.get(&amp;quot;authconfig&amp;quot;, &amp;quot;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second bug is parameter being passed to parent class constructor,
but the parent class doesn't care about this parameter. For example
&lt;a href="https://github.com/rhinstaller/pykickstart/pull/96/files#diff-7d2833450b6e1c9a94eb90e7f171ff52"&gt;PR#96, pykickstart/commands/driverdisk.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-    def __init__(self, writePriority=0, *args, **kwargs):&lt;/span&gt;
&lt;span class="gd"&gt;-        BaseData.__init__(self, writePriority, *args, **kwargs)&lt;/span&gt;
&lt;span class="gi"&gt;+    def __init__(self, *args, **kwargs):&lt;/span&gt;
&lt;span class="gi"&gt;+        BaseData.__init__(self, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also note that pykickstart has nearly 100% test coverage as a whole
and the affected files were 100% covered as well.&lt;/p&gt;
&lt;p&gt;The bugs above don't seem like a big deal and when considered out of context
are relatively minor. However pykickstart's biggest client is anaconda, the Fedora
and Red Hat Enterprise Linux installation program. Anaconda uses pykickstart to
parse and generate text files (called kickstart files) which contain information
for driving the installation in a fully automated manner. This is used by everyone
who installs Linux on a large scale and is pretty important functionality!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;writePriority&lt;/code&gt; controls the order of which individual commands are written to file
at the end of the installation. In rare cases the order of commands may depend
on each other. Now imagine the bugs above produce a disordered kickstart file,
which a system administrator thinks should work but it doesn't. It may be the case
this administrator is trying to provision hundreds of Linux systems to bootstrap
a new data center or maybe performing disaster recovery. You get the scale of
the problem now, don't you?&lt;/p&gt;
&lt;p&gt;To be honest I've seen bugs of this nature but not in the last several years.&lt;/p&gt;
&lt;p&gt;This is all to say a minor change like this may have
an unexpectedly big impact somewhere down the line.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With respect to the above findings and my bias I'll say the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither 100% coverage, nor 100% mutation coverage are a silver bullet against bugs;&lt;/li&gt;
&lt;li&gt;100% mutation coverage appears to be better than 100% code coverage in practice;&lt;/li&gt;
&lt;li&gt;Mutation testing clearly shows out pieces of code which need refactoring
  which in turn minimizes the number of possible mutations;&lt;/li&gt;
&lt;li&gt;Mutation testing causes you to write more asserts and construct more detailed tests
  which is always a good thing when testing software;&lt;/li&gt;
&lt;li&gt;You can't replace humans designing test cases just yet but can give them tools
  to allow them to write more and better tests;&lt;/li&gt;
&lt;li&gt;You should not rely on a single tool (or two of them) because tools are only
  able to find bugs they were designed for!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus: What others think&lt;/h2&gt;
&lt;p&gt;As a bonus to this article let me share a transcript from the
&lt;a href="https://mutation-testing.slack.com"&gt;mutation-testing.slack.com&lt;/a&gt; community:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atodorov 2:28 PM
Hello everyone, I&amp;#39;d like to kick-off a discussion / interested in what you think about
Rahul Gopinath&amp;#39;s talk at GTAC this year. What he argues is that test coverage is still
the best metric for how good a test suite is and that mutation coverage doesn&amp;#39;t add much
additional value. His talk is basically the opposite of what @lminozem presented last year
at GTAC. Obviously the community here and especially tools authors will have an opinion on
these two presentations.

tjchambers 12:37 AM
@atodorov I have had the &amp;quot;pleasure&amp;quot; of working on a couple projects lately that illustrate
why LOC test coverage is a misnomer. I am a **strong** proponent of mutation testing so will
declare my bias.

The projects I have worked on have had a mix of test coverage - one about 50% and
another &amp;gt; 90%.

In both cases however there was a significant difference IMO relative to mutation coverage
(which I have more faith in as representative of true tested code).

Critical factors I see when I look at the difference:

- Line length: in both projects the line lengths FAR exceeded visible line lengths that are
&amp;quot;acceptable&amp;quot;. Many LONGER lines had inline conditionals at the end, or had ternary operators
and therefore were in fact only 50% or not at all covered, but were &amp;quot;traversed&amp;quot;

- Code Conviction (my term): Most of the code in these projects (Rails applications) had
significant Hash references all of which were declared in &amp;quot;traditional&amp;quot; format hhh[:symbol].
So it was nearly impossible for the code in execution to confirm the expectation of the
existence of a hash entry as would be the case with stronger code such as &amp;quot;hhh.fetch(:symbol)&amp;quot;

- Instance variables abound: As with most of Rails code the number of instance variables
in a controller are extreme. This pattern of reference leaked into all other code as well,
making it nearly impossible with the complex code flow to ascertain proper reference
patterns that ensured the use of the instance variables, so there were numerous cases
of instance variable typos that went unnoticed for years. (edited)

- .save and .update: yes again a Rails issue, but use of these &amp;quot;weak&amp;quot; operations showed again
that although they were traversed, in many cases those method references could be removed
during mutation and the tests would still pass - a clear indication that save or update was
silently failing.

I could go on and on, but the mere traversal of a line of code in Ruby is far from an indication
of anything more than it may be &amp;quot;typed in correctly&amp;quot;.

@atodorov Hope that helps.

LOC test coverage is a place to begin - NOT a place to end.

atodorov 1:01 AM
@tjchambers: thanks for your answer. It&amp;#39;s too late for me here to read it carefully but
I&amp;#39;ll do it tomorrow and ping you back

dkubb 1:13 AM
As a practice mutation testing is less widely used. The tooling is still maturing. Depending on your
language and environment you might have widely different experiences with mutation testing

I have not watched the video, but it is conceivable that someone could try out mutation testing tools
for their language and conclude it doesn’t add very much

mbj 1:14 AM
Yeah, I recall talking with @lminozem here and we identified that the tools she used likely
show high rates of false positives / false coverage (as the tools likely do not protect against
certain types of integration errors)

dkubb 1:15 AM
IME, having done TDD for about 15+ years or so, and mutation testing for about 6 years, I think
when it is done well it can be far superior to using line coverage as a measurement of test quality

mbj 1:16 AM
Any talk pro/against mutation testing must, as the tool basis is not very homogeneous, show a non consistent result.

dkubb 1:16 AM
Like @tjchambers says though, if you have really poor line coverage you’re not going to
get as much of a benefit from mutation testing, since it’s going to be telling you what
you already know — that your project is poorly tested and lots of code is never exercised

mbj 1:19 AM
Thats a good and likely the core point. I consider that mutation testing only makes sense
when aiming for 100% (and this is to my experience not impractical).

tjchambers 1:20 AM
I don&amp;#39;t discount the fact that tool quality in any endeavor can bring pro/con judgements
based on particular outcomes

dkubb 1:20 AM
What is really interesting for people is to get to 100% line coverage, and then try mutation
testing. You think you’ve done a good job, but I guarantee mutation testing will find dozens
if not hundreds of untested cases .. even in something with 100% line coverage

To properly evaluate mutation testing, I think this process is required, because you can’t
truly understand how little line coverage gives you in comparison

tjchambers 1:22 AM
But I don&amp;#39;t need a tool to tell me that a 250 character line of conditional code that by
itself would be an oversized method AND counts more because there are fewer lines in the
overall percentage contributes to a very foggy sense of coverage.

dkubb 1:22 AM
It would not be unusual for something with 100% line coverage to undergo mutation testing
and actually find out that the tests only kill 60-70% of possible mutations

tjchambers 1:22 AM
@dkubb or less

dkubb 1:23 AM
usually much less :stuck_out_tongue:

it can be really humbling

mbj 1:23 AM
In this discussion you miss that many test suites (unless you have noop detection):
Will show false coverage.

tjchambers 1:23 AM
When I started with mutant on my own project which I developed I had 95% LOC coverage

mbj 1:23 AM
Test suites need to be fixed to comply to mutation testing invariants.

tjchambers 1:23 AM
I had 34% mutation coverage

And that was ignoring the 5% that wasn&amp;#39;t covered at all

mbj 1:24 AM
Also if the tool you compare MT with line coverage on: Is not very strong,
the improvement may not be visible.

dkubb 1:24 AM
another nice benefit is that you will become much better at enumerating all
the things you need to do when writing tests

tjchambers 1:24 AM
@dkubb or better yet - when writing code.

The way I look at it - the fewer the alive mutations the better the test,
the fewer the mutations the better the code.

dkubb 1:29 AM
yeah, you can infer a kind of cyclomatic complexity by looking at how many mutations there are

tjchambers 1:31 AM
Even without tests (not recommended) you can judge a lot from the mutations themselves.

I still am an advocate for mutations/LOC metric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see members in the community are strong supporters of mutation testing, all of them
having much more experience than I do.&lt;/p&gt;
&lt;p&gt;I'd like to hear more practical examples if you are able to share them since I'm
collecting conference material on this topic. Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>How to create auxiliary build jobs in Travis-CI matrix</title><link href="http://atodorov.org/blog/2016/12/16/how-to-create-auxiliary-build-jobs-in-travis-ci-matrix/" rel="alternate"></link><updated>2016-12-16T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-16:blog/2016/12/16/how-to-create-auxiliary-build-jobs-in-travis-ci-matrix/</id><summary type="html">&lt;p&gt;&lt;img alt="Auxiliary build job in Travis-CI" src="/images/travisci_extra_job_in_matrix.png" title="Auxiliary build job in Travis-CI" /&gt;&lt;/p&gt;
&lt;p&gt;In Travis-CI when you combine the three main configuration options of
&lt;em&gt;Runtime (language)&lt;/em&gt;, &lt;em&gt;Environment&lt;/em&gt; and &lt;em&gt;Exclusions/Inclusions&lt;/em&gt; you get a
&lt;a href="https://docs.travis-ci.com/user/customizing-the-build#Build-Matrix"&gt;build matrix&lt;/a&gt;
of all possible combinations! For example, for &lt;em&gt;django-chartit&lt;/em&gt; the matrix includes
43 build jobs, spread across various Python and Django versions. For reference
see &lt;a href="https://travis-ci.org/chartit/django-chartit/builds/181115880"&gt;Build #75&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;django-chartit&lt;/em&gt; I wanted to have an additional build job which would execute
pylint. I wanted the job to be independent because currently pylint produces lots
of errors and warnings. Having an independent job instead of integrating pylint
together with all jobs makes it easier to see if any of the functional tests failed.&lt;/p&gt;
&lt;p&gt;Using the inclusion functionality of Travis-CI I was able to define an auxiliary
build job. The trick is to provide sane environment defaults for all
build jobs (regular and auxiliary ones) so you don't have to expand your environment
section! In this case the change looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/.travis.yml b/.travis.yml&lt;/span&gt;
&lt;span class="gh"&gt;index 67f656d..9b669f9 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/.travis.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/.travis.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,6 +2,8 @@ after_success:&lt;/span&gt;
 - coveralls
 before_install:
 - pip install coveralls
&lt;span class="gi"&gt;+- if [ -z &amp;quot;$_COMMAND&amp;quot; ]; then export _COMMAND=coverage; fi&lt;/span&gt;
&lt;span class="gi"&gt;+- if [ -z &amp;quot;$_DJANGO&amp;quot; ]; then export _DJANGO=1.10.4; fi&lt;/span&gt;
 env:
 - !!python/unicode &amp;#39;_DJANGO=1.10&amp;#39;
 - !!python/unicode &amp;#39;_DJANGO=1.10.2&amp;#39;
&lt;span class="gu"&gt;@@ -41,6 +43,10 @@ matrix:&lt;/span&gt;
     python: 3.3
   - env: _DJANGO=1.10.4
     python: 3.3
&lt;span class="gi"&gt;+  include:&lt;/span&gt;
&lt;span class="gi"&gt;+  - env: _COMMAND=pylint&lt;/span&gt;
&lt;span class="gi"&gt;+    python: 3.5&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
 notifications:
   email:
     on_failure: change
&lt;span class="gu"&gt;@@ -50,4 +56,4 @@ python:&lt;/span&gt;
 - 3.3
 - 3.4
 - 3.5
&lt;span class="gd"&gt;-script: make coverage&lt;/span&gt;
&lt;span class="gi"&gt;+script: make $_COMMAND&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more info take a look at
&lt;a href="https://github.com/chartit/django-chartit/commit/b22eda7cd67a062f49a0f60b8ac51383e4f8c3a5"&gt;commit b22eda7&lt;/a&gt;
and &lt;a href="https://travis-ci.org/chartit/django-chartit/builds/183883813"&gt;Build #77&lt;/a&gt;. Note
Job #77.44!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Overridden let() causes segfault with RSpec</title><link href="http://atodorov.org/blog/2016/12/04/overridden-let-causes-segfault-with-rspec/" rel="alternate"></link><updated>2016-12-04T22:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-04:blog/2016/12/04/overridden-let-causes-segfault-with-rspec/</id><summary type="html">&lt;p&gt;Last week &lt;a href="https://github.com/syndbg"&gt;Anton&lt;/a&gt; asked me to take a look at one of
his RSpec test suites. He was able to consistently reproduce a segfault which
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;BUG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s-Atom"&gt;vm_call_cfunc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;cfp&lt;/span&gt; &lt;span class="s-Atom"&gt;consistency&lt;/span&gt; &lt;span class="s-Atom"&gt;error&lt;/span&gt;
&lt;span class="s-Atom"&gt;ruby&lt;/span&gt; &lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="nf"&gt;p217&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="s-Atom"&gt;revision&lt;/span&gt; &lt;span class="mi"&gt;56796&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;linux&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="s-Atom"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;Control&lt;/span&gt; &lt;span class="s-Atom"&gt;frame&lt;/span&gt; &lt;span class="s-Atom"&gt;information&lt;/span&gt; &lt;span class="s-Atom"&gt;-----------------------------------------------&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0013&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s-Atom"&gt;----&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0048&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000047&lt;/span&gt; &lt;span class="nv"&gt;CFUNC&lt;/span&gt;  &lt;span class="s-Atom"&gt;:map&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0012&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0045&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000044&lt;/span&gt; &lt;span class="nv"&gt;BLOCK&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0035&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0043&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000042&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1835&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0010&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000039&lt;/span&gt; &lt;span class="nv"&gt;BLOCK&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0009&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0018&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0037&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000036&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0008&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0022&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0033&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000032&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0007&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0025&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0028&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000027&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0006&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0085&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0023&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000022&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0005&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0026&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0016&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000015&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0004&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0025&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0012&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000011&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt;    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;exe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;rspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0003&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s-Atom"&gt;----&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0010&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000009&lt;/span&gt; &lt;span class="nv"&gt;CFUNC&lt;/span&gt;  &lt;span class="s-Atom"&gt;:load&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0136&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0006&lt;/span&gt; &lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="s-Atom"&gt;e10&lt;/span&gt; &lt;span class="nv"&gt;EVAL&lt;/span&gt;   &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;rspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="nf"&gt;a0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Googling for &lt;code&gt;vm_call_cfunc - cfp consistency error&lt;/code&gt; yields
&lt;a href="https://bugs.ruby-lang.org/issues/10460"&gt;Ruby #10460&lt;/a&gt;. Comments on the bug and
particularly this one point towards the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Ruby is trying to be nice about reporting the error; but in the end,
&amp;gt; your code is still broken if it overflows stack.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Somewhere in the test suite was a piece of code that was overflowing the stack.
It was somewhere along the lines of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#active_client_for_user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;matching an existing user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manager authentication&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;include_examples&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;active client for user with existing user&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Considering the examples in the bug I started looking for patterns where a variable
was defined and later redefined, possibly circling back to the previous definition.
Expanding the shared examples by hand transformed the code into&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#active_client_for_user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;matching an existing user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:api_user_authentication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user_authentication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;api_user_authentication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with an `active_assigned_client`&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Line 5. overrode line 3. When line 4. was executed first because of lazy execution
and the call execution path became: 4-5-4-5-4-5 ... &lt;strong&gt;NOTE:&lt;/strong&gt; I think we need a
warning about that in RuboCop, see
&lt;a href="https://github.com/bbatsov/rubocop/issues/3769"&gt;RuboCop #3769&lt;/a&gt;.
The fix however is a no brainer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-  let(:user) { create(:user, :manager) }&lt;/span&gt;
&lt;span class="gd"&gt;-  let!(:api_user_authentication) { create(:user_authentication, user: user) }&lt;/span&gt;
&lt;span class="gi"&gt;+  let(:manager) { create(:user, :manager) }&lt;/span&gt;
&lt;span class="gi"&gt;+  let!(:api_user_authentication) { create(:user_authentication, user: manager) }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for reading and happy testing.&lt;/p&gt;</summary><category term="Ruby"></category><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Highlights from ISTA and GTAC 2016</title><link href="http://atodorov.org/blog/2016/11/30/highlights-from-ista-and-gtac-2016/" rel="alternate"></link><updated>2016-11-30T17:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-11-30:blog/2016/11/30/highlights-from-ista-and-gtac-2016/</id><summary type="html">&lt;p&gt;&lt;img alt="ISTA 2016" src="/images/ista2016.jpg" title="ISTA 2016" /&gt;&lt;/p&gt;
&lt;p&gt;Another two weeks have passed and I'm blogging about another 2 conferences.
This year both
&lt;a href="https://istacon.org/"&gt;Innovations in Software Technologies and Automation&lt;/a&gt; and
&lt;a href="https://developers.google.com/google-test-automation-conference/2016/"&gt;Google Test Automation Conference&lt;/a&gt;
happened on the same day. I was attending ISTA in Sofia during the day and
watching the live stream of GTAC during the evenings. Here are some of the things
that reflected on me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can I build my software in order to make this a perfect day for the user ?&lt;/li&gt;
&lt;li&gt;People are not the problem which causes bad software to exist. When designing
software focus on what people need not on what technology is forcing them to do;&lt;/li&gt;
&lt;li&gt;You need to have blind trust in the people you work with because all the times
projects look like they are not going to work until the very end!&lt;/li&gt;
&lt;li&gt;It's good to have diverse set of characters in the company and not homogenize people;&lt;/li&gt;
&lt;li&gt;Team performance grows over time. Effective teams minimize time waste
during bad periods. They (have and) extract value from conflicts!&lt;/li&gt;
&lt;li&gt;One-on-one meetings are usually like status reports which is bad. Both parties
should bring their own issues to the table;&lt;/li&gt;
&lt;li&gt;To grow an effective team members need to do things together. For example
pair programming, writing test scenarios, etc;&lt;/li&gt;
&lt;li&gt;When teams don't take actions after retrospective meetings it is usually a 
sign of missing foundational trust;&lt;/li&gt;
&lt;li&gt;QA engineers need to be present at every step of the software development
life-cycle! This is something I teach my students and have been confirmed by
many friends in the industry;&lt;/li&gt;
&lt;li&gt;Agile is all about data, even when it comes to testing and quality. We need to
decompose and measure iteratively;&lt;/li&gt;
&lt;li&gt;Agile is also about really skillful people. One way to boost your skills is to
adopt the T-shaped specialist model;&lt;/li&gt;
&lt;li&gt;In agile iterative work and continuous delivery is king so QA engineers need to focus
even more on visualization (I will also add documentation), refactoring and code reviews;&lt;/li&gt;
&lt;li&gt;Agile teams need to give opportunities to team members for taking risk and taking
ownership of their actions in the gray zone (e.g. actions which isn't clear who should
be doing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the brave new world of micro services end to end testing is no more! We test each level
in isolation but keep stable contracts/APIs between levels. That way we can reduce
the test burden and still guarantee an acceptable level of risk. This change in
software architecture (monolithic vs. micro) leads to change in technologies (one framework/language
vs. what's best for the task) which in turn leads to changes in testing approach and
testing tools. This ultimately leads to changing people on the team because they now
need different skills than when they were hired! This circles back to the T-shaped
specialist model and the fact that QA should be integrated in every step of the way!
Thanks to Denitsa Evtimova and Lyudmila Labova for this wisdom and the quote pictured
above.&lt;/p&gt;
&lt;p&gt;Aneta Petkova talked about monitoring of test results which is a topic very close to my work.
Imagine you have your automated test suite but still get failures occasionally. Are these
bugs or something else broke ? If they are bugs and you are waiting for them to be fixed
do you execute the tests against the still broken build or wait ? If you do, what additional info
do you get from these executions vs. how much time do you spend figuring out
"oh, that's still not fixed or geez, here's another hidden bug in the code" ?&lt;/p&gt;
&lt;p&gt;Her team has modified their test execution framework (what I'd usually call a test runner
or even test lab) to have knowledge about issues in JIRA and skip some tests
when no meaningful information can be extracted from them. I have to point out that this
approach may require a lot of maintenance in environments where you have failures due to
infrastructure issues. This idea connects very nicely
with the general idea behind this year's GTAC - don't run tests if you don't need to aka
smart test execution!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2yN53k9jz3U#t=2h54m0s"&gt;Boris Prikhodskiy&lt;/a&gt;
shared a very simple rule. Don't execute tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which have 100 % pass rate;&lt;/li&gt;
&lt;li&gt;during the last month;&lt;/li&gt;
&lt;li&gt;and have been executed at least 100 times before that!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what Unity does for their numerous topic branches and reduces test time
with 60-70 percent. All of the test suite is still executed against their trunk branch
and PR merge queue branches!&lt;/p&gt;
&lt;p&gt;At GTAC there were several presentations about speeding up test execution time.
&lt;a href="https://www.youtube.com/watch?v=hbocBqOpuAo#t=3h18m25s"&gt;Emanuil Slavov&lt;/a&gt; was very practical
but the most important thing he said was that a fast test suite is the result of many
conscious actions which introduced small improvements over time. His team had assigned
themselves the task to iteratively improve their test suite performance and at every step
of the way they analyzed the existing bottlenecks and experimented with possible solutions.&lt;/p&gt;
&lt;p&gt;The steps in particular are (on a single machine):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute tests in dedicated environment;&lt;/li&gt;
&lt;li&gt;Start with empty database, not used by anything else; This also leads to
adjustments in your test suite architecture and DB setup procedures;&lt;/li&gt;
&lt;li&gt;Simulate and stub external dependencies like 3rd party services;&lt;/li&gt;
&lt;li&gt;Move to containers but beware of slow disk I/O;&lt;/li&gt;
&lt;li&gt;Run database in memory not on disk because it is a temporary DB anyway;&lt;/li&gt;
&lt;li&gt;Don't clean test data, just trash the entire DB once you're done;&lt;/li&gt;
&lt;li&gt;Execute tests in parallel which should be the last thing to do!&lt;/li&gt;
&lt;li&gt;Equalize workload between parallel threads for optimal performance;&lt;/li&gt;
&lt;li&gt;Upgrade the hardware (RAM, CPU) aka vertical scaling;&lt;/li&gt;
&lt;li&gt;Add horizontal scaling (probably with a messaging layer);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2yN53k9jz3U#t=6h38m7s"&gt;John Micco and Atif Memon&lt;/a&gt;
talked about flaky tests at Google:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;84% of the transitions from PASS to FAIL are flakes;&lt;/li&gt;
&lt;li&gt;Almost 16% of their 3.5 million tests have some level of flakiness;&lt;/li&gt;
&lt;li&gt;Flaky failures frequently block and delay releases;&lt;/li&gt;
&lt;li&gt;Google spends between 2% and 16% of their CI compute resources
re-running flaky tests;&lt;/li&gt;
&lt;li&gt;Flakiness insertion speed is comparable to flakiness removal speed!&lt;/li&gt;
&lt;li&gt;The optimal setting is 2 persons modifying the same source file at the same time.
This leads to minimal chance of breaking stuff;&lt;/li&gt;
&lt;li&gt;Fix or delete flaky tests because you don't get meaningful value out of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So Google want to stop a test execution before it is executed if historical
data shows that the test has attributes of flakiness. The research they talk
about utilizes tons of data collected from Google's CI environment which was
the most interesting fact for me. Indeed if we use data to decide which features
to build for our customers then why not use data to govern the process of testing?
In addition to the video you should read John's post
&lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;Flaky Tests at Google and How We Mitigate Them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the end I'd like to finish with 
Rahul Gopinath's
&lt;a href="https://www.youtube.com/watch?v=hbocBqOpuAo#t=4h57m30s"&gt;Code Coverage is a Strong Predictor of Test suite Effectiveness in the Real World&lt;/a&gt;.
He basically said that code coverage metrics as we know them today are still
the best practical indicator of how good a test suite is. He argues that mutation testing is slow
and only provides additional 4% to a well designed test suite. This is absolutely the opposite of
what Laura Inozemtseva presented last year in her
&lt;a href="https://www.youtube.com/watch?v=sAfROROGujU&amp;amp;list=PLSIUOFhnxEiCWGsN9t5A-XOhRbmz54IS1&amp;amp;index=25"&gt;Coverage is Not Strongly Correlated with Test Suite Effectiveness&lt;/a&gt;
lightning talk. Rahul also made a point about sample size in the two research papers
and I had the impression he's saying Laura didn't do a proper academic research.&lt;/p&gt;
&lt;p&gt;I'm a heavy contributor to Cosmic Ray, the mutation testing tool for Python and also use
mutation testing in my daily job so this is a very interesting topic indeed. I've asked
fellow tool authors to have a look at both presentations and share their opinions.
I also have an idea about a practical experiment to see if full branch coverage and
full mutation coverage will be able to find a known bug in a piece of software
I wrote. I will be writing about this experiment next week so stay tuned.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="events"></category><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Women In Open Source</title><link href="http://atodorov.org/blog/2016/11/21/women-in-open-source/" rel="alternate"></link><updated>2016-11-21T02:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-11-21:blog/2016/11/21/women-in-open-source/</id><summary type="html">&lt;p&gt;&lt;img alt="OpenFest 2016" src="/images/openfest2016.jpg" title="OpenFest 2016" /&gt;&lt;/p&gt;
&lt;p&gt;It's been 2 weeks after &lt;a href="http://openfest.org"&gt;OpenFest 2016&lt;/a&gt; and I've promised
to blog about what happened during the &lt;em&gt;Women in Open Source&lt;/em&gt; presentation, which
is the only single talk I did attend.&lt;/p&gt;
&lt;p&gt;The presenters were Jona Azizaj, whom I met at FOSDEM
&lt;a href="http://atodorov.org/blog/2016/02/02/fosdem-2016-report/"&gt;earlier this year&lt;/a&gt;,
Suela Palushi and Kristi Progri, all 3 from Albania. I've went to OpenFest
specifically to meet them and listen to their presentation.&lt;/p&gt;
&lt;p&gt;They started by explaining
their background and telling us more about their respective communities,
&lt;a href="https://fedoraproject.org/wiki/Women"&gt;Fedora Women&lt;/a&gt;,
&lt;a href="http://womoz.org"&gt;WoMoz&lt;/a&gt;,
&lt;a href="https://www.gnome.org/outreachy/"&gt;GNOME Outreach&lt;/a&gt; and the 
&lt;a href="https://openlabs.cc/"&gt;Open Labs&lt;/a&gt; hackerspace in Tirana.
The girls gave some stats how many women there are in the larger FOSS
community and what some newcomer's first impressions could be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Did you know that in 2002 1.1% of all FOSS participants were female, while in
2013 that was 11% ? A 10x increase but of them only 1.5% are developers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The presentation was a nice overview of different opportunities
to get involved in open source geared towards women. I've specifically asked and
the girls responded how they first came to join open source. In general they've
had a good and welcoming community around them which made it natural to
join and thrive.&lt;/p&gt;
&lt;p&gt;Now comes the sad part. Instead of welcoming and supporting these girls that they've
stood up to talk about their experiences the audience did the opposite. In particular
&lt;a href="http://plushiegames.com/"&gt;Maya Milusheva from Plushie Games&lt;/a&gt; made a very passionate claim
against the topic women in tech. It went like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am a woman&lt;/li&gt;
&lt;li&gt;I am a good developer&lt;/li&gt;
&lt;li&gt;I am a mother&lt;/li&gt;
&lt;li&gt;I am a CEO of a successful IT company&lt;/li&gt;
&lt;li&gt;when I hire I want the best people for my company and they are men&lt;/li&gt;
&lt;li&gt;women simply don't have the required tech skills/level of expertise&lt;/li&gt;
&lt;li&gt;the whole talk about women in open source/diversity is bullshit&lt;/li&gt;
&lt;li&gt;girls need to sit down on their asses and read more, code more, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In terms of successfullness I think I can compare to Maya. I also have a small
child, which I regularly take to conferences with me (the badges above).
I also have an IT company
which generates a comparable amount of income. I also want to hire the best employees
for any given project I'm working on. Sometimes it's happened that to be a woman,
sometimes not. The point here however was not about hiring more women per se. It
was about giving opportunities in the communities and letting people grow for themselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
Yes, she has a point but there's something WRONG in coming to listen to a presenter
just to tell them they are full of shit! It's
very arrogant shouting around and arguing a point about hiring when in fact the
entire presentation was not about hiring!
It is totally unacceptable,
The NY Times writing about apps you develop and behaving like an asshole at public events at
the same time!
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've been there, the crowd telling me I'm full of shit when I've been presenting about
new technologies. I've been there being told that my ideas will not work in this or that
way, while in fact the very idea of trying and considering a completely different
technological approach was what counted. And finally I've been there years later when
the same ideas and technologies have become mainstream and the same crowd was now talking
about them!&lt;/p&gt;
&lt;p&gt;After Maya there was another person who grabbed the microphone and continued to talk nonsense.
Unfortunately he didn't state his name and I don't know the guy in person. What he said was
along the lines of &lt;em&gt;little boys play with robots, little girls play with dolls. They like it
this way and that's why girls don't get involved in the technical field. Also if a girl
played with robots she will be called a tomboy and generally have a negative attitude
towards her&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It's absolutely clear this guy has no idea what he's talking about.
Everyone who has small children around them
will agree that they are born with equal mental capacity. It is up to the
environment, parents, teachers, etc to shape this capacity in a positive way. I've
seen children who taught themselves speaking English from YouTube and children the
same age barely speaking Bulgarian. I've seen children who are curious about the world
and how it works and children who can't wipe their own noses. It's not because they
like it that way, it's because of their parents and the environment they live in.&lt;/p&gt;
&lt;p&gt;Finally I'd like to respond to this guy (I was specifically motioned at the conference
not to respond) with this&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
I have a 5 year old girl. She likes robots as much as she likes dolls. She works with Linux
and is lucky enough to have one of the two OLPCs laptops in Bulgaria. She plays
SuperTux and has already found a bug in it (I've reported it). She's been to several
Linux and IT conferences as you can see from the picture above.
She likes being taken to hackathons and learning about inspiring stuff that students are doing.&lt;/p&gt;
&lt;p&gt;Are you telling me that because we have the wrong idea women can't be good at technology
she can't become a successful engineer ? Are you telling me to basically scratch the next 10 years
of her life and tell her she can't become what she wants ? Because if you do I say FUCK OFF!&lt;/p&gt;
&lt;p&gt;Even I as a parent don't have the power to tell my child what they can do or not do,
what they can accomplish or not. My job is to show them the various possibilities that
exist and guide and support them along they way they want to go! This is what we as society
also need to do for everyone else!
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To wrap up I will tell you about a psychological experiment we devised with Jona and Suela.
I've proposed
to find a male and female student in Tirana and have them pose online as somebody from the opposite
sex, fake accounts and all. They've proposed having the same person both act as male or female
for the purposes of evening out the tech skills difference.
The goal is to see how does the tech community react to their contributions and try to measure
how much does their gender being known affect their performance! I hope the girls will
find a way to perform this experiment together with the university Psychology department
and share the results with us.&lt;/p&gt;
&lt;p&gt;Btw I will be visiting
&lt;a href="http://oscal.openlabs.cc/"&gt;OSCAL'17&lt;/a&gt; to check up on that so see you in Albania!&lt;/p&gt;</summary><category term="events"></category><category term="fedora.planet"></category></entry><entry><title>IT Weekend Highlights</title><link href="http://atodorov.org/blog/2016/11/02/it-weekend-highlights/" rel="alternate"></link><updated>2016-11-02T09:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-11-02:blog/2016/11/02/it-weekend-highlights/</id><summary type="html">&lt;p&gt;&lt;img alt="IT Weekend" src="/images/itweekend_cake.jpg" title="IT Weekend" /&gt;&lt;/p&gt;
&lt;p&gt;Last weekend I attended the third &lt;a href="http://it-weekend.com"&gt;IT Weekend&lt;/a&gt;.
It's like a training camp for athletes but for QA engineers. While during the
&lt;a href="http://atodorov.org/blog/2016/10/08/what-i-learned-from-it-weekend/"&gt;first week&lt;/a&gt; the crowd was more in
the junior to mid level range now the crowd was more into the senior level range
which made for better talks and discussions. The most interesting sessions
for me were &lt;em&gt;On-boarding of New Team Members&lt;/em&gt; by Nikola Naidenov and
&lt;em&gt;Agile Leadership&lt;/em&gt; by Bogoi Bogdanov. Here are some of the highlights
that I wrote down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On-boarding of new team members is very important. You need to have a plan for
their first 6 months at the company. This plan needs to have clearly defined tasks
and expectations;&lt;/li&gt;
&lt;li&gt;When a person becomes productive for their team/company it means they have been
on-boarded successfully;&lt;/li&gt;
&lt;li&gt;A company provided trainer is a good thing but they tend to focus on broader
knowledge, they don't cover team specific domain knowledge;&lt;/li&gt;
&lt;li&gt;Some companies provide both technical and business trainers for their teams;&lt;/li&gt;
&lt;li&gt;It is very important to get timely feedback when you are the one providing training.
However feedback isn't always easy to get and we don't always receive sincere feedback;&lt;/li&gt;
&lt;li&gt;If the team is swamped with work tasks you need to provide 10-20% of the time
for learning and experimenting with new technologies. IMO this is best done by
filing tickets in your bug/task tracking system and prioritizing them together with
the rest of the tasks;&lt;/li&gt;
&lt;li&gt;It is also important to have an individual training plan for each team member
and review this on a regular basis;&lt;/li&gt;
&lt;li&gt;We should strive to use unified terminology and jargon as to not confuse
people. IMO it is usually the new hires who are likely to get confused because they
are not familiar with the history of the terms used;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In an agile environment we calculate productivity using the formula&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Productivity = Effort * Competence * Environment * Motivation^2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are 3 important factors that drive motivation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to have a &lt;strong&gt;Purpose&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;to feel &lt;strong&gt;Autonomy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;to be able to achieve &lt;strong&gt;Mastery&lt;/strong&gt; in your skills&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also important to note that autonomy is not the opposite of alignment
as depicted by the image below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alignment and autonomy" src="/images/alignment_autonomy.jpg" title="alignment and autonomy" /&gt;&lt;/p&gt;
&lt;p&gt;In agile environment control is a function of trust. To be able to trust people we
need to give them autonomy, transparency and short feedback loop!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manage for the normal treat exceptions as exceptional;&lt;/li&gt;
&lt;li&gt;Failure recovery is more important than failure avoidance;&lt;/li&gt;
&lt;li&gt;Fail fast means learning fast and improving fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Photo credit: Rayna Stankova&lt;/em&gt;&lt;/p&gt;</summary><category term="events"></category><category term="QA"></category></entry><entry><title>Animate &amp; Automate</title><link href="http://atodorov.org/blog/2016/10/24/animate-automate/" rel="alternate"></link><updated>2016-10-24T00:01:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-24:blog/2016/10/24/animate-automate/</id><summary type="html">&lt;p&gt;Recently I've attended a presentation by MentorMate where they talked about
testing CSS animations (
&lt;a href="https://www.youtube.com/watch?v=MIxzzfFBR8o&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=6"&gt;video in Bulgarian&lt;/a&gt;
). The software under test was an ad tech SDK which
provides CSS based animations to mobile apps and games. The content
is displayed inside a webview and they had to make sure animations were
working correctly on different OS and devices.&lt;/p&gt;
&lt;p&gt;Analyzing the content (aka getting to know the domain) they figured out
in reality there were about 20 basic movements and transformations. So the
problem was reduced to "How do we test these 20 basic movements under
various OSes and devices" or "How do we verify that basic CSS transformations
are supported under different versions and flavors of the OS"?&lt;/p&gt;
&lt;p&gt;Their test bed included hand crafted web pages with each basic movement
and then several ones with more complex animations (aka integration testing).
The idea was to load
these pages under different devices and inspect whether or not the animations
were visualized properly.&lt;/p&gt;
&lt;p&gt;A test script (aka their testing framework) was constantly recording the
coordinates of the elements under test to verify that they were really animated.
The idea was to use a sample rate of 20ms and expect at lest 20 different changes
to the element under test. Coordinates along with color and gradient were recorded
and then returned back and analyzed to report a PASS or FAIL result.&lt;/p&gt;
&lt;p&gt;This simplistic framework has limitations of course. It is not currently checking
the boundaries of where the elements are rendered on the screen. Thus if everything
else works as expected this will be a false positive result. On their slides
this can be seen at &lt;a href="https://youtu.be/MIxzzfFBR8o?t=23m10s"&gt;23:10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a side note the entire effort took about 2 days, including research and preparing
the test content.&lt;/p&gt;
&lt;p&gt;I really like the back to basics approach here and the simplistic framework that
MentorMate came up with. Sure it misses some problems but for that particular case
it is good enough, easy and fast to implement.&lt;/p&gt;</summary><category term="QA"></category></entry><entry><title>The Passionate Doer</title><link href="http://atodorov.org/blog/2016/10/21/the-passionate-doer/" rel="alternate"></link><updated>2016-10-21T00:18:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-21:blog/2016/10/21/the-passionate-doer/</id><summary type="html">&lt;p&gt;&lt;img alt="Passionate violinist" src="/images/passionate.jpg" title="Passionate violinist" /&gt;&lt;/p&gt;
&lt;p&gt;Two weeks ago I visited &lt;a href="https://www.facebook.com/factorystartup/"&gt;Startup Factory Ruse&lt;/a&gt;
and had the opportunity to attend
&lt;a href="https://www.facebook.com/events/1148556138570764/"&gt;The Passionate Doer – Lessons Learned&lt;/a&gt;
where Yana Petrova shared her journey with &lt;a href="http://cokitchen.bg"&gt;CoKitchen&lt;/a&gt;
in the past 2 years.
The event name comes from &lt;a href="http://amzn.to/2eyyRkx"&gt;The Passionate Programmer&lt;/a&gt; book.&lt;/p&gt;
&lt;p&gt;A doer is somebody who acts and strives to make changes. When you jump into something new
it looks hard and scary at first. With time the important and difficult tasks
begin to look like ordinary ones because you gain the experience required for them.&lt;/p&gt;
&lt;p&gt;When you are a start-up company you have a limited amount of time and finance to
make a break through. Thus it is important to hire the right people, but Yana argues
it is more important to quickly dismiss the people who don't fit into your
organization. I quite agree with her and the following paragraphs are centered
around this idea.&lt;/p&gt;
&lt;p&gt;An interesting point Yana makes is about negative reactions and lack of motivation
in employees.
When a person is lacking motivation they have troubles making logical
connections between various tasks and are not able to see the big picture
or how their actions or lack thereof affect everything else in the
organization.
She thinks these are most likely due to problems in our private
lives instead of problems at work and as managers we should seek to understand
what triggers these negative effects.&lt;/p&gt;
&lt;p&gt;Yana believes fatigue makes us vulnerable to negative thoughts so it is best
to make important decisions after you've had a good rest. In similar fashion
her way to deal with a non-motivated employee is to give them a short break.
Then she asks whether or not the employee is
ready to return back to work and invest 100% into the job. If not then
both parties say good bye to each other. Yana also says that for most
problematic employees she'd seen it hasn't been worth it to bring them back
and try to improve them.&lt;/p&gt;
&lt;p&gt;I've asked Yana if she had some sort of test to keep track of how well
a person performs their job. She didn't quite answer but an indicator
for under-performance to her is how busy the rest of the team is. Unwillingness
to take corrective action, e.g. explore new ways of doing things, acquire
more skills or read particular books which will help improve on areas
she'd identified, is also a good indicator that the person will have a
tendency to under-perform.&lt;/p&gt;
&lt;p&gt;Yana says she wouldn't keep an employee who defines their own boundaries
and doesn't want to expand them because that person will not go out of their
comfort zone. This leaves everyone else tiptoeing around that employee
and having to do the job they can't, which puts more stress on the team.&lt;/p&gt;
&lt;p&gt;Same approach we should adopt towards customers as well. Get rid of rude and
angry customers so that the work flows with less stress.&lt;/p&gt;
&lt;p&gt;Yana has been part of many volunteer efforts and her mistake was that she
expected everyone to have the same volunteering spirit that she has. In reality
it turned out people had trouble managing their own time or lacking the
proper communication skills. Not taking responsibility for your actions and
not learning from mistakes are other traits she noticed.&lt;/p&gt;
&lt;p&gt;At CoKitchen they aim at pairing completely different people with one another
so that everyone is able to learn the most from the other person. This is
part of their internal mentorship program.&lt;/p&gt;
&lt;p&gt;Another interesting book mentioned by a member of the audience was
&lt;a href="http://amzn.to/2drohhT"&gt;Drive: The Surprising Truth About What Motivates Us&lt;/a&gt;.
The book reveals the three elements of true motivation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AUTONOMY - the desire to direct our own lives;&lt;/li&gt;
&lt;li&gt;MASTERY - the urge to get better and better at something that matters;&lt;/li&gt;
&lt;li&gt;PURPOSE - the yearning to do what we do in the service of something larger than ourselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds like an interesting book (from the point of view of the employer)
which is definitely going into my reading list.&lt;/p&gt;
&lt;p&gt;Sorry if my notes are a bit terse this time, it's been a busy month.
I still hope you learned something new from this post. Thanks for reading!&lt;/p&gt;
&lt;p&gt;Image credit:
&lt;a href="https://medium.com/@omarismail_io/the-passionate-programmer-an-intense-reading-week-95f3699cac91#.dzpqwy86y"&gt;Omar Ismail&lt;/a&gt;&lt;/p&gt;</summary><category term="events"></category></entry><entry><title>Updated MacBook Air Drivers for RHEL 7.3</title><link href="http://atodorov.org/blog/2016/10/18/updated-macbook-air-drivers-for-rhel-7.3/" rel="alternate"></link><updated>2016-10-18T13:27:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-18:blog/2016/10/18/updated-macbook-air-drivers-for-rhel-7.3/</id><summary type="html">&lt;p&gt;Today I have re-build the wifi and backlight drivers for MacBook Air
against the upcoming Red Hat Enterprise Linux 7.3 kernel.
&lt;em&gt;wl-kmod&lt;/em&gt; again needed a
&lt;a href="https://github.com/atodorov/wl-kmod-for-rhel7/commit/c6b3d0fde66dd29671df5f52c40f7395f1e1e59e"&gt;small patch&lt;/a&gt;
before it can be compiled. &lt;em&gt;mba6x_bl&lt;/em&gt; has been updated to the latest
upstream and compiled without errors. The current RPM versions are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;akmod-wl-6.30.223.248-9.el7.x86_64.rpm
kmod-wl-3.10.0-513.el7.x86_64-6.30.223.248-9.el7.x86_64.rpm
kmod-wl-6.30.223.248-9.el7.x86_64.rpm
wl-kmod-debuginfo-6.30.223.248-9.el7.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;kmod-mba6x_bl-20161018.d05c125-1.el7.x86_64.rpm
kmod-mba6x_bl-3.10.0-513.el7.x86_64-20161018.d05c125-1.el7.x86_64.rpm
mba6x_bl-common-20161018.d05c125-1.el7.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and they seem to work fine for me. Let me know if you have any issues
after RHEL 7.3 comes out officially.&lt;/p&gt;
&lt;p&gt;PS: The &lt;a href="https://github.com/patjak/bcwc_pcie"&gt;bcwc_pcie&lt;/a&gt; driver for the video camera
appears to be ready for general use, regardless of some issues. No promises here
but I'll try to compile that one as well and provide it in my
&lt;a href="http://atodorov.org/blog/2015/04/29/rhel-7-repository-for-macbook-air/"&gt;Macbook Air RHEL 7 repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PS2: Sometime after Sept 14th I have probably upgraded my system and now it can't
detect external displays if the display is not plugged in during boot. I'm seeing
the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# cat /sys/class/drm/card0-DP-1/enabled
disabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which appears to be the same issue reported on the
&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1269591#p1269591"&gt;ArchLinux forum&lt;/a&gt;.
I'm in a hurry to resolve this and any help is welcome.&lt;/p&gt;</summary><category term="Mac"></category><category term="RHEL"></category><category term="fedora.planet"></category></entry><entry><title>The 4 Basic Communication Styles</title><link href="http://atodorov.org/blog/2016/10/09/the-4-basic-communication-styles/" rel="alternate"></link><updated>2016-10-09T01:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-09:blog/2016/10/09/the-4-basic-communication-styles/</id><summary type="html">&lt;p&gt;&lt;img alt="4 communication styles" src="/images/four-styles.png" title="4 communication styles" /&gt;&lt;/p&gt;
&lt;p&gt;The first
&lt;a href="http://www.2016.gemorg.bg/"&gt;GEM Conference in Bulgaria&lt;/a&gt; took place on
Monday and Tuesday. I missed most of the sessions due to other meetings
and tasks but managed to attend a workshop on the topic
&lt;strong&gt;How to harness the power of influence and communication in entrepreneurship&lt;/strong&gt;
by Plamen Popov and Yassar Markos.&lt;/p&gt;
&lt;h2&gt;3 Fundamentals for Communication&lt;/h2&gt;
&lt;p&gt;According to Plamen and Yassar there are 3 key fundamentals for any kind of
communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Willingness&lt;/strong&gt; to pay the price for this communication to happen;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt; because we need to try different approaches until we
reach the desired person in a way they can understand what we're saying;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt; because we always need to be consistent in what we deliver
to others so that we always match their expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4 Communication Styles&lt;/h2&gt;
&lt;p&gt;Then there are 4 basic communication styles based on how formal or informal
the communication is and how passive or aggressive it is.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Director&lt;/strong&gt; aka dominant style - they exhibit formal and aggressive
communication. Key words for them are results, effectiveness, no small talk,
to the point. They dislike wasting their time because they always have something
better and more interesting to do. This is why people in this group are
the worst listeners. They love conflicts and seek ideas and results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expresser&lt;/strong&gt; aka promoting style are dominant/aggressive but informal.
They are loud, always speak about
themselves, they want public attention and to be unique. They forget details but instead
are able to grasp the big picture quite easily. They have lots of energy and
passion and love to start new projects and don't complete them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Harmonizer&lt;/strong&gt; aka supportive style - they exhibit informal and passive
communication. They love connections and relationships, they use soft
language and look after people and team mates. They don't like conflicts and
competitive games. People from this style get impressed when you share
personal stories and details with them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thinker&lt;/strong&gt; aka analytical style people are formal but non-aggressive. They
like to know all the facts and always ask lots of questions because they need
to understand the big picture. They need time to understand before they can make
a decision. In their lives everything has a particular place. They are prone to
postponing tasks until they reach perfection (which they never will).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A person typically has one dominant style and a mix of one or two others. I myself
am mostly Director and Expresser aka dominant and promoting with a pinch of Thinker.
I mostly lack the Harmonizer traits. However it is more important to know what
style the person you are talking to is, not what your personal style is.&lt;/p&gt;
&lt;p&gt;When judging the style of others take into account where you stand. A person who
is strongly formal and aggressive will view a less formal and mild person as the
Expresser or Harmonizer style. However to a 3rd party both of these two persons may
appear to be dominated by the Director style.&lt;/p&gt;
&lt;h2&gt;How to Make a Good Presentation&lt;/h2&gt;
&lt;p&gt;When presenting to a single person or a small group obviously you have to tailor
your presentation according to their communication styles. However when presenting
before a large and diverse crowd you need to account for all of them in the following
order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Capture the Expresser or promoting style by giving them a promise for something
cool and interesting. Because they easily forget details and become distracted you
can lose them first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then capture the Director or dominant style by asserting your authority. State your
expertise in the field to establish trust. Also sell them the idea for efficiency
because this is the value they need to extract from you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third comes the Harmonizer or supportive style. They seek open people to
connect with. Personal stories and struggles are the best way to engage them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last comes the Thinker or analytical style. They need to know all the information
so you have to give them links and materials for further reading. It is also
a good idea to give them the ability to ask you questions later (via email, chat, etc)
because they will analyze your ideas and come up with more questions on their own.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have already started to organize my presentations based on the above 4 key points
so hopefully you will see me delivering better talks in the future.&lt;/p&gt;</summary><category term="events"></category></entry><entry><title>What I Learned from IT Weekend</title><link href="http://atodorov.org/blog/2016/10/08/what-i-learned-from-it-weekend/" rel="alternate"></link><updated>2016-10-08T13:48:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-08:blog/2016/10/08/what-i-learned-from-it-weekend/</id><summary type="html">&lt;p&gt;&lt;img alt="IT Weekend" src="/images/itweekend.png" title="IT Weekend" /&gt;&lt;/p&gt;
&lt;p&gt;Last week I attended the first &lt;a href="http://it-weekend.com"&gt;IT Weekend&lt;/a&gt; in Bulgaria.
It's like a training camp for athletes but for QA engineers. There were 20 people
attending and the format was very friendly and relaxed. The group had members with
various levels of experience and technical skills, also different areas they work in.
All presentations are on
&lt;a href="https://www.youtube.com/watch?v=iRA3tRwclRU&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;YouTube&lt;/a&gt;.
Here's a brief of what happened and what I learned.&lt;/p&gt;
&lt;p&gt;I had the honor to present in the first slot and gave a quick introduction
to mutation testing. This was my first time giving this talk and I'm not entirely
happy with how I've presented it. Also mutation testing is touching a lot on unit tests,
programming and source code which in some organizations goes to the devel department.
I think mutation testing is harder to understand from people not familiar with it
than I initially thought. I'm taking note to improve the way I present this topic
to the public.&lt;/p&gt;
&lt;p&gt;Yavor Donev gave a good overview of Appium and how to use it on Android.
The most important question for me was "&lt;em&gt;Is it possible to utilize the same test suite
on Android and iOS, given that the environments are different&lt;/em&gt;". With this I mean
regardless of how much we try to make the same (native) app on both platforms
it will end up differently because the platforms are essentially different. For
example there is a different number of physical buttons available.&lt;/p&gt;
&lt;p&gt;If we assume that both iOS and Android apps follow the same design and use
similar workflow then it should be possible to create a test suite which is
platform aware and account for the minor differences. We're also adding
another layer of complexity by introducing the requirement that both apps stay
in sync with each other and account for the quirks of the foreign platform.
Depending on your apps and goals this may not be an easy task!&lt;/p&gt;
&lt;p&gt;The one thing I didn't like about Appium is that upstream doesn't care much about
version compatibility and they tend to break and change stuff arbitrary between
releases. That said if it works, don't update it or otherwise be extremely
careful.&lt;/p&gt;
&lt;p&gt;I also had a nice chat with Yavor on the topic of career change, learning to
program and working with people who have very little coding experience. His
approach is to develop a higher level test framework on top of Appium which
his team mates can use more easily.&lt;/p&gt;
&lt;p&gt;Aneta Petkova's &lt;em&gt;Selenium Grid in Unix Environment&lt;/em&gt; is a bit out of my domain.
However I took one important lesson: regardless of how great your tools are
there are minor details which can make or break your day. In her case these
are the physical location of the tests (e.g. which Selenium node runs them) and
access to shared resources. Turns out WebDriver doesn't give you
this information directly and you need to go through hoops to get it. Her
solution was to place the test code on the Grid Hub and provide a shared file system.&lt;/p&gt;
&lt;p&gt;The bigger lesson is: whenever you have to design an automated test environment
(aka test lab) make sure to evaluate your needs beforehand.&lt;/p&gt;
&lt;p&gt;The last talk was a guest appearance by Denitsa Evtimova. She is a QA architect
with 16 years of experience and presented the QA strategy at Paysafe group.
They have a large monolithic system (legacy code) and have adopted a pyramid
style approach to testing. Whenever possible tests are brought down to the lowest
level (e.g. unit tests) and not repeated on the higher levels. At the top
stand manual testing. Teams are small: 3-4 developers and 2-3 QAs. It is the team
responsibility to make sure tests are implemented at the lowest possible level.
The process is not strictly enforced and the company relies more on self
governance in this aspect. Also everyone on the team can contribute
additional tests whenever they see something missing.
Test (writing) tasks are all logged in JIRA. They are also small so that
everything can be completed in the same day.&lt;/p&gt;
&lt;p&gt;The second day was more informal. We did a quick exploratory testing
exercise and shared opinions on different test tools. Then the group had
a discussion about soft skills and how QA engineers can change the perception
of developers about the QA profession (especially in teams where there are many
manual testers). The key points are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Criticize the software, not the person, e.g. don't blame the person directly;&lt;/li&gt;
&lt;li&gt;Communicate with concrete facts and data, not emotions and perceptions;&lt;/li&gt;
&lt;li&gt;Jokes of the type "how many QA engineers are needed to screw a light bulb"
are a problem because they lead to underestimation of the job role;&lt;/li&gt;
&lt;li&gt;Sometimes it is not quite clear (to others) how the QA role contributes to
the development of the product and the organization;&lt;/li&gt;
&lt;li&gt;For a QA it is important to be able to give a non-biased opinion and
observations on what is happening with the product/process;&lt;/li&gt;
&lt;li&gt;A QA person needs to be very calm. They have to be able to listen to
everybody (especially developers) and accept their point of view but at
the same time also communicate their own point of view.&lt;/li&gt;
&lt;li&gt;It is important
to sit together with developers and observe the problem, brainstorm and
propose possible solutions. This also creates a feedback loop where the
developer feels empowered because he's part of the process identifying
the problem and proposing the best solution;&lt;/li&gt;
&lt;li&gt;In agile teams it is a good idea to rotate people between developer and
QA positions. This will help them better understand the job of others,
acquire new skills and also bring fresh thinking to the team;&lt;/li&gt;
&lt;li&gt;Quality Assurance is an ungrateful job and only people with very calm and methodical
thinking (to follow through and write all possible scenarios) are able to excel
in this field. On the other hand developer usually think about the happy path
scenarios and strive to make their code work as best as they can;&lt;/li&gt;
&lt;li&gt;By rotating job roles within the team developers
will quickly find out that testing is not their field and gain respect
towards their QA peers;&lt;/li&gt;
&lt;li&gt;US managers have the habit of telling "good job" to everyone, even for
small and routine tasks. In Bulgaria (and maybe elsewhere) we're not used
to this. Instead we're used of being scolded when we do something wrong.
If everything is good then we don't receive any recognition;&lt;/li&gt;
&lt;li&gt;Using the American "good job" is actually a good thing. Team mates will
start performing better over time because they will feel their work is
valued and not meaningless, they will feel recognized which will boost
morale and productivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="events"></category><category term="QA"></category></entry><entry><title>Peter Sabev on Test Automation</title><link href="http://atodorov.org/blog/2016/10/07/petar-sabev-on-test-automation/" rel="alternate"></link><updated>2016-10-07T11:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-10-07:blog/2016/10/07/petar-sabev-on-test-automation/</id><summary type="html">&lt;p&gt;&lt;img alt="the automation snake chart" src="/images/petar_sabev_automation.jpg" title="The automation snake chart" /&gt;&lt;/p&gt;
&lt;p&gt;Last week Peter Sabev gave his talk
"On Reporting Bugs: Errors Made and Lessons learned" for DEV.bg
(&lt;a href="https://www.youtube.com/watch?v=jVY3U58Js90&amp;amp;index=6&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db"&gt;watch in Bulgarian&lt;/a&gt;).
At the end of the talk there was a quick question how would he approach automation.
I have always approached automation in terms of manpower and skills available
within the team while he proposed an approach based on return of investment.&lt;/p&gt;
&lt;p&gt;Given that you have a team with strong understanding of the
software (code) under test and they have good coding skills then start with the
hardest test cases first. This way the team will have lots of hard work
upfront and there will be some lead time without visible results.
However when the hardest/most complex test cases are already automated you
will most likely have covered a big portion of the SUT.&lt;/p&gt;
&lt;p&gt;On the contrary, when you start with the easiest test cases first then
the team will progress gradually and have enough time to get to grips
with the SUT. You are also more likely to see more regressions or bugs
missed. With this approach every subsequent automated test will be harder
to write and more complex than the previous one. This is a good fit for
team who don't have strong experience with test automation and/or are
unfamiliar with the product.&lt;/p&gt;
&lt;p&gt;Peter proposes a different approach. He plots the test cases as dots, based
on how much time they take to execute manually and how much time/how hard
is it to automate the particular case. Then you start to move from the lower right
corner towards the upper left corner in a weaving motion, like a snake,&lt;/p&gt;
&lt;p&gt;His argument is that once you automate the test cases which are not very complex
but require lots of time to execute by hand then you free up resources
within the team. As you progress up the chart the test cases become harder
to automate and yield less return of investment because they don't take
some much time to execute manually.&lt;/p&gt;
&lt;p&gt;For more information about Peter's approach please read
&lt;a href="http://waset.org/publications/10003250/manual-to-automated-testing-an-effort-based-approach-for-determining-the-priority-of-software-test-automation"&gt;his article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can see from the snake chart the team constantly faces test scenarios
jumping up and down on the automation hardness scale. Which also means
that you need to have the suitable skills within the team. IMO this is best
suited for teams where each member has different degree of experience.
I'm also in favor of using the snake chart as a tool to distribute
automation tasks within the team.&lt;/p&gt;
&lt;p&gt;If you'd like to hear more about Peter's and mine views on manual vs. automated
testing be sure to follow &lt;a href="http://dev.bg"&gt;DEV.bg&lt;/a&gt;.
We are going to host a discussion on October 18th so stay tuned!&lt;/p&gt;</summary></entry><entry><title>What I Learned from EuRuKo 2016</title><link href="http://atodorov.org/blog/2016/09/26/what-i-learned-from-euruko-2016/" rel="alternate"></link><updated>2016-09-26T01:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-09-26:blog/2016/09/26/what-i-learned-from-euruko-2016/</id><summary type="html">&lt;p&gt;&lt;img alt="EuRuKo 2016" src="/images/euruko2016.jpg" title="EuRuKo 2016" /&gt;&lt;/p&gt;
&lt;p&gt;As my frequent readers may know I try to summarize all the conferences
and events I go to. This year's EuRuKo inspired me to take a different
approach and instead of quickly summarizing the event I will try to
highlight what I have learned from it! My intention is to use this as a
tool to improve my skills and the work I do. It will probably be a long
post so here we go.&lt;/p&gt;
&lt;p&gt;Let me say that I don't consider myself a Ruby developer although I do
write a small amount of Ruby code. I also don't really consider myself a
developer although I have a formal degree in software engineering and do
my fair share of open source contributions.&lt;/p&gt;
&lt;p&gt;Being different and thinking differently has always been helpful to me in
Quality Assurance and this time was no exception. Attending a conference
I knew nothing about and meeting with people whose job is totally different
than mine turned out to be my greatest experience on the conference circuit
this year.&lt;/p&gt;
&lt;h2&gt;Lesson 1&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Get out of the comfort zone, meet new
people, exchange ideas and learn!&lt;/strong&gt; The very fact that I am writing this post
not following my usual summary style proves this is working.&lt;/p&gt;
&lt;p&gt;Very early during the event I started to notice a recurring theme which grew
stronger by the minute. The Ruby community is very open and inclusive to newcomers
and they seem to be doing a very good job about on-boarding everyone who wants to
learn. I already wrote about Ivan Nemitchenko's
&lt;a href="http://atodorov.org/blog/2016/09/25/what-ivan-learned-from-organizing-internships/"&gt;experience of organizing remote internships&lt;/a&gt;
and there are also the Rails Girls local communities, the 
&lt;a href="http://railsgirlssummerofcode.org/"&gt;Rails Girls Summer of Code&lt;/a&gt; (didn't know about it)
and the various local Ruby communities who pitched their cities to host the next
EuRuKo. I really loved this feeling of community. In the broader Linux, Python and
QA world I have not seen this being so pronounced.&lt;/p&gt;
&lt;h2&gt;Lesson 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open up (the open source) community even more. Make it easier for newcomers to join!
Treat them as human and don't expect them to be like yourself. Do teach and mentor
both to help newcomers but also to help yourself become better!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is mostly on par with my community work but I think I can do better. I will take
the time to evaluate what I've been doing in the past and identify areas for improvements.
I also encourage my readers and students to send me feedback as well.&lt;/p&gt;
&lt;p&gt;I've also learned that junior developers can make meaningful
contributions to production grade code when they are given the appropriate set of tasks
and guidance. Stephanie Nemeth argued that companies should hire (more) enthusiastic
career changers as junior developers because they have very strong motivation for
success.&lt;/p&gt;
&lt;h2&gt;Lesson 3&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Re-evaluate how we look at junior developers, especially how we examine and hire them
and how we on-board them&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Both lessons 2 and 3 are valid in the open source world and even more so in the
corporate world.&lt;/p&gt;
&lt;p&gt;I also liked the fact that some of the lightning talks were given by people who
had no previous experience in Ruby. @TeamJoda2016 talked about what they did and
learn throughout the summer and really cracked the room with their
"oh and btw we are looking for a job" as their final slide!&lt;/p&gt;
&lt;h2&gt;Lesson 4&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you are new/inexperienced at something don't be afraid to try it out. Give it
the best you've got and see how it goes. Worst case .... well nothing bad really happens,
best case you end up doing the best job in your life.&lt;/strong&gt; That's also been my
&lt;a href="http://atodorov.org/blog/2014/02/19/7-years-1400-bugs-red-hat-qa/"&gt;personal experience with software testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Carina C. Zona's &lt;em&gt;Consequences Of An Insightful Algorithm&lt;/em&gt;
(old video &lt;a href="https://www.youtube.com/watch?v=NheE6udjfGI&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=28"&gt;here&lt;/a&gt;)
dealt with the ethical
responsibilities of us as developers and this is becoming more common with deep learning neural networks.&lt;/p&gt;
&lt;h2&gt;Lesson 5&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We’re able to extract remarkably precise
intuitions about an individual. But do we have a right to know what they didn’t
consent to share, even when they willingly shared the data that leads us there?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Krissy's &lt;em&gt;The HTT(Pancake) Request&lt;/em&gt; made a great analogy of consuming APIs with
your customer experience when visiting a restaurant.&lt;/p&gt;
&lt;h2&gt;Lesson 6&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Design APIs (software in general) as if that was a physical product where your
customers happiness matters&lt;/strong&gt;. We see this all the time in our daily jobs and we're
guilty of doing it as well. Btw at the moment I'm in the middle of huge refactoring
of &lt;a href="https://github.com/chartit/django-chartit"&gt;django-chartit&lt;/a&gt; which breaks all
backwards compatibility. I guess I will have to re-evaluate my design and approach.&lt;/p&gt;
&lt;p&gt;By accident I've made good friends with Alex Georgiev and the folks at Fyber.
I liked the fact that at the conference they had couple of people
working in QA and we managed to have a nice talk about QA vs developers and the transformation
between the two. That also touched on the bigger subject of testers not being able to
code and testers not being available for hire.&lt;/p&gt;
&lt;h2&gt;Lesson 7&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Driving people to improve their skills (learn to code, write tests, etc) is possible
but needs to come from management, needs clear direction and also a little bit of peer pressure.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After all isn't that what an agile team is supposed to be ?&lt;/p&gt;
&lt;p&gt;Now being the able to code, not entirely Ruby ignorant QA guy that I am I was
immediately offered several positions in London and Berlin (and no I'm still staying
in Sofia). As it turned out good QA engineers with good development skills are
in greater demand than developers not only in Sofia but all around the world!&lt;/p&gt;
&lt;h2&gt;Lesson 8&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fellow QA guys, please do learn to program. Dear developers, please try thinking
more like a tester the next time you write code&lt;/strong&gt; (me included).&lt;/p&gt;
&lt;p&gt;Hiring a barista and furnishing your company stand with the best coffee machine
you can afford while having an ugly hand written sign saying "MAIN CONFERENCE COFFEE -&amp;gt;"
is a marketing stunt that I really love. I'm not sure how well that worked for their
hiring but it got them visibility. I'm definitely stealing this one!&lt;/p&gt;
&lt;h2&gt;Lesson 9&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Conference coffee sucks. Provide better one and developers will queue at your stand.
To a greater extent - research your target and their needs and provide a product
that solves their problem.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;What we gave back&lt;/h2&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/banitsa?src=hash"&gt;#banitsa&lt;/a&gt; is a blessing for hang over &lt;a href="https://twitter.com/hashtag/euruko?src=hash"&gt;#euruko&lt;/a&gt;&lt;/p&gt;&amp;mdash; Monica (@KFMolli) &lt;a href="https://twitter.com/KFMolli/status/779582699291934720"&gt;September 24, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;indeed Monica it is. Here's the secret sauce&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Thanks a lot &lt;a href="https://twitter.com/euruko"&gt;@euruko&lt;/a&gt; to share the recipes for &lt;a href="https://twitter.com/hashtag/boza?src=hash"&gt;#boza&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/banitsa?src=hash"&gt;#banitsa&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/euruko?src=hash"&gt;#euruko&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/bulgary?src=hash"&gt;#bulgary&lt;/a&gt; &lt;a href="https://t.co/MrkpD4jxve"&gt;pic.twitter.com/MrkpD4jxve&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matteo Piotto (@c1p8) &lt;a href="https://twitter.com/c1p8/status/779323219765592066"&gt;September 23, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;My personal contribution back was telling Yammer and Deliveroo about mutation
testing and pointing them to the right tools and videos on the subject. I wish
them good luck and happy testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I will be speaking about mutation testing at
several different events in Bulgaria in the next 2 months so make sure to find
me if you want to chat.&lt;/p&gt;</summary><category term="events"></category></entry><entry><title>What Ivan Learned from Organizing Internships</title><link href="http://atodorov.org/blog/2016/09/25/what-ivan-learned-from-organizing-internships/" rel="alternate"></link><updated>2016-09-25T11:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-09-25:blog/2016/09/25/what-ivan-learned-from-organizing-internships/</id><summary type="html">&lt;p&gt;This is a summary of &lt;a href="http://inem.at/"&gt;Ivan Nemytchenko&lt;/a&gt;'s talk at
EuRuKo yesterday
(slides &lt;a href="http://www.slideshare.net/creatop/my-experiense-of-remote-internship-for-junior-ruby-developers"&gt;here&lt;/a&gt;).
I'm writing this because that was the best talk both
in terms of content and visual presentation I saw at the conference and because
it is closely related to my work with &lt;a href="http://hackbulgaria.com"&gt;HackBulgaria&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The short story is that at some point Ivan was mentoring several junior developers
and saw the need to scale this effort so he did a call for interns and got back 60 replies.&lt;/p&gt;
&lt;h2&gt;What an Intern Gets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Projects in their portfolio&lt;/li&gt;
&lt;li&gt;Working experience, including team work&lt;/li&gt;
&lt;li&gt;Developing an entire product from idea to production&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ivan wanted to find suitable interns who have basic Ruby on Rails knowledge
and who could invest a minimum of 20 hours per week of their time so he devised
an aptitude test of 3 parts. &lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
&lt;p lang="en" dir="ltr"&gt;The three part test &lt;a href="https://twitter.com/inem"&gt;@inem&lt;/a&gt; used to challenge 60 candidates for a Ruby internship. Pretty cool. &lt;a href="https://twitter.com/hashtag/euruko?src=hash"&gt;#euruko&lt;/a&gt; &lt;a href="https://t.co/OsnN03pXkf"&gt;pic.twitter.com/OsnN03pXkf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tatiana Stantonian (@binaryberry) &lt;a href="https://twitter.com/binaryberry/status/779664766394564608"&gt;September 24, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Part 1 is developing basic functionality of the product.
Part 2 was adding different user types which require different validation logic, etc.
Part 3 was adding "purchasing" logic via external APIs. In Part 3 intentionally
there was no code review!&lt;/p&gt;
&lt;p&gt;The final result was shit! That was the purpose of the test. The reasoning being that
there is no right or wrong way to solve the problems he presented to the interns. Instead
he wanted to make them think and decide on a solution. Then feel the pain of their decision.
Ivan argues that what made us senior developers are these pains we have experienced at some
point in our careers, those fuck-ups that we did in some old project. All of them made us
better in our job because we could learn from the mistakes we've made and more importantly
understand the consequence of our decisions.&lt;/p&gt;
&lt;p&gt;The common mistakes Ivan saw were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ignoring levels of abstraction;&lt;/li&gt;
&lt;li&gt;Using too many gems without knowing or understanding their limitations;&lt;/li&gt;
&lt;li&gt;Gems were treated as the only way to solve a problem. More importantly changing
this way was out of the question;&lt;/li&gt;
&lt;li&gt;Interns didn't know about &lt;a href="http://stevelorek.com/service-objects.html"&gt;service objects&lt;/a&gt;,
well even some experienced developers seem to not know that;&lt;/li&gt;
&lt;li&gt;Business logic was all around the place;&lt;/li&gt;
&lt;li&gt;Bad naming all around&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next thing Ivan did was a group hangout code review followed by a short lecture about
design patterns, a refactoring session and finally cross code review. At the end the
product was delivered as expected.&lt;/p&gt;
&lt;p&gt;Following these initial efforts Ivan continued (with even more interns, or the next group of them I think)
by asking interns to develop internship automatization, that is a means for the system to
distribute tasks based on git commits, tags, etc so it can scale. They've added an admin
dashboard and started working on an open source alternative to NewRelic (if I got that correctly).
He was also able to enlist 2 more mentors to help him.&lt;/p&gt;
&lt;p&gt;Problems Ivan found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not enough mentors and external projects to work on for all of the interns;&lt;/li&gt;
&lt;li&gt;Treating a project as not real (e.g. not a real world product) is a mistake;&lt;/li&gt;
&lt;li&gt;A training project has the same management issues that a real product will have
and they need to be resolved in pretty much the same way;&lt;/li&gt;
&lt;li&gt;There was collective irresponsibility from the group of interns. They didn't do
what they said they will do;&lt;/li&gt;
&lt;li&gt;There were communication issues between the interns and the lack of enough mentors
was an obvious problem.&lt;/li&gt;
&lt;li&gt;There was also lack of motivation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd say these are the typical problems one also sees in almost any teams. It doesn't
matter if these are teams of students or teams of developers inside some company.&lt;/p&gt;
&lt;h2&gt;What a Junior Needs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A real project to work on;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A business context, a reason why something should be done and why it needs to be
done in a particular way&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Some visible achievement for their portfolio;&lt;/li&gt;
&lt;li&gt;Team work experience;&lt;/li&gt;
&lt;li&gt;Whole cycle development experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ivan thinks that &lt;strong&gt;the aptitude test worked great&lt;/strong&gt; because his interns were able to find
good jobs afterwards but he will change a few things. There will be even more tests
and he will reject unfit/bad interns. He will also do call for mentors not only for interns.
And he wants to turn mentors' experience into tests as well.&lt;/p&gt;
&lt;p&gt;I particularly like the "business context" item. IMO even seasoned developers need to have this
if they are expected to create a great product for their company. We're not just coders but
sometimes companies forget that!&lt;/p&gt;
&lt;p&gt;I am also wondering how can I apply a similar aptitude test in my work (both mentoring at
HackBulgaria and otherwise).&lt;/p&gt;
&lt;h2&gt;How about Senior Developers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;They all have routine tasks;&lt;/li&gt;
&lt;li&gt;and research tasks;&lt;/li&gt;
&lt;li&gt;Nice to have features and&lt;/li&gt;
&lt;li&gt;Low priority features;&lt;/li&gt;
&lt;li&gt;Side project ideas&lt;/li&gt;
&lt;li&gt;Missing features in their favorite open source projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Senior developers' tasks and desires will have to align with what a junior needs in order
for the mentorship to work. As senior devs we often make a mistake and expect everyone else
to think the same way we do and act as fast as we do. &lt;strong&gt;Ideally senior developers want to have multiple clones
of ourselves to work with!&lt;/strong&gt; I myself have been guilty of that and trying to change.&lt;/p&gt;
&lt;p&gt;In the context of a for-profit company the above findings should be taken into deep consideration
if you are about to have interns.&lt;/p&gt;
&lt;p&gt;After the talk I was lucky to talk to Ivan and tell him more about the training sessions
at HackBulgaria. I also proposed to him the sponsorship model which he hasn't considered.
He then made a counter offer: ask interns for high payment upfront and let them recoup that
based on their progress towards the end.&lt;/p&gt;
&lt;p&gt;I am really happy to have heard this presentation and being able to talk to Ivan in person. I also have
my notes about my "QA and Automation 101" training at HackBulgaria and I now
have a better idea how to go about organizing and summarizing them (will try to publish that soon).&lt;/p&gt;
&lt;p&gt;Last but not least, Ivan works at GitLab and promised to look at an issue I personally have
so here it is &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/7953"&gt;GitLab #7953&lt;/a&gt; :).&lt;/p&gt;
&lt;h2&gt;Related reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;My &lt;em&gt;How to hire Software Testers&lt;/em&gt; series: parts
&lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;One&lt;/a&gt;,
&lt;a href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/"&gt;Two&lt;/a&gt; and
&lt;a href="http://atodorov.org/blog/2016/06/03/how-to-hire-software-testers-pt-3/"&gt;Three&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;RadoRado's &lt;a href="http://radorado.me/kak_stanah_po_dobar_programist/"&gt;How I Became a Better Developer&lt;/a&gt;
in Bulgarian but please use Google translate;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sidonath"&gt;Damir Zekic&lt;/a&gt;'s The Importance of Teaching and Mentoring (from the
pov of the mentor) lightning talk at EuRuKo (will link video soon), similar to what Rado says;&lt;/li&gt;
&lt;li&gt;Alex Moldovan's &lt;a href="https://medium.com/@alexnm/how-outsourcing-is-killing-cluj-345a4cbbcb6c#.nutpdfftu"&gt;How Outsourcing is Killing Cluj&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="events"></category></entry><entry><title>Questers Beer'n'Code Day 2.0</title><link href="http://atodorov.org/blog/2016/08/30/questers-beerncode-day-20/" rel="alternate"></link><updated>2016-08-30T17:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-08-30:blog/2016/08/30/questers-beerncode-day-20/</id><summary type="html">&lt;p&gt;Last weekend I've visited
&lt;a href="https://www.facebook.com/events/617994718381217/"&gt;Questers Beer'n'Code Day&lt;/a&gt;
which was an open air mini-conference held at the terrace of their office.
As to organization the only drawback was the summer sun which made it impossible
to see anything on the screen. Most speakers were OK with that although they
wanted to show some code examples.&lt;/p&gt;
&lt;p&gt;I have recorded all talks and they are available in my
&lt;a href="https://www.youtube.com/watch?v=IX2ILL8Xq5s&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;TECH TALKS&lt;/a&gt;
YouTube play list. You can also hear me asking some questions from behind
the camera. All of the talks are in Bulgarian though, so sorry for my
English speaking readers.&lt;/p&gt;
&lt;p&gt;The afternoon started with Lidiya Georgieva and her talk about clean code
and code smells. I find the topic particularly interesting but she didn't
go into more details. She said she had used SonarCube but couldn't recommend
any other tools, except for the standard lint style ones. I have been using
&lt;a href="https://landscape.io/github/MrSenko/pelican-ab/"&gt;LandScape.io&lt;/a&gt; for all
Python based code I've been working on recently and I think it is great.&lt;/p&gt;
&lt;p&gt;Another talk I found interesting was by my fellow QA Petar Sabev on reporting
bugs. It was more of an entry level talk, but still very informative for both
less experienced QAs and other technical folks so I definitely recommend it.&lt;/p&gt;
&lt;p&gt;The last one, and most interesting, was Bogoi Bogdanov with Scaling Agile.
Despite the name
he covered some basics about Agile and what it actually is. Afterwards we've stayed
and talked for a good 2 hours more. I definitely would like to hear more from
him in the future.&lt;/p&gt;
&lt;p&gt;A big thanks to Questers for hosting this event and allowing me to record it.
Happy &lt;a href="https://www.youtube.com/watch?v=IX2ILL8Xq5s&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;watching&lt;/a&gt;.&lt;/p&gt;</summary><category term="events"></category></entry><entry><title>Python 2 vs. Python 3 List Sort Causes Bugs</title><link href="http://atodorov.org/blog/2016/08/05/python-2-vs-python-3-list-sort-causes-bugs/" rel="alternate"></link><updated>2016-08-05T10:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-08-05:blog/2016/08/05/python-2-vs-python-3-list-sort-causes-bugs/</id><summary type="html">&lt;p&gt;Can sorting a list of values crash your software? Apparently it can and is
another example of my
&lt;a href="http://atodorov.org/blog/2016/03/25/hello-world-qa-challenge/"&gt;Hello World Bugs&lt;/a&gt;.
Python 3 has simplified the
&lt;a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons"&gt;rules for ordering comparisons&lt;/a&gt;
which changes the behavior of sorting lists when their contents are dictionaries.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;20140911&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;20140911&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;4.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unorderable&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that the second elements in both lists have different keys
and Python doesn't know how to compare them. In earlier Python versions
this has been special cased as
&lt;a href="http://stackoverflow.com/questions/3484293/is-there-a-description-of-how-cmp-works-for-dict-objects-in-python-2/3484456#3484456"&gt;described here&lt;/a&gt;
by Ned Batchelder (the author of Python's coverage tool) but in Python 3
dictionaries have no natural sort order.&lt;/p&gt;
&lt;p&gt;In the case of &lt;em&gt;django-chartit&lt;/em&gt; (of which I'm now the official maintainer) this
bug triggers when you want to plot data from multiple sources (models) on the same
chart. In this case the fields coming from each data series are different and the
above error is triggered.&lt;/p&gt;
&lt;p&gt;I have worked around this in
&lt;a href="https://github.com/chartit/django-chartit/commit/9d9033ecd5a8592a12872293cdf6d710cebf894f"&gt;commit 9d9033e&lt;/a&gt;
by simply disabling an iterator sort but this is sub-optimal and I'm not quite certain
what the side effect might be. I suspect you may end up with a chart where the order
of values on the X axis isn't the same for the different models, e.g. one graph plotting
the data in ascending order the other one in descending.&lt;/p&gt;
&lt;p&gt;The trouble also comes from the fact that we're sorting an iterator (a list of fields) by
telling Python to use a list of dicts to determine the sort order. In this arrangement
there is no way to tell Python how we want to compare our dicts. The only solution I
can think about is creating a custom class and implementing a custom &lt;code&gt;__cmp__()&lt;/code&gt; method
for this data structure!&lt;/p&gt;</summary><category term="QA"></category><category term="Python"></category></entry><entry><title>PhantomJS 2.1.1 in Ubuntu different from upstream</title><link href="http://atodorov.org/blog/2016/07/23/phantomjs-211-in-ubuntu-different-from-upstream/" rel="alternate"></link><updated>2016-07-23T11:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-07-23:blog/2016/07/23/phantomjs-211-in-ubuntu-different-from-upstream/</id><summary type="html">&lt;p&gt;For some time now I've been hitting
&lt;a href="https://github.com/ariya/phantomjs/issues/12506"&gt;PhantomJS #12506&lt;/a&gt; with the
latest 2.1.1 version. The problem is supposedly fixed in 2.1.0 but this is not
always the case. If you use a .deb package from the latest Ubuntu then the problem
still exists, see
&lt;a href="https://bugs.launchpad.net/ubuntu/+source/phantomjs/+bug/1605628"&gt;Ubuntu #1605628&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turns out the root cause of this, and probably other problems, is the way
PhantomJS packages are built. Ubuntu builds the package against their stock
Qt5WebKit libraries which leads to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ldd usr/lib/phantomjs/phantomjs &lt;span class="p"&gt;|&lt;/span&gt; grep -i qt
    libQt5WebKitWidgets.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5WebKitWidgets.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5173ebf000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5PrintSupport.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5PrintSupport.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5173e4d000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Widgets.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Widgets.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f51737b6000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5WebKit.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5WebKit.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5171342000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Gui.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Gui.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5170df8000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Network.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Network.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5170c9a000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Core.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Core.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f517080d000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Sensors.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Sensors.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f516b218000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Positioning.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Positioning.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f516b1d7000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5OpenGL.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5OpenGL.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f516b17c000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Sql.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Sql.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f516b136000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Quick.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Quick.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5169dad000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5Qml.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5Qml.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5169999000&lt;span class="o"&gt;)&lt;/span&gt;
    libQt5WebChannel.so.5 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib64/libQt5WebChannel.so.5 &lt;span class="o"&gt;(&lt;/span&gt;0x00007f5169978000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While building from the upstream sources gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ldd /tmp/bin/phantomjs &lt;span class="p"&gt;|&lt;/span&gt; grep -i qt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you take a closer look at PhantomJS's sources you will notice there are
3 git submodules in their repository - &lt;code&gt;3rdparty&lt;/code&gt;, &lt;code&gt;qtbase&lt;/code&gt; and &lt;code&gt;qtwebkit&lt;/code&gt;.
Then in their &lt;code&gt;build.py&lt;/code&gt; you can clearly see that this local fork of &lt;code&gt;QtWebKit&lt;/code&gt;
is built first, then the &lt;code&gt;phantomjs&lt;/code&gt; binary is built against it.&lt;/p&gt;
&lt;p&gt;The problem is that these custom forks include additional patches to make
WebKit suitable for Phantom's needs. And these patches are not available
in the stock WebKit library that Ubuntu uses.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, that's correct. We need additional functionality that
vanilla QtWebKit doesn't have. That's why we use custom version.&lt;/p&gt;
&lt;p&gt;Vitaly Slobodin, PhantomJS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the moment of this writing Vitaly's qtwebkit fork is 28 commits ahead and
39 commits behind qt:dev. I'm surprised Ubuntu's PhantomJS even works.&lt;/p&gt;
&lt;p&gt;The solution IMO is to bundle the additional sources into the src.deb package
and use the same building procedure as upstream.&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>On Python Infinite Loops</title><link href="http://atodorov.org/blog/2016/07/15/on-python-infinite-loops/" rel="alternate"></link><updated>2016-07-15T09:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-07-15:blog/2016/07/15/on-python-infinite-loops/</id><summary type="html">&lt;p&gt;How do you write an endless loop without using &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, number constants
and comparison operators in Python ?&lt;/p&gt;
&lt;p&gt;I've been working on the mutation test tool
&lt;a href="https://github.com/sixty-north/cosmic-ray"&gt;Cosmic Ray&lt;/a&gt; and discovered that it
was missing a boolean replacement operator, that is an operator which will switch
&lt;code&gt;True&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; and vice versa, so I wrote one. I've also added some tests to
Cosmic Ray's test suite and then I hit the infinite loop problem.
CR's test suite contains the following code inside a module called &lt;code&gt;adam.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test suite executes mutations on &lt;code&gt;adam.py&lt;/code&gt; and then runs some tests which
it expects to fail. During execution one of the mutations is
&lt;code&gt;replace break with continue&lt;/code&gt; which makes the above loop infinite. The test suite
times out after a while and kills the mutation. Everything fails as expected and
we're good.&lt;/p&gt;
&lt;p&gt;Adding my boolean replacement operator broke this function. All of the other mutations
work as expected but then the loop becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we test this particular mutation there is no infinite loop so Cosmic Ray's
test suite doesn't time out like it should and an error is reported.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;job ID 25:Outcome.SURVIVED:adam
command: cosmic-ray worker adam boolean_replacer 2 unittest -- tests
&lt;span class="gd"&gt;--- mutation diff ---&lt;/span&gt;
&lt;span class="gd"&gt;--- a/home/travis/build/MrSenko/cosmic-ray/test_project/adam.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/home/travis/build/MrSenko/cosmic-ray/test_project/adam.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -32,6 +32,6 @@&lt;/span&gt;
     return x
 
 def trigger_infinite_loop():
&lt;span class="gd"&gt;-    while True:&lt;/span&gt;
&lt;span class="gi"&gt;+    while False:&lt;/span&gt;
         break
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the question becomes how to write the loop condition in such a way that nothing
will mutate it but it will still remain true so that when &lt;code&gt;break&lt;/code&gt; becomes &lt;code&gt;continue&lt;/code&gt;
this piece of code will become an infinite loop ? Using &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; constants
obviously is a no go. Same goes for numeric constants, e.g. &lt;code&gt;1&lt;/code&gt; or comparison
operators like &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, etc. - all of them will be mutated and will
break the loop condition.&lt;/p&gt;
&lt;p&gt;So I took a look at the docs for
&lt;a href="https://docs.python.org/2.4/lib/truth.html"&gt;truth value testing&lt;/a&gt; and discovered
&lt;a href="https://github.com/sixty-north/cosmic-ray/pull/155"&gt;my solution&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm creating an object instance here which will not be mutated by any of the
existing mutation operators.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="Python"></category></entry><entry><title>Bug in TuxCon Website</title><link href="http://atodorov.org/blog/2016/07/13/bug-in-tuxcon-website/" rel="alternate"></link><updated>2016-07-13T14:10:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-07-13:blog/2016/07/13/bug-in-tuxcon-website/</id><summary type="html">&lt;p&gt;&lt;img alt="TuxCon bug" src="/images/bugs/tuxcon_bug.png" title="TuxCon bug" /&gt;&lt;/p&gt;
&lt;p&gt;Here comes July 9th 2016 and the start of &lt;a href="http://tuxcon.mobi"&gt;TuxCon&lt;/a&gt; ...
with a bug on their website! The image above is taken during the first
talk of the conference. Obviously the count down timer is completely off.&lt;/p&gt;
&lt;p&gt;In
&lt;a href="https://github.com/TuxCon/tuxcon-website/blob/master/js/init.js#L100"&gt;init.js:100&lt;/a&gt;
there is this piece of code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;finalDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2016/07/09&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div#counter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;countdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;finalDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update.countdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;span&amp;gt;%D &amp;lt;em&amp;gt;days&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                &lt;span class="s1"&gt;&amp;#39;&amp;lt;span&amp;gt;%H &amp;lt;em&amp;gt;hours&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                &lt;span class="s1"&gt;&amp;#39;&amp;lt;span&amp;gt;%M &amp;lt;em&amp;gt;minutes&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                                &lt;span class="s1"&gt;&amp;#39;&amp;lt;span&amp;gt;%S &amp;lt;em&amp;gt;seconds&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It counts backwards and updates the HTML until &lt;code&gt;finalDate&lt;/code&gt; is reached. Then
the HTML is no longer updated and the default values are shown, which in
this case are non zero. A simple
&lt;a href="https://github.com/TuxCon/tuxcon-website/pull/1"&gt;patch&lt;/a&gt; fixes the problem.&lt;/p&gt;
&lt;p&gt;Initialize your variables properly and happy testing!&lt;/p&gt;</summary><category term="QA"></category></entry></feed>