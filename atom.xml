<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>atodorov.org</title><link href="http://atodorov.org/" rel="alternate"></link><link href="http://atodorov.org/atom.xml" rel="self"></link><id>http://atodorov.org/</id><updated>2017-06-12T11:30:00+03:00</updated><entry><title>Monitoring behavior via automated tests</title><link href="http://atodorov.org/blog/2017/06/12/monitoring-behavior-via-automated-tests/" rel="alternate"></link><updated>2017-06-12T11:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-12:blog/2017/06/12/monitoring-behavior-via-automated-tests/</id><summary type="html">&lt;p&gt;In my last several presentations I briefly talked about
using your tests as a monitoring tool. I've not been eating my own
dog food and stuff failed in production!&lt;/p&gt;
&lt;h2&gt;What is monitoring via testing&lt;/h2&gt;
&lt;p&gt;This is a technique I coined 6 months ago while working with Tradeo's team.
I'm not the first one to figure this out so if you know the proper
name for it please let me know in the comments.
So why not take a subset of your automated tests and run them regularly against
production? Let's say every hour?&lt;/p&gt;
&lt;p&gt;In my particular case we
started with integration tests which interact with the product (a web app)
in a way that a living person would do. E.g. login, update their settings,
follow another user, chat with another user, try to deposit money, etc.
The results from these tests are logged into a database and then charted
(using Grafana). This way we can bring lots of data points together and easily
analyze them.&lt;/p&gt;
&lt;p&gt;This technique has the added bonus that we can cover the most critical
test paths in a couple of minutes and do so regularly without human intervention.
Perusing the existing monitoring infrastructure of the devops team we can configure
alerts if need be. This makes it sort of early detection/warning system plus
it gives a degree of possibility to spot correlations between data points or
patterns.&lt;/p&gt;
&lt;p&gt;As simple as it sounds I've heard about a handfull of companies doing this
sort of continuous testing against production. Maybe you can implement something
similar in your organization and we can talk more about the results?&lt;/p&gt;
&lt;h2&gt;Why does it matter&lt;/h2&gt;
&lt;p&gt;Anyway, everyone knows
&lt;a href="http://atodorov.org/blog/2017/05/27/learn-python-selenium-automation-in-8-weeks/"&gt;how to write Selenium tests&lt;/a&gt;
so I'm not going to bother you with the details. Why does this kind of
testing matter?&lt;/p&gt;
&lt;p&gt;Do you remember a recent announcement by GitHub about Travis CI leaking some
authentication tokens into their public log files? I did receive an email about
this but didn't pay attention to it because I don't use GitHub tokens for
anything I do in Travis. However as a safety measure GitHub had went ahead and
wiped out my security tokens.&lt;/p&gt;
&lt;p&gt;The result from this is that my
&lt;a href="http://mrsenko.com/blog/mr-senko/2016/05/18/triggering-automatic-dependency-testing/"&gt;automated upstream testing infrastructure&lt;/a&gt;
had stopped working! In particular my requests to the GitHub API stopped
working. And I didn't even know about it!&lt;/p&gt;
&lt;p&gt;This means that since May 24th there have been at least 4 new
versions of libraries and frameworks on which some of my software depends
and I failed to test them! One of them was &lt;em&gt;Django 1.11.2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I have supplied a new GitHub token for my infra but if I had monitoring
I would have known about this problem well in advance. Next I'm off to write
some monitoring tests and also implement better failure detection in
&lt;a href="https://github.com/MrSenko/strazar"&gt;Strazar&lt;/a&gt; itself!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing (in production)!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Can a nested function assign to variables from the parent function</title><link href="http://atodorov.org/blog/2017/06/11/can-a-nested-function-assign-to-variables-from-the-parent-function/" rel="alternate"></link><updated>2017-06-11T23:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-11:blog/2017/06/11/can-a-nested-function-assign-to-variables-from-the-parent-function/</id><summary type="html">&lt;p&gt;While working on a
&lt;a href="https://github.com/getpelican/pelican/pull/1909"&gt;new feature for Pelican&lt;/a&gt;
I've put myself in a situation where I have two functions, one nested inside
the other and I want the nested function to assign to variable from the
parent function. Turns out this isn't so easy in Python!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;hello.py&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The example above is a recursive &lt;em&gt;Hello World&lt;/em&gt;. Notice the &lt;code&gt;i += 1&lt;/code&gt; line!
This line causes &lt;code&gt;i&lt;/code&gt; to be considered local to &lt;code&gt;do_print()&lt;/code&gt; and the result
is that we get the following failure on Python 2.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
    &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do_print&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="ne"&gt;UnboundLocalError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;i&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;referenced&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can workaround by using a global variable like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;hello.py using global variable&lt;/span&gt;&lt;pre&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However I prefer not to expose internal state outside the &lt;code&gt;hello()&lt;/code&gt;
function. Only if there was a keyword similar to &lt;strong&gt;global&lt;/strong&gt;. In Python 3
there is &lt;strong&gt;nonlocal&lt;/strong&gt;!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;hello.py using nonlocal, Python 3&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;nonlocal&lt;/strong&gt; is nice but it doesn't exist in Python 2! The workaround is to
not assign state to the variable itself, but instead use a mutable container.
That is instead of a scalar use a list or a dictionary like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;hello.py where i is a list, Python 2&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;do_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for reading and happy coding!&lt;/p&gt;</summary><category term="Python"></category><category term="fedora.planet"></category></entry><entry><title>Semantically Invalid Input</title><link href="http://atodorov.org/blog/2017/06/10/semantically-invalid-input/" rel="alternate"></link><updated>2017-06-10T22:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-06-10:blog/2017/06/10/semantically-invalid-input/</id><summary type="html">&lt;div class="highlight"&gt;&lt;span class="filename"&gt;Unsolvable Square example&lt;/span&gt;&lt;pre&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;------+-------+------&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;------+-------+------&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a comment to a
&lt;a href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/"&gt;previous post&lt;/a&gt;
&lt;em&gt;Flavio Poletti&lt;/em&gt; proposed a very interesting test case for a function which solves
the Sudoku game - &lt;em&gt;semantically invalid input, i.e. an input that passes intermediate
validation checks (no duplicates in any row/col/9-square) but that cannot possibly
have a solution&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Until then I thought that Sudoku was a completely deterministic game and if input
followed all validation checks then we always have a solution. Apparently I was wrong!
Reading more on the topic I discovered these
&lt;a href="http://sudopedia.enjoysudoku.com/Test_Cases.html"&gt;Sudoku test cases from Sudopedia&lt;/a&gt;.
Their &lt;a href="http://sudopedia.enjoysudoku.com/Invalid_Test_Cases.html"&gt;Invalid Test Cases&lt;/a&gt;
section lists several examples of semantically invalid input in Sudoku:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unsolvable Square;&lt;/li&gt;
&lt;li&gt;Unsolvable Box;&lt;/li&gt;
&lt;li&gt;Unsolvable Column;&lt;/li&gt;
&lt;li&gt;Unsolvable Row;&lt;/li&gt;
&lt;li&gt;Not Unique with examples having 2, 3, 4, 10 and 125 solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The example above cannot be solved because the left-most
square of the middle row (r5c1) has no possible candidates.&lt;/p&gt;
&lt;p&gt;Following the rule &lt;em&gt;non-repeating numbers from 1 to 9 in each row&lt;/em&gt; for row 5 we're
left with numbers: 6, 8 and 9. For (r5c1) 6 is a no-go because it is already present
in the same square. Then 9 is a no-go because it is present in column 1. Which leaves
us with 8, which is also present in column 1! Pretty awesome, isn't it?&lt;/p&gt;
&lt;p&gt;Also check the
&lt;a href="http://sudopedia.enjoysudoku.com/Valid_Test_Cases.html"&gt;Valid Test Cases&lt;/a&gt; section
which includes other interesting examples and definitely not ones which I have considered
previously when &lt;a href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/"&gt;testing Sudoku&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On a more practical note I have been trying to remember a case from my QA practice
where we had input data that matched all conditions but is semantically invalid. I
can't remember of such a case. If you do have examples about semantically invalid
data in real software please let me know in the comments below!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Top 7 Lessons From 134 Books</title><link href="http://atodorov.org/blog/2017/05/28/top-7-lessons-from-134-books/" rel="alternate"></link><updated>2017-05-28T23:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-05-28:blog/2017/05/28/top-7-lessons-from-134-books/</id><summary type="html">&lt;p&gt;This post is a quick summary of the
&lt;a href="https://www.youtube.com/watch?v=Pr5e9b9ZjvA&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=4"&gt;Top 7 Lessons From 134 Books&lt;/a&gt;
video by the OnePercentBetter YouTube channel. I am posting it as self
reference and because I'm interested to know what works for my readers.&lt;/p&gt;
&lt;h2&gt;Lesson 1: Boost your happy chemicals&lt;/h2&gt;
&lt;p&gt;The essence of this is to get your 8 hours of sleep, exercise regularly and
eat healthy.&lt;/p&gt;
&lt;p&gt;Couple of years ago I was a sugar addict and stopped cold turkey.
Then I tried fasting for a year,
strictly following the religious calendar every day (wasn't that hard). Then
I started doing some moderate exercise.&lt;/p&gt;
&lt;p&gt;As boring as it may sound it does actually work. I still have my urges but
I am feeling much more energetic right now. I am able to maintain concentration
for longer periods and I am actually more productive.&lt;/p&gt;
&lt;h2&gt;Lesson 2: Forget self-help, be kind&lt;/h2&gt;
&lt;p&gt;Just be kind!&lt;/p&gt;
&lt;h2&gt;Lesson 3: Value your time&lt;/h2&gt;
&lt;p&gt;One of the lessons which very much resonates with me.
I hate people who don't value their time, mostly because when I
have to interact with such people they are also wasting my own time.&lt;/p&gt;
&lt;p&gt;Not caring what others think about you also falls into this category.&lt;/p&gt;
&lt;h2&gt;Lesson 4: The 80/20 principle&lt;/h2&gt;
&lt;p&gt;80% of the returns come from 20% of the causes. Again one of my favorites
which I learned from &lt;a href="http://amzn.to/2rK6VmT"&gt;The 4-Hour workweek&lt;/a&gt; by Tim Ferris.&lt;/p&gt;
&lt;p&gt;This principle can be applied to every aspect of our lives to maximize the
returns. I still not very good at applying it (I think) but I'm trying to
figure it out.&lt;/p&gt;
&lt;h2&gt;Lesson 5: Learn how to win friends and influence people&lt;/h2&gt;
&lt;p&gt;This is from another favorite book of mine.
&lt;a href="http://amzn.to/2qqlckD"&gt;How to Win Friends and Influence People&lt;/a&gt; by Dale Carnegie.
Just read the book!&lt;/p&gt;
&lt;h2&gt;Lesson 6: Create, don't consume&lt;/h2&gt;
&lt;p&gt;It is only when we start creating that opportunities start coming our way!
I can confirm this from experience. It is because of this blog, my open source work
on GitHub, my teaching work and my speaking engagements that people contact me
every day with opportunities and work related proposals.&lt;/p&gt;
&lt;p&gt;Sure you need the skills to back those up, but the strange thing about creating is
that it actually improves these very same skills (plus teaches you a few other)
and that helps you deliver on the new opportunities that just came up. It's like
an enchanted circle but a good one!&lt;/p&gt;
&lt;h2&gt;Lesson 7: Mind over matter&lt;/h2&gt;
&lt;p&gt;No drama, please. There are events in our lives which we can't control. Why then bother
worrying about them and spending energy? The only thing we can do is choose how
to react when these events happen. I'm not saying don't care about anything but
rather care more selectively and spend more energy on the things that matter.&lt;/p&gt;
&lt;h2&gt;Bonus: 7 more lessons&lt;/h2&gt;
&lt;p&gt;OnePercentBetter made a new video called
&lt;a href="https://www.youtube.com/watch?v=8lLesO2FEHg"&gt;7 Unconventional Lessons From 179 Books (NOT Taught At SCHOOL)&lt;/a&gt;
which adds the following lessons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Future blindness - people sucks at predicting the future. If you want to
   know what it is really like to be in somebody's position just ask them.&lt;/li&gt;
&lt;li&gt;The 1% rule - small improvements applied continuously over a period of time
   have drastic effects.&lt;/li&gt;
&lt;li&gt;University is a scam - this one is controversial but the idea is that
   information is everywhere and accessible for free and opportunities are ripe.
   You don't (always) need to go to university to become successful.&lt;/li&gt;
&lt;li&gt;Don't give a fuck - what people think about you&lt;/li&gt;
&lt;li&gt;Mentorship is the fast-track to success - find a mentor to speed up your
   learning, your success rate, etc, learn from other people's mistakes instead
   of committing them on your own. I will also add learn how to and become a
   mentor yourself.&lt;/li&gt;
&lt;li&gt;Direct your efforts - set a goal and work towards it every single day.
   This gives meaning to everything you do.&lt;/li&gt;
&lt;li&gt;Pseudoscience can be beneficial - sometimes we don't have strong scientific
   proof that something is beneficial but experience tells us it probably is.
   Don't rush to decisions, analyze the risks and potential benefits before jumping in
   but do keep an eye on new methods and techniques. If they seem to work why not
   reap the benefits before the masses ?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks for reading and don't forget to comment and give me your feedback!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Social media image source: https://elearningindustry.com/top-10-psychology-books-elearning-professional-read&lt;/em&gt;&lt;/p&gt;</summary><category term="books"></category></entry><entry><title>Learn Python &amp; Selenium Automation in 8 weeks</title><link href="http://atodorov.org/blog/2017/05/27/learn-python-selenium-automation-in-8-weeks/" rel="alternate"></link><updated>2017-05-27T00:36:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-05-27:blog/2017/05/27/learn-python-selenium-automation-in-8-weeks/</id><summary type="html">&lt;p&gt;Couple of months ago I conducted a practical,
instructor lead training in Python and Selenium automation for
manual testers. You can find the materials at
&lt;a href="https://github.com/atodorov/qa-automation-python-selenium-101"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The training consists of several basic modules and practical homework
assignments. The modules explain&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The basic structure of a Python program and functions&lt;/li&gt;
&lt;li&gt;Commonly used data types&lt;/li&gt;
&lt;li&gt;If statements and (for) loops&lt;/li&gt;
&lt;li&gt;Classes and objects&lt;/li&gt;
&lt;li&gt;The Python unit testing framework and its assertions&lt;/li&gt;
&lt;li&gt;High-level introduction to Selenium with Python&lt;/li&gt;
&lt;li&gt;High-level introduction to the Page Objects design pattern&lt;/li&gt;
&lt;li&gt;Writing automated tests for real world scenarios
   without any help from the instructor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Every module is intended to be taken in the course of 1 week and begins with
links to preparatory materials and lots of reading. Then I help the students
understand the basics and explain with more examples, often writing code as
we go along. At the end there is the homework assignment for which I expect
a solution presented by the end of the week so I can comment and code-review it.&lt;/p&gt;
&lt;p&gt;All assignments which require the student to implement functionality, not tests,
are paired with a test suite, which the student should use to validate their
solution.&lt;/p&gt;
&lt;h2&gt;What worked well&lt;/h2&gt;
&lt;p&gt;Despite everything I've written below I had 2 students (from a group of 8)
which showed very good progress. One of them was the absolute star, taking
active participation in every class and doing almost all homework assignments
on time, pretty much without errors. I think she'd had some previous training
or experience though.
She was in the USA, training was done remotely via Google Hangouts.&lt;/p&gt;
&lt;p&gt;The other student was in Sofia, training was done in person. He is not on the
same level as the US student but is the best from the Bulgarian team. IMO he
lacks a little bit of motivation. He "cheated" a bit on some tasks providing
non-standard, easier solutions and made most of his assignments. After the first
Selenium session he started creating small scripts to extract results from
football sites or as helpers to be applied in the daily job.
The interesting
fact for me was that he created his programs as &lt;code&gt;unittest.TestCase&lt;/code&gt; classes.
I guess because this was the way he knew how to run them!?!&lt;/p&gt;
&lt;p&gt;There were another few students which had had some prior experience with
programming but weren't very active in class so I can't tell how their
careers will progress. If they put some more effort into it I'm sure they
can turn out to have decent programming skills.&lt;/p&gt;
&lt;h2&gt;What didn't work well&lt;/h2&gt;
&lt;p&gt;Starting from the beginning most students failed to read the preparatory
materials. Some of the students did read a little bit, others didn't read at all.
At the times when they came prepared I had the feeling the sessions progressed
more smoothly. I also had students joining late in the process, which for the
most part didn't participate at all in the training. I'd like to avoid that in
the future if possible.&lt;/p&gt;
&lt;p&gt;Sometimes students complained about lack of example code, although
&lt;em&gt;Dive into Python&lt;/em&gt; includes tons of examples. I've resorted to sending them
the example.py files which I produced during class.&lt;/p&gt;
&lt;p&gt;The practical part of the training was mostly myself programming on a big
TV screen in front of everyone else. Several times someone from the students
took my place. There wasn't much active participation on their part and
unfortunately they didn't want to bring personal laptops to the training
(or maybe weren't allowed)! We did have a company provided laptop though.&lt;/p&gt;
&lt;p&gt;When practicing functions and arithmetic operations the students struggled
with basic maths like breaking down a number into its digits or vice versa,
working with Fibonacci sequences and the like. In some cases they cheated
by converting to/from strings and then iterating over them. Also some
hard-coded the first few numbers of the Fibonacci sequence and returned
it directly. Maybe an in-place
explanation of the underlying maths would have been helpful but honestly
I was surprised by this. Somebody please explain or give me an advise here!&lt;/p&gt;
&lt;p&gt;I am completely missing examples of the &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timedelta&lt;/code&gt; classes
which tuned out to be very handy in the practical Selenium tasks and we had
to go over them on the fly.&lt;/p&gt;
&lt;p&gt;The OOP assignments went mostly undone, not to mention one of them had
bonus tasks which are easily solved using recursion. I think we could
skip some of the OOP practice (not sure how safe that is) because I really
need classes only for constructing the tests and we don't do anything fancy
there.&lt;/p&gt;
&lt;p&gt;Page Object design pattern is also OOP based and I think that went somewhat
well granted that we are only passing values around and performing some actions.
I didn't put constraints nor provided guidance on what the classes should
look like and which methods go where. Maybe I should have made it easier.&lt;/p&gt;
&lt;p&gt;Anyway, given that Page Objects is being replaced by Screenplay pattern,
I think we can safely stick to the all-in-one functional based Selenium
tests. Maybe utilize helper functions for repeated tasks (like login).
Indeed this is what I was using last year with Rspec &amp;amp; Capybara!&lt;/p&gt;
&lt;h2&gt;What students didn't understand&lt;/h2&gt;
&lt;p&gt;Right until the end I had people who had troubles understanding function
signatures, function instances and calling/executing a function. Also
returning a value from a function vs. printing the (same) value on screen
or assigning to the same global variable (e.g. FIB_NUMBERS).&lt;/p&gt;
&lt;p&gt;In the same category falls using method parameters vs. using global variables
(which happened to have the same value), using the parameters as arguments to
another function inside the body of the current function, using class attributes
(e.g. &lt;code&gt;self.name&lt;/code&gt;) to store and pass values around vs. local variables in methods
vs. method parameters which have the same names.&lt;/p&gt;
&lt;p&gt;I think there was some confusion about lists, dictionaries and tuples but
we did practice mostly with list structures so I don't have enough information.&lt;/p&gt;
&lt;p&gt;I have the impression that object oriented programming (classes and instances,
we didn't go into inheritance) are generally confusing to beginners with zero
programming experience. The classical way to explain them is by using some
abstractions like animal -&amp;gt; dog -&amp;gt; a particular dog breed -&amp;gt; a particular pet.
OOP was explained to me in a similar way back in school so these kinds of
abstractions are very natural for me. I have no idea if my explanation sucks or students are having hard time
wrapping their heads around the abstraction. I'd love to hear some feedback
from other instructors on this one.&lt;/p&gt;
&lt;p&gt;I think there is some misunderstanding between a class (a definition of behavior)
and an instance/object of this class (something which exists into memory). This
may also explain the difficulty remembering or figuring out what &lt;code&gt;self&lt;/code&gt; points to
and why do we need to use it inside method bodies.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;unittest.TestCase&lt;/code&gt; we didn't do lots of practice which is my fault.
The homework assignments request the students to go back to solutions
of previous modules and implement more tests for them. Next time I should
provide a module (possibly with non-obvious bugs) and request to write
a comprehensive test suite for it.&lt;/p&gt;
&lt;p&gt;Because of the missing practice there was some confusion/misunderstanding
about the &lt;code&gt;setUpClass/tearDownClass&lt;/code&gt; and the &lt;code&gt;setUp/tearDown&lt;/code&gt; methods.
Also add to the mix that the first are &lt;code&gt;@classmethod&lt;/code&gt; while the later
are not. "To be safe" students always defined both as class methods!&lt;/p&gt;
&lt;p&gt;I have since corrected the training materials but we didn't have
good examples (nor practiced) explaining the difference between
&lt;code&gt;setUpClass&lt;/code&gt; (executed once aka before suite) and &lt;code&gt;setUp&lt;/code&gt;
(possibly executed multiple times aka before test method).&lt;/p&gt;
&lt;p&gt;On the Selenium side I think it is mostly practice which students lack,
not understanding. The entire Selenium framework (any web test framework
for that matter) boils down to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load a page&lt;/li&gt;
&lt;li&gt;Find element(s)&lt;/li&gt;
&lt;li&gt;Click or hover (that one was tricky) element&lt;/li&gt;
&lt;li&gt;Get element's attribute value or text&lt;/li&gt;
&lt;li&gt;Wait for the proper page to load (or worst case AJAX calls)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IMO finding the correct element on the page is on-par with waiting
(which also relies on locating elements) and took 80% of the time we spent
working with Selenium.&lt;/p&gt;
&lt;p&gt;Thanks for reading and don't forget to comment and give me your feedback!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: https://www.udemy.com/selenium-webdriver-with-python/&lt;/em&gt;&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Quality Assurance According 2 Einstein</title><link href="http://atodorov.org/blog/2017/04/20/quality-assurance-according-2-einstein/" rel="alternate"></link><updated>2017-04-20T18:00:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-20:blog/2017/04/20/quality-assurance-according-2-einstein/</id><summary type="html">&lt;p&gt;&lt;img alt="logo" src="/images/qa_einstein.png" title="logo" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/events/1887550261534408/"&gt;Quality Assurance According 2 Einstein&lt;/a&gt;
is a talk which introduces several different ideas about how we need to think
and approach software testing. It touches on subjects like mutation testing,
pairwise testing, automatic test execution, smart test non-execution, using tests
as monitoring tools and team/process organization.&lt;/p&gt;
&lt;p&gt;Because testing is more thinking than writing I have chosen a different format
for this presentation. It contains only slides with famous quotes from one
of the greatest thinkers of our time - Albert Einstein!&lt;/p&gt;
&lt;p&gt;This blog post includes the accompanying links and references only! It is my first
iteration on the topic so expect it to be unclear and incomplete, use your imagination!
I will continue 
working and presenting on the same topic in the next few months
so you can expect updates from time to time. In the mean time I am happy to discuss
with you down in the comments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IMAGINATION
IS MORE
IMPORTANT
THAN KNOWLEDGE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2016/03/25/hello-world-qa-challenge/"&gt;Hello World bug challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2016/04/16/how-to-hire-software-testers-pt-2/#disqus_thread"&gt;Testing a Sudoku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/weldr/welder-web/pull/56"&gt;https://github.com/weldr/welder-web/pull/56&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/weldr/welder-web/pull/59"&gt;https://github.com/weldr/welder-web/pull/59&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;THE FASTER YOU GO,
THE SHORTER
YOU ARE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bit.ly/GTAC2016Unity3D"&gt;Using Statistics to Predict Which Tests to Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bit.ly/ISTA2016ExMachina"&gt;The framework that knows its bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2017/04/14/testing-red-hat-enterprise-linux-the-microsoft-way/"&gt;Testing Red Hat Enterprise Linux the Microsoft way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mrsenko.com/blog/mr-senko/2016/05/18/triggering-automatic-dependency-testing/"&gt;Automatic dependency testing with Strazar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2017/04/15/automatic-cargo-update-pull-requests-for-rust-projects/"&gt;Automatic cargo update, test and pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IF THE FACTS
DON'T FIT
THE THEORY,
CHANGE THE FACTS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sAfROROGujU&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=47"&gt;Coverage is Not Strongly Correlated with Test Suite Effectiveness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NKEptA3KP08&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;Code Coverage is a Strong Predictor of Test Suite Effectiveness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2016/12/27/mutation-testing-vs-coverage/"&gt;Mutation testing vs. coverage, Pt. 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2017/04/05/mutation-testing-vs-coverage-pt-2/"&gt;Mutation testing vs. coverage, Pt. 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There are 101 coverage metrics according to &lt;a href="http://www.badsoftware.com/coverage.htm"&gt;Cem Kaner&lt;/a&gt;.
  Which ones are you measuring and what conclusions are you making out of these metrics?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;THE WHOLE OF
SCIENCE
IS NOTHING MORE
THAN A REFINEMENT
OF EVERYDAY
THINKING.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/HackBulgaria/QA-and-Automation-101/tree/master/lesson12"&gt;How to find 1000 bugs in 30 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=m5NfgXP76Vw&amp;amp;index=1&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;t=103s"&gt;How we found a million style and grammar errors in the English Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=56oNQf5oITw&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;t=1300s&amp;amp;index=47"&gt;Simple Testing Can Prevent Most Critical Failures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nCGBgI1MNwE&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=60"&gt;Need it robust, make it fragile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;btw its me who asks the first question at the end :)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;INSANITY -
DOING THE SAME THING
OVER AND OVER
AND EXPECTING
DIFFERENT RESULTS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://atodorov.org/blog/2016/12/28/4-quick-wins-to-manage-the-cost-of-software-testing/"&gt;4 Quick Wins to Manage the Cost of Software Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This principle can be applied to any team/process within the organization.
The above link is reference to a nice book which was recommended to me but the
gist of it is that we always need to analyze, ask questions and change is we want
to achieve great results. A practicle example of what is possible if you follow
this principle is this talk
&lt;a href="https://www.youtube.com/watch?v=khSsjjg2eSQ&amp;amp;index=1&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db"&gt;Accelerate Automation Tests From 3 Hours to 3 Minutes&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THE ONLY
REASON FOR TIME
IS SO THAT
EVERYTHING DOESN'T
HAPPEN AT ONCE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The topic here is "using tests as a monitoring tool".
This is something I started a while back ago, helping a prominent startup with their
production testing but my involvement ended very soon after the framework was
deployed live so I don't have lots of insight.&lt;/p&gt;
&lt;p&gt;As the first few days this technique identified some unexpected behaviors,
for example a 3rd party service was updating very often. Once even they were
broken for a few hours - something nobody had information about.&lt;/p&gt;
&lt;p&gt;Since then I've heard about 2 more companies using similar techniques to continuously
validate that production software continues to work without having a physical
person to verify it. In the event of failures there are alerts which are
delath with accordingly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NO PROBLEM
CAN BE SOLVED FROM
THE SAME LEVEL
OF CONSIOUSNESS
THAT CREATED IT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That much must be obvious to us quality engineers. What about the future however?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/How-do-I-implement-AI-in-test-automation"&gt;How do I implement AI in test automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sourced.tech/"&gt;source{d} - Building the first AI that understands code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't have anything more concrete here. Just looking towards what is coming next!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DO NOT WORRY ABOUT
YOUR DIFFICULTIES
IN MATHEMATICS.
I CAN ASSURE
YOU MINE ARE STILL
GREATER.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Automatic cargo update &amp; pull requests for Rust projects</title><link href="http://atodorov.org/blog/2017/04/15/automatic-cargo-update-pull-requests-for-rust-projects/" rel="alternate"></link><updated>2017-04-15T23:18:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-15:blog/2017/04/15/automatic-cargo-update-pull-requests-for-rust-projects/</id><summary type="html">&lt;p&gt;If you follow my blog you are aware that I use automated tools to do some
boring tasks instead of me. For example they can detect when new versions of
dependencies I'm using are available and then schedule testing against them on the fly.&lt;/p&gt;
&lt;p&gt;One of these tools is
&lt;a href="http://mrsenko.com/blog/mr-senko/2016/05/18/triggering-automatic-dependency-testing/"&gt;Strazar&lt;/a&gt;
which I use heavily for my Django based packages.
Example: &lt;a href="https://travis-ci.org/atodorov/django-s3-cache/builds/218758538"&gt;django-s3-cache build job&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I've made a slightly different proof-of-concept for a Rust project.
Because rustc and various dependencies (called crates) are updated very often
we didn't want to expand the test matrix like Strazar does. Instead we wanted to
always build &amp;amp; test against the latest crates versions and if that passes
create a pull request for the update (in &lt;code&gt;Cargo.lock&lt;/code&gt;). All of this unattended
of course!&lt;/p&gt;
&lt;p&gt;To start create a cron job in Travis CI which will execute once per day and call your
test script. The script looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;cargo-update-and-pr&lt;/span&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$GITHUB_TOKEN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GITHUB_TOKEN is not defined&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;BRANCH_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;automated_cargo_update&amp;quot;&lt;/span&gt;

git checkout -b &lt;span class="nv"&gt;$BRANCH_NAME&lt;/span&gt;
cargo update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cargo &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="nv"&gt;DIFF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git diff&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="c"&gt;# NOTE: we don&amp;#39;t really check the result from testing here. Only that&lt;/span&gt;
&lt;span class="c"&gt;# something has been changed, e.g. Cargo.lock&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DIFF&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# configure git authorship&lt;/span&gt;
    git config --global user.email &lt;span class="s2"&gt;&amp;quot;atodorov@MrSenko.com&amp;quot;&lt;/span&gt;
    git config --global user.name &lt;span class="s2"&gt;&amp;quot;Alexander Todorov&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# add a remote with read/write permissions!&lt;/span&gt;
    &lt;span class="c"&gt;# use token authentication instead of password&lt;/span&gt;
    git remote add authenticated https://atodorov:&lt;span class="nv"&gt;$GITHUB_TOKEN&lt;/span&gt;@github.com/atodorov/bdcs-api-rs.git

    &lt;span class="c"&gt;# commit the changes to Cargo.lock&lt;/span&gt;
    git commit -a -m &lt;span class="s2"&gt;&amp;quot;Auto-update cargo crates&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# push the changes so that PR API has something to compare against&lt;/span&gt;
    git push authenticated &lt;span class="nv"&gt;$BRANCH_NAME&lt;/span&gt;

    &lt;span class="c"&gt;# finally create the PR&lt;/span&gt;
    curl -X POST -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;Authorization: token &lt;/span&gt;&lt;span class="nv"&gt;$GITHUB_TOKEN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
         --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;title&amp;quot;:&amp;quot;Auto-update cargo crates&amp;quot;,&amp;quot;head&amp;quot;:&amp;quot;automated_cargo_update&amp;quot;,&amp;quot;base&amp;quot;:&amp;quot;master&amp;quot;, &amp;quot;body&amp;quot;:&amp;quot;@atodorov review&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
         https://api.github.com/repos/atodorov/bdcs-api-rs/pulls
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to define a secret &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; variable for authentication;&lt;/li&gt;
&lt;li&gt;The script doesn't force push, but in practice that may be useful (e.g. updating the PR);&lt;/li&gt;
&lt;li&gt;The script doesn't have any error handling;&lt;/li&gt;
&lt;li&gt;If PR is still open GitHub will tell us about it but we ignore the result here;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DON'T&lt;/strong&gt; paste this into your &lt;code&gt;Makefile&lt;/code&gt; because the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; variable will be
  expanded into the logs and your secrets go away! Always call the script from your
  &lt;code&gt;Makefile&lt;/code&gt; to avoid revealing secrets.&lt;/li&gt;
&lt;li&gt;I am using topic branches because this is a POC. Switch to &lt;em&gt;master&lt;/em&gt; and maybe move
  all URLs as variables at the top of the script!&lt;/li&gt;
&lt;li&gt;I run this cron build against a fork of the project because the team doesn't feel
  comfortable having automated commits/pushes. I also create the pull requests against
  my own fork. You will have to adjust the targets if you want your PR to go to the
  original repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the PR which was created by this script:
&lt;a href="https://github.com/atodorov/bdcs-api-rs/pull/5"&gt;https://github.com/atodorov/bdcs-api-rs/pull/5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice that it includes previous commits b/c they have not been merged to the master branch!&lt;/p&gt;
&lt;p&gt;Here's the test job (#77) which generated this PR:
&lt;a href="https://travis-ci.org/atodorov/bdcs-api-rs/builds/219274916"&gt;https://travis-ci.org/atodorov/bdcs-api-rs/builds/219274916&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's a test job (#87) which bails out miserably because the PR already exists:
&lt;a href="https://travis-ci.org/atodorov/bdcs-api-rs/builds/220954269"&gt;https://travis-ci.org/atodorov/bdcs-api-rs/builds/220954269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is part of my &lt;em&gt;Quality Assurance According to Einstein&lt;/em&gt; series - a detailed description
of useful techniques I will be presenting very soon.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Testing Red Hat Enterprise Linux the Microsoft way</title><link href="http://atodorov.org/blog/2017/04/14/testing-red-hat-enterprise-linux-the-microsoft-way/" rel="alternate"></link><updated>2017-04-14T09:18:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-14:blog/2017/04/14/testing-red-hat-enterprise-linux-the-microsoft-way/</id><summary type="html">&lt;p&gt;&lt;img alt="Microsoft and Red Hat logos" src="/images/microsoft-redhat-puzzle.jpg" title="Microsoft and Red Hat logos" /&gt;&lt;/p&gt;
&lt;p&gt;Pairwise (a.k.a. all-pairs) testing is an effective test case generation
technique that is based on the observation that most faults are caused by
interactions of at most two factors! Pairwise-generated test suites cover
all combinations of two therefore are much smaller than exhaustive ones yet
still very effective in finding defects. This technique has been pioneered by
Microsoft in testing their products. For an example please see
&lt;a href="https://github.com//microsoft/pict"&gt;their GitHub repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I heard about pairwise testing by
&lt;a href="https://www.linkedin.com/in/niels-sander-christensen-a2639b1/"&gt;Niels Sander Christensen&lt;/a&gt;
last year at
&lt;a href="http://qachallengeaccepted.com/2016.html#agenda2016"&gt;QA Challenge Accepted 2.0&lt;/a&gt; and
I immediately knew where it would fit into my test matrix.&lt;/p&gt;
&lt;p&gt;This article describes an experiment made during Red Hat Enterprise Linux 6.9
installation testing campaign. The experiment covers generating a
test plan (referred to Pairwise Test Plan) based on the pairwise test strategy and
some heuristics. The goal was to reduce the number of test cases which needed to be
executed and still maintain good test coverage (in terms of breadth of testing) and
also maintain low risk for the product.&lt;/p&gt;
&lt;h1&gt;Product background&lt;/h1&gt;
&lt;p&gt;For RHEL 6.9 there are 9 different product variants each comprising of particular
package set and CPU architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server i386&lt;/li&gt;
&lt;li&gt;Server x86_64&lt;/li&gt;
&lt;li&gt;Server ppc64 (IBM Power)&lt;/li&gt;
&lt;li&gt;Server s390x (IBM mainframe)&lt;/li&gt;
&lt;li&gt;Workstation i386&lt;/li&gt;
&lt;li&gt;Workstation x86_64&lt;/li&gt;
&lt;li&gt;Client i386&lt;/li&gt;
&lt;li&gt;Client x86_64&lt;/li&gt;
&lt;li&gt;ComputeNode x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Traditional testing activities are classified as Tier #1, Tier #2 and Tier #3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tier #1 - basic form of installation testing. Executed for all arch/variants on all builds,
  including nightly builds. This group includes the most common installation methods and configurations.
  If Tier #1 fails the product is considered unfit for customers and further testing blocking the release!&lt;/li&gt;
&lt;li&gt;Tier #2 and #3 - includes additional installation configurations and/or functionality which is deemed important.
  These are still fairly common scenarios but not the most frequently used ones.
  If some of the Tier#2 and #3 test cases fail they will not block the release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This experiment focuses only on Tier #2 and #3 test cases because they generate the
largest test matrix! This experiment is related only to installation testing of RHEL.
This broadly means &lt;em&gt;"Can the customer install RHEL via the Anaconda installer and boot
into the installed system"&lt;/em&gt;.
I do not test functionality of the system after reboot!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I have theorized that from the point of view of installation testing RHEL is mostly a
platform independent product!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Individual product variants rarely exhibit differences in their functional behavior
because they are compiled from the same code base! If a feature is present it should work
the same on all variants. The main differences between variants are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What software has been packaged as part of the variant (e.g. base package set and add-on repos);&lt;/li&gt;
&lt;li&gt;Whether or not a particular feature is officially supported, e.g. iBFT on Client variants.
  Support is usually provided via including the respective packages in the variant package set
  and declaring SLA for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These differences may lead to problems with resolving dependencies and missing packages
but historically haven't shown significant tendency to cause functional failures
e.g. using NFS as installation source working on Server but not on Client.&lt;/p&gt;
&lt;p&gt;The main component being tested, Anaconda - the installer, is also mostly platform independent.
In a previous experiment I had collected code coverage data from Anaconda while
performing installation with the same kickstart (or same manual options) on various architectures.
The coverage report supports the claim that Anaconda is platform independent!
See
&lt;a href="http://atodorov.org/blog/2015/10/27/anaconda-coverage.py-coverage-diff/"&gt;Anaconda &amp;amp; coverage.py - Pt.3 - coverage-diff, section Kickstart vs. Kickstart&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;Testing approach&lt;/h1&gt;
&lt;p&gt;The traditional pairwise approach focuses on features whose functionality is
controlled via parameters. For example: RAID level, encryption cipher, etc.
&lt;strong&gt;I have taken this definition one level up and applied it to the entire product!
Now functionality is also controlled by variant and CPU architecture!&lt;/strong&gt;
This allows me to reduce the number of total test cases in the test matrix but still
execute all of them at least once!&lt;/p&gt;
&lt;p&gt;The initial implementation used a simple script, built with
&lt;a href="https://github.com/josephwilk/pairwise"&gt;the Ruby pairwise gem&lt;/a&gt;, that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copies verbatim all test cases which are applicable for a single product variant,
    for example s390x Server or ppc64 Server! There's nothing we can do to reduce these
    from combinatorial point of view!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we have the group of test cases with input parameters. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;storage / iBFT / No authentication / Network init script
storage / iBFT / CHAP authentication / Network Manager
storage / iBFT / Reverse CHAP authentication / Network Manager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example the test is &lt;code&gt;storage / iBFT&lt;/code&gt; and the parameters are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication type&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;CHAP&lt;/li&gt;
&lt;li&gt;Reverse CHAP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network management type&lt;ul&gt;
&lt;li&gt;SysV init&lt;/li&gt;
&lt;li&gt;NetworkManager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For test cases in this group I also consider the CPU architecture and OS variant
as part of the input parameters and combine them using pairwise. Usually this results
in around 50% reduction of test efforts compared to testing against all product variants!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last we have the group of test cases which don't depend on any input parameters,
    for example &lt;code&gt;partitioning / swap on LVM&lt;/code&gt;. They are grouped together (wrt their applicable variants)
    and each test case is executed only once against a randomly chosen product variant!
    This is my own heuristic based on the fact that the product is platform
    independent!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may think that for these test cases the product variant is their input parameter.
If we consider this to be the case then we'll not get any reduction because of
how pairwise generation works (the 2 parameters with the largest number of possible values determine
the maximum size of the test matrix). In this case the 9 product variants is the largest set of values!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this experiment
&lt;a href="https://gist.github.com/atodorov/8f44022e209f749c7121f91281aa641e"&gt;pairwise_spec.rb&lt;/a&gt;
only produced the list of test scenarios (test cases) to be executed! It doesn't
schedule test execution and it doesn't update the
&lt;a href="http://atodorov.org/blog/2017/04/04/article-about-nitrate-in-methods-tools/"&gt;test case management system&lt;/a&gt;
with actual results. It just tells you what to do! Obviously this script
will need to integrate with other systems and processes as defined by the organization!&lt;/p&gt;
&lt;p&gt;Example results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RHEL 6.9 Tier #2 and #3 testing
  Test case w/o parameters can&amp;#39;t be reduced via pairwise
    x86_64 Server - partitioning / swap on LVM
    x86_64 Workstation - partitioning / swap on LVM
    x86_64 Client - partitioning / swap on LVM
    x86_64 ComputeNode - partitioning / swap on LVM
    i386 Server - partitioning / swap on LVM
    i386 Workstation - partitioning / swap on LVM
    i386 Client - partitioning / swap on LVM
    ppc64 Server - partitioning / swap on LVM
    s390x Server - partitioning / swap on LVM
  Test case(s) with parameters can be reduced by pairwise
    x86_64 Server - rescue mode / LVM / plain
    x86_64 ComputeNode - rescue mode / RAID / encrypted
    x86_64 Client - rescue mode / RAID / plain
    x86_64 Workstation - rescue mode / LVM / encrypted
    x86_64 Server - rescue mode / RAID / encrypted
    x86_64 Workstation - rescue mode / RAID / plain
    x86_64 Client - rescue mode / LVM / encrypted
    x86_64 ComputeNode - rescue mode / LVM / plain
    i386 Server - rescue mode / LVM / plain
    i386 Client - rescue mode / RAID / encrypted
    i386 Workstation - rescue mode / RAID / plain
    i386 Workstation - rescue mode / LVM / encrypted
    i386 Server - rescue mode / RAID / encrypted
    i386 Workstation - rescue mode / RAID / encrypted
    i386 Client - rescue mode / LVM / plain
    ppc64 Server - rescue mode / LVM / plain
    s390x Server - rescue mode / RAID / encrypted
    s390x Server - rescue mode / RAID / plain
    s390x Server - rescue mode / LVM / encrypted
    ppc64 Server - rescue mode / RAID / encrypted

Finished in 0.00602 seconds (files took 0.10734 seconds to load)
29 examples, 0 failures
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example there are 9 (variants) * 2 (partitioning type) * 2 (encryption type) == 32
total combinations! As you can see pairwise reduced them to 20! Also notice that
if you don't take CPU arch and variant into account you are left with
2 (partitioning type) * 2 (encryption type) == 4 combinations for each product variant
and they can't be reduced on their own!&lt;/p&gt;
&lt;h1&gt;Acceptance criteria&lt;/h1&gt;
&lt;p&gt;I did evaluate all bugs which were found by executing the test cases from the
pairwise test plan and compared them to the list of all bugs found by the team.
This will tell me how good my pairwise test plan was compared to the regular one.
"good" meaning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many bugs would I find if I don't execute the full test matrix&lt;/li&gt;
&lt;li&gt;How many critical bugs would I miss if I don't execute the full test matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pairwise found &lt;strong&gt;14 new bugs&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;23 bugs were first found by regular test plan&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;some by test cases not included in this experiment;&lt;/li&gt;
&lt;li&gt;pairwise totally &lt;strong&gt;missed 4 bugs&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pairwise test plan &lt;strong&gt;missed 3 critical regressions&lt;/strong&gt; due to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poor planning of pairwise test activity. There was a regression in
  one of the latest builds and that particular test was simply not executed!&lt;/li&gt;
&lt;li&gt;Human factor aka me not being careful enough and not following the process diligently.
  I waived a test due to infrastructure issues while there was a bug which stayed undiscovered!
  I should have tried harder to retest this scenario after fixing my infrastructure!&lt;/li&gt;
&lt;li&gt;Architecture and networking specific regression which wasn't tested on multiple levels and
  is very narrow corner case.
  Can be mitigated with more testing upstream, more automation and better understanding of the hidden test
  requirements (e.g. IPv4 vs IPv6) for all of which pairwise can help (analysis and more available resources).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the missed regressions could have been missed by regular test plan as well, however the risk of missing
them in pairwise is higher b/c of the reduced test matrix and the fact that
you may not execute exactly the same test scenario for quite a long time.
OTOH the risk can be mitigated with more automation b/c we now have more free resources.&lt;/p&gt;
&lt;p&gt;IMO pairwise test plan did a good job and didn't introduce "dramatic" changes in risk level for the product!&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;65 % reduction in test matrix;&lt;/li&gt;
&lt;li&gt;Only 1/3rd of team engineers needed;&lt;ul&gt;
&lt;li&gt;keep arch experts around though;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2/3rd of team engineers could be free for automation and to create even more test cases;&lt;/li&gt;
&lt;li&gt;Test run execution completion rate is comparable to regular test plan&lt;ul&gt;
&lt;li&gt;average execution completion for pairwise test plan was 76%!&lt;/li&gt;
&lt;li&gt;average execution completion for regular test plan was 85%!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New bugs found:&lt;ul&gt;
&lt;li&gt;30% by Pairwise Test Plan&lt;/li&gt;
&lt;li&gt;30% by Tier #1 test cases (good job here)&lt;/li&gt;
&lt;li&gt;30% by exploratory testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Risk of missing regressions or critical bugs exists (I did miss 3) but can be mitigated;&lt;/li&gt;
&lt;li&gt;Clearly exposes the need of constant review, analysis and improvement of existing test cases;&lt;/li&gt;
&lt;li&gt;Exposes hidden parameters in test scenarios and some hidden relationships;&lt;/li&gt;
&lt;li&gt;Patterns and other optimization techniques observed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Patterns observed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many new test case combinations found, which I had to describe into
  &lt;a href="http://atodorov.org/blog/2017/04/04/article-about-nitrate-in-methods-tools/"&gt;Nitrate&lt;/a&gt;; The longer you use
  pairwise the less new combinations are discovered (aka undocumented scenarios).
  The first 3 initial test runs discovered the most of the missing combinations!&lt;/li&gt;
&lt;li&gt;Found quite a few test cases with hidden parameters, for example &lt;code&gt;swap / recommended&lt;/code&gt;
  which calculates the recommended size of swap partition based on 4 different
  ranges in which the actual RAM size fits! These ranges became parameters
  to the test case;&lt;/li&gt;
&lt;li&gt;Can combine (2, 3, etc) independent test cases together and consider them as parameters
  so we can apply pairwise against the combination. This will create new scenarios, broaden
  the test matrix but not result in significant increase in execution time. I didn't try this
  because it was not the focus of the experiment;&lt;/li&gt;
&lt;li&gt;Found some redundant/duplicate test cases - test plans need to be constantly analyzed and
  maintained you know;&lt;/li&gt;
&lt;li&gt;Automated scheduling and tools integration is critical. This needs to be working perfectly
  in order to capitalize on the newly freed resources;&lt;/li&gt;
&lt;li&gt;Testing on s390x was sub-optimal (mostly my own inexperience with the platform) so for
  specialized environments we still want to keep the experts around;&lt;/li&gt;
&lt;li&gt;1 engineer (me) was able to largely keep up with schedule with the rest of the team!&lt;ul&gt;
&lt;li&gt;experiment was conducted during the course of several months&lt;/li&gt;
&lt;li&gt;I have tried to adhere to all milestones and deadlines and mostly succeeded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have also discovered ideas for new test execution optimization techniques
which need to be evaluated and measured further:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a common set-up step for multiple test cases across variants, e.g.&lt;ul&gt;
&lt;li&gt;install a RAID system then;&lt;/li&gt;
&lt;li&gt;perform 3 rescue mode tests (same test case, different variants)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pipeline test cases so that the result of one case is the setup for the next, e.g.&lt;ul&gt;
&lt;li&gt;install a RAID system and test for correctness of the installation;&lt;/li&gt;
&lt;li&gt;perform rescue mode test;&lt;/li&gt;
&lt;li&gt;damage one of the RAID partitions while still in rescue mode;&lt;/li&gt;
&lt;li&gt;test installation with damaged disks - it should not crash!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These techniques can be used stand-alone or in combination with
other optimization techniques and tooling available to the team. They are
specific to my particular kind of testing so beware of your surroundings
before you try them out!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cover image copyright: cio-today.com&lt;/em&gt;&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Mutation Testing vs. Coverage, Pt. 2</title><link href="http://atodorov.org/blog/2017/04/05/mutation-testing-vs-coverage-pt-2/" rel="alternate"></link><updated>2017-04-05T09:18:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-05:blog/2017/04/05/mutation-testing-vs-coverage-pt-2/</id><summary type="html">&lt;p&gt;In a &lt;a href="http://atodorov.org/blog/2016/12/27/mutation-testing-vs-coverage/"&gt;previous post&lt;/a&gt; I
have shown an example of real world bugs which we were not able to detect
despite having 100% mutation and test coverage. I am going to show you another
example here.&lt;/p&gt;
&lt;p&gt;This example comes from one of my training courses. The task is to write a
class which represents a bank account with methods to deposit, withdraw and
transfer money. The solution looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;bank.py&lt;/span&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Deposit amount must be positive!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Withdraw amount must be positive!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Withdraw for &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; failed&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transfer_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;other_account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that if withdrawal is not possible then the function returns &lt;code&gt;False&lt;/code&gt;. The tests
look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;test.py&lt;/span&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;solution&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestBankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rado&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_deposit_positive_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_deposit_negative_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_deposit_zero_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_withdraw_positive_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_withdraw_maximum_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_withdraw_from_empty_account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertIsNotNone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Withdraw for 50 failed&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_history&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_withdraw_non_positive_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_transfer_negative_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;account_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;For testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;account_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;In dollars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transfer_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_transfer_positive_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;account_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;For testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;account_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;In dollars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transfer_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try the following commands to verify that you have 100% coverage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage run test.py
coverage report

cosmic-ray run --test-runner nose --baseline 10 example.json bank.py -- test.py`
cosmic-ray report example.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can you tell where the bug is ? How about I try to transfer more money than is
available from one account to the other&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_transfer_more_than_available_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;account_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;For testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;account_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BankAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;In dollars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# transfer more than available&lt;/span&gt;
    &lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transfer_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you execute the above test it will fail&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;FAIL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test_transfer_more_than_available_balance&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TestBankAccount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./test.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_transfer_more_than_available_balance&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEqual&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_balance&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AssertionError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that when &lt;code&gt;self.withdraw(how_much)&lt;/code&gt; fails &lt;code&gt;transfer_to()&lt;/code&gt; ignores
the result and tries to deposit the money into the other account! A better
implementation would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transfer_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;other_account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;how_much&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Transfer failed!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my earlier article the bugs were caused by external environment
and tools/metrics like code coverage and mutation score are not affected by it.
In fact the jinja-ab example falls into the category of data coverage testing.&lt;/p&gt;
&lt;p&gt;The current example on the other hand is ignoring the return value of the &lt;code&gt;withdraw()&lt;/code&gt;
function and that's why it fails when we add the appropriate test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; some mutation test tools support the &lt;em&gt;removing/modifying return value&lt;/em&gt;
mutation. Cosmic Ray doesn't support this at the moment (I should add it). Even if it did
that would not help us find the bug because we would kill the mutation using
the &lt;code&gt;test_withdraw...()&lt;/code&gt; test methods, which already assert on the return value!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Article about Nitrate in Methods &amp; Tools</title><link href="http://atodorov.org/blog/2017/04/04/article-about-nitrate-in-methods-tools/" rel="alternate"></link><updated>2017-04-04T14:08:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-04:blog/2017/04/04/article-about-nitrate-in-methods-tools/</id><summary type="html">&lt;p&gt;&lt;img alt="Nitrate" src="/images/nitrate3.png" title="Nitrate" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/MrSenko/Nitrate"&gt;Nitrate&lt;/a&gt; is an open source test plan,
test run and test case management system I have been working on for a while now.
I have been maintaining a custom fork over at &lt;a href="http://MrSenko.com"&gt;Mr. Senko&lt;/a&gt;
which includes various bug fixes and enhancements which are not yet upstream.&lt;/p&gt;
&lt;p&gt;Recently the Methods &amp;amp; Tools QA portal published an article about Nitrate.
You can find it &lt;a href="http://www.methodsandtools.com/tools/nitrate.php"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>Building cardboard robots</title><link href="http://atodorov.org/blog/2017/04/01/building-cardboard-robots/" rel="alternate"></link><updated>2017-04-01T01:08:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-04-01:blog/2017/04/01/building-cardboard-robots/</id><summary type="html">&lt;p&gt;&lt;img alt="Adi with robots" src="/images/adi_robots.jpg" title="Adi and her robots" /&gt;&lt;/p&gt;
&lt;p&gt;My &lt;a href="http://atodorov.org/blog/2017/01/13/a-5-year-old-girl-vs-coderdojo/"&gt;previous blog post&lt;/a&gt; was about
the &lt;em&gt;Hello Ruby&lt;/em&gt; book, &lt;em&gt;Coder Dojo&lt;/em&gt; and making computers out of paper - all cool
things for a 5 year old girl. This week I have discovered the
&lt;a href="http://amzn.to/2oqEhCD"&gt;Build the Robot&lt;/a&gt; book
(&lt;a href="https://www.fiut.bg/roboti-procheti-i-sglobi.html"&gt;link to BG edition&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;The book includes colorful pictures and some interesting facts about robots.
On the second page it talks about
&lt;a href="https://en.wikipedia.org/wiki/Six_degrees_of_freedom"&gt;degrees of freedom&lt;/a&gt;,
which I've studied at technical university during my Mechanics course.
How's that for a children's book ?&lt;/p&gt;
&lt;p&gt;The most important part of the book are cardboard models of 3 robots:
walking one (orange), dancing one (light blue) and one waving its hands (black).
The pieces are put together by friction and
all of the 3 robots use spring loaded motors for some basic movements.&lt;/p&gt;
&lt;p&gt;We did have to use some glue because one of the legs kept falling apart but
overall the print/cut quality of the Bulgarian edition was very good.&lt;/p&gt;
&lt;p&gt;From the 3 robots the walking one is the worst. I think it is too heavy for the
motor to move around. The dancing robot works most of the time. The robot which
waves his hands up and down works best!&lt;/p&gt;
&lt;p&gt;Overall a very good book, fun to build and play with and very informative!
I strongly recommend it if you have small children and want them to feel
comfortable around technology!&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</summary><category term="fedora.planet"></category></entry><entry><title>A 5 year old girl vs. CoderDojo</title><link href="http://atodorov.org/blog/2017/01/13/a-5-year-old-girl-vs-coderdojo/" rel="alternate"></link><updated>2017-01-13T09:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-01-13:blog/2017/01/13/a-5-year-old-girl-vs-coderdojo/</id><summary type="html">&lt;p&gt;&lt;img alt="Adi @ Hello Ruby" src="/images/adi_hello_ruby_twitter.jpg" title="Adi @ Hello Ruby" /&gt;&lt;/p&gt;
&lt;p&gt;In early December'16 together with my 5 year old daughter we visited an introductory workshop
about the &lt;a href="http://amzn.to/2ijQlBD"&gt;Hello Ruby&lt;/a&gt; book and another
workshop organized by &lt;a href="http://coderdojobulgaria.com/"&gt;Coder Dojo Bulgaria&lt;/a&gt;.
Later that month we also visited a &lt;a href="http://www.roboleague.bg/"&gt;Robo League&lt;/a&gt;
competition in Sofia.
The goal was to further Adriana's interest into technical topics and programming in
particular and see how she will respond to the topics covered and the
workshops and training materials format in general. I have been keeping
detailed notes and today I'm publishing some of my observations.&lt;/p&gt;
&lt;p&gt;The events that we visited were strictly for small children and there were mentors
who worked with the kids. Each mentor, depending on the event works with up to 4 or 5
children. Parents were not allowed to interfere and I have been keeping
my distance on purpose, trying to observe and document as much as possible.&lt;/p&gt;
&lt;h2&gt;Hello Ruby&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2ijQlBD"&gt;Hello Ruby&lt;/a&gt; is a small book with colorful illustrations
about a girl who embarks on adventures in programming. Adriana considers it a fairy tale
although the book introduces lots of IT related terms - Ruby and gems, Firefox,
Snow Leopard, Django, etc. For a child these don't necessarily mean anything
but she was able to recognize my Red Hat fedora which was depicted on one of the pages.&lt;/p&gt;
&lt;p&gt;The workshop itself was the introduction of the Bulgarian translation, which I've purchased,
and had the kids build a laptop using glue and paper icons. Mentors were explaining
to the children what the various icons mean, that viruses are a bad thing for your computer,
what a CPU and computer memory are
and everything else in between. A month later when Adriana started building a new
paper computer on her own (without being provoked by me) she told me that the
colored icons were "information" that goes into the computer!&lt;/p&gt;
&lt;p&gt;After the story part of the book there are exercises designed to create analytical
thinking. We did only a few in the beginning where she had to create a list of
action sequence how to make the bed or get dressed up in the morning, etc. At the time
Adriana didn't receive the game very well and was having some troubles figuring out
the smaller actions that comprise a larger activity. We didn't follow through with
the game.&lt;/p&gt;
&lt;h2&gt;Code.org&lt;/h2&gt;
&lt;p&gt;At the second event she was exposed to &lt;a href="https://studio.code.org/"&gt;studio.code.org&lt;/a&gt;!
At the time we were required to bring a working laptop and a mouse. I had no idea
how these were going to be used. It turned out mentors gave each child a training
course from code.org according to their age. Adriana started with the Course #1
because she can't read on her own!&lt;/p&gt;
&lt;p&gt;At first it seemed to me that Adi was a bit bored and didn't know what to do,
staring cluelessly at the screen. Btw this was her first session working with
a computer on her own. After a while the mentor came and I guess explained what
needs to be done, how the controls work and what the objective of the exercise was.
After that I noticed she's working more independently and grew interested in the
subject. She had a problem working with the mouse and after 2 days I've nudged
her to use the TrackPoint and mouse buttons on a ThinkPad laptop. She uses them
with both hands, so am I btw, and is much more adept at controlling the cursor
that way. If you are going to teach children how to work effectively with a computer
you may as well start with teaching them to work effectively with a track pad!&lt;/p&gt;
&lt;p&gt;The courses are comprised of games and puzzles (which she's very good at)
asking children to perform a very basic programming concept. For example instruct
an angry bird to move left or right by using blocks for each instruction.
By the time the workshop was over Adriana had completed 4 levels on her own.&lt;/p&gt;
&lt;p&gt;Level 5 introduced a button for step-by-step execution of the program also
colloquially known as debugging :). The first few exercises she had no idea
what to do with this debugging button. Then the 6th exercise introduced a
wrong starting sequence and everything snapped into place.&lt;/p&gt;
&lt;p&gt;Level 7 introduced additional instructions. There are move left/right instructions
as well as visit a flower and make honey instruction. This level also introduces
repeating instructions, for example make honey 2 times. At first that was confusing
but then she started to take a notice at the numbers shown on screen and started to
figure out how to build the proper sequence of blocks to complete the game.
When she made mistakes she used the debugging button to figure out which block
was not in place and remove it.&lt;/p&gt;
&lt;p&gt;After this level Adi started making more mistakes, but more importantly she also
started trying to figure them out on her own. My help was limited to asking
questions like "what do you need to do", "where are you at the screen now",
"what instructions do you need to execute to get where you want to be".&lt;/p&gt;
&lt;p&gt;Level 8 introduces a new type of game, drawing shapes on the screen. The hardest
part here is that you need to jump from one node to another sometimes. This
is great for improving the child spatial orientation skills.&lt;/p&gt;
&lt;p&gt;Level 11 is a reading game in English. You need to instruct a bee to fly across
different letters to complete a word shown on the screen. However Adriana can't
read much less in English, although she understands and speaks English
well for her age. In this case I believe she relied on pattern recognition
to complete all exercises in this level. She would look at the target word
and then identify the letters on the playing board. Next she would stack instruction
blocks to program the movements of the bee towards her goal as in previous exercises.&lt;/p&gt;
&lt;p&gt;Level 13 introduces loops. It took Adriana 7 exercises to figure out what a loop
is, identify the various elements of it and how to construct it properly.
She also said that was amusing to her. Almost immediately she was able to identify
the length of the loop by herself and construct loops with only 1 block inside
their body. Loops with 2 or more blocks inside their body were a bit harder.&lt;/p&gt;
&lt;p&gt;Level 14 introduced nested loops, usually one or more instruction blocks paired
with a loop block, nested inside another loop block. For example:
&lt;code&gt;repeat 3 times(move left, repeat 2 times(move down))&lt;/code&gt;. Again it took her about 6
exercises to figure them out. This is roughly at the middle of the level.&lt;/p&gt;
&lt;p&gt;Level 16 was quite hard. It had blocks with parameters where you have to type
in some words and animal characters will "speak these words" as if in a comic book.
I'm not sure if there was supposed to be a text to speech engine integrated for
this level but sounds like a good idea. Anyhow this level was not on-par with
her skills.&lt;/p&gt;
&lt;p&gt;The course completed with free range drawing using instruction blocks and cycles.
The image she drew was actually her name where she had to guess how much scribbles
the painter needs to do in one direction, then traverse back and go into another direction.
She also had to figure out how big each letter needs to be so that it is possible to
actually draw it given the game limitations in motion and directions. This final level
required lot of my help.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I have never had any doubts that small children are very clever and
capable of understanding enormous amounts of information and new concepts.
However I'm amazed by how deep their understanding goes and how fast they
are able to apply the new things they learn.&lt;/p&gt;
&lt;p&gt;Through games and practical workshops I believe it is very easy to teach
children to gain valuable skills for engineering professions. Even if they
don't end up in engineering the ability to clearly define goals and instructions,
break down complex tasks into small chunks and clearly communicate intentions
is a great advantage. So is the ability to analyze the task on your own and
use simple building blocks to achieve larger objectives.&lt;/p&gt;
&lt;p&gt;I will continue to keep notes on Adi's progress but will very likely write
about it less frequently. If you do have small children around you please
introduce them to &lt;a href="http://amzn.to/2ijQlBD"&gt;Hello Ruby&lt;/a&gt; and
&lt;a href="https://studio.code.org/"&gt;studio.code.org&lt;/a&gt; and help them learn!&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;</summary><category term="events"></category><category term="fedora.planet"></category></entry><entry><title>Circo loco 2017</title><link href="http://atodorov.org/blog/2017/01/03/circo-loco-2017/" rel="alternate"></link><updated>2017-01-03T09:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2017-01-03:blog/2017/01/03/circo-loco-2017/</id><summary type="html">&lt;p&gt;&lt;img alt="HackConf 2016" src="/images/hack_conf.jpg" title="HackConf 2016" /&gt;&lt;/p&gt;
&lt;p&gt;Due to popular demand I'm sharing my plans for the upcoming conference season.
Here is a list of events I plan to visit and speak at (hopefully). The list
will be updated throughout the year so please subscribe to the comments section
to receive a notification when that happens! I'm open to meeting new people so
ping me for a beer if you are attending some of these events!&lt;/p&gt;
&lt;h2&gt;02 February - Hack Belgium Pre-Event Workshops, Brussels&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note: added on Jan 12th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last year I had an amazing time visiting an
&lt;a href="http://atodorov.org/blog/2016/02/02/fosdem-2016-report/"&gt;Elixir &amp;amp; Erlang workshop&lt;/a&gt; so
I'm about to repeat the experience. I will be visiting a
&lt;a href="http://www.hackathon.com/event/hack-belgium-pre-event-workshops-29372270251"&gt;workshop&lt;/a&gt;
organized by HackBelgium and keep you posted with the results.&lt;/p&gt;
&lt;h2&gt;03 February - Git Merge, Brussels&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note: added on Jan 12th&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-merge.com/"&gt;Git Merge&lt;/a&gt; is organized by GitHub and will be held in Brussels
this year. I will be visiting only the conference track and hopefully giving a lightning talk
titled &lt;em&gt;Automatic upstream dependency testing with GitHub API&lt;/em&gt;! That and the afterparty
of course!&lt;/p&gt;
&lt;h2&gt;04-05 February - FOSDEM, Brussels&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://fosdem.org/2017/"&gt;FOSDEM&lt;/a&gt; is the largest free and open source gathering
in Europe which I have been visiting since 2009 (IIRC). You can checkout some
of my reports about
&lt;a href="http://atodorov.org/blog/2014/02/03/fosdem-2014-report-day-1-python-stands-lightning-talks/"&gt;FOSDEM 2014, Day 1&lt;/a&gt;,
&lt;a href="http://atodorov.org/blog/2014/02/03/fosdem-2014-report-day-2-testing-and-automation/"&gt;FOSDEM 2014, Day 2&lt;/a&gt; and
&lt;a href="http://atodorov.org/blog/2016/02/02/fosdem-2016-report/"&gt;FOSDEM 2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will present my
&lt;a href="https://fosdem.org/2017/schedule/event/mutant_testing/"&gt;Mutants, tests and zombies&lt;/a&gt;
talk at the &lt;em&gt;Testing &amp;amp; Automation devroom&lt;/em&gt; on Sunday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Video recording is available
&lt;a href="https://www.youtube.com/watch?v=ZyKvwODy9jw&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will be in Brussels between February 1st and 5th to explore the local
start-up scene and get to meet with the Python community so ping me if you are around.&lt;/p&gt;
&lt;h2&gt;18 March - QA Challenge Accepted 3.0, Sofia&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://qachallengeaccepted.com/"&gt;QA: Challenge Accepted&lt;/a&gt; is a specialized QA conference
in Sofia and most of the sessions are in Bulgarian. I've visited last year and it was great.
I even proposed a &lt;a href="http://atodorov.org/blog/2016/03/25/hello-world-qa-challenge/"&gt;challenge of my own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CFP is still open but I have a strong confidence that my talk
&lt;em&gt;Testing Red Hat Enterprise Linux the MicroSoft way&lt;/em&gt; will be approved. It will describe
a large scale experiment with pairwise testing, which btw I learned about at
QA: Challenge Accepted 2.0 :).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I will be also on the jury for &lt;em&gt;QA of the year&lt;/em&gt; award.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I did a lightning talk about my
&lt;a href="https://www.youtube.com/watch?v=14e1z-pYwMc"&gt;test case management system&lt;/a&gt; (in Bulgarian).&lt;/p&gt;
&lt;h2&gt;07-08 April - Bulgaria Web Summit, Sofia&lt;/h2&gt;
&lt;p&gt;I have been a moderator at
&lt;a href="https://bulgariawebsummit.com/"&gt;Bulgaria Web Summit&lt;/a&gt; for several years and this year
is no exception. This is one of the strongest events held in Sofia and is in English.
Last year over 60% of the attendees were from abroad so you are welcome!&lt;/p&gt;
&lt;p&gt;I'm not going to speak at this event but will record as much of it
as possible. &lt;strong&gt;UPDATE:&lt;/strong&gt; Checkout the recordings on my
&lt;a href="https://www.youtube.com/watch?v=NW8wjpK-hRg&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=11"&gt;YouTube&lt;/a&gt;
channel!&lt;/p&gt;
&lt;h2&gt;10-12 May - Romanian Testing Conference, Cluj-Napoca&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://romaniatesting.ro/"&gt;RTC'17&lt;/a&gt; is a new event I found in neighboring Romania.
The topic this year is &lt;em&gt;Thriving and remaining relevant in Quality Assurance&lt;/em&gt;. My talk is titled
&lt;em&gt;Quality Assistance in the Brave New World&lt;/em&gt; where I'll share some experiences
and visions for the QA profession if that gets accepted.&lt;/p&gt;
&lt;p&gt;As it turned out I know a few people living in Cluj so I'll be arriving one day earlier
on May 9th to meet the locals.&lt;/p&gt;
&lt;h2&gt;13-14 May - OSCAL, Tirana&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://oscal.openlabs.cc/"&gt;Open Source Conference Albania&lt;/a&gt; is the largest OSS event in
the country. I'm on a row here to explore the IT scene on the Balkans. Due to traveling
constraints my availability will be limited to the conference venue only but I've booked
a hotel across the street :).&lt;/p&gt;
&lt;p&gt;I will be meeting a few friends in Tirana and hear about the progress of an
&lt;a href="http://atodorov.org/blog/2016/11/21/women-in-open-source/"&gt;psychological experiment&lt;/a&gt; we devised
with Jona Azizaj and Suela Palushi.&lt;/p&gt;
&lt;p&gt;Talking wise I'm hoping to get the chance of introducing mutation testing and
even host a workshop on the topic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Here is the video recording from
&lt;a href="https://www.youtube.com/watch?v=mG1eAhMWZJ8"&gt;OSCAL&lt;/a&gt;. The quality is very poor though.&lt;/p&gt;
&lt;h2&gt;20-21 May - DEVit, Thessaloniki&lt;/h2&gt;
&lt;p&gt;This is the 3rd edition of &lt;a href="http://devitconf.org/"&gt;DEVit&lt;/a&gt;,
the 360° web development conference of Northern Greece. I've been a regular
visitor since the beginning and this year I've proposed a session on mutation
testing. Because the Thessaloniki community seems more interested in Ruby and Rails
my goal is to share more examples from my Ruby work and compare how that is different
from the Python world. There is once again an opportunity for a workshop.&lt;/p&gt;
&lt;p&gt;So far I've been the only Bulgarian to visit DEVit and also locally known as
"The guy who Kosta &amp;amp; Kosta met in Sofia"! Checkout my impressions from
&lt;a href="http://atodorov.org/blog/2015/05/22/devit-conf-2015-impressions/"&gt;DEVit'15&lt;/a&gt; and
&lt;a href="http://atodorov.org/blog/2016/05/25/devit-conf-2016/"&gt;DEVit'16&lt;/a&gt;
if you are still wondering whether to attend or not! I strongly recommend it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I am still the only Bulgarian visiting DEVit!&lt;/p&gt;
&lt;h2&gt;22 May - Dev.bg, Sofia&lt;/h2&gt;
&lt;p&gt;I've hosted a session titled &lt;em&gt;Quality Assurance According to Einstein&lt;/em&gt; for the
local QA community in Sofia. &lt;a href="https://www.youtube.com/watch?v=CnxNCdX3iG0"&gt;Video&lt;/a&gt;
(in Bulgarian) and &lt;a href="http://atodorov.org/blog/2017/04/20/quality-assurance-according-2-einstein/"&gt;links&lt;/a&gt; are available!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; added post-mortem.&lt;/p&gt;
&lt;h2&gt;01-02 June - Shift Developer Conference, Split&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://shift.codeanywhere.com/"&gt;Shift&lt;/a&gt; appears to be a very big event in Croatia.
My attendance is still unconfirmed due to lots of traveling before that and
the general trouble of efficiently traveling on the Balkans. However I have a
CFP submitted and waiting for approval. This time it is my
&lt;em&gt;Mutation Testing in Patterns&lt;/em&gt;, which is a journal of different code patterns
found during mutation testing. I have not yet presented it to the public
but will blog about it sometime soon so stay tuned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; this one is a no-go!&lt;/p&gt;
&lt;h2&gt;03-04 June - TuxCon, Plovdiv&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://tuxcon.mobi/"&gt;TuxCon&lt;/a&gt; is held in Plovdiv around the beginning of July.
I'm usually presenting some lightning talks there and use the opportunity to
meet with friends and peers outside Sofia and catch up with news from the
local community. The conference is in Bulgarian with the exception of the
occasional foreign speaker. If you understand Bulgarian I recommend the
story of
&lt;a href="http://atodorov.org/blog/2016/07/12/testing-the-8-bit-computer-puldin/"&gt;Puldin - a Bulgarian computer from the 80s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I will be opening the conference with &lt;em&gt;QA According to Einstein&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;17-18 June - How Camp, Varna&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://how.camp/"&gt;How Camp&lt;/a&gt; is the little brother of Bulgaria Web Summit and is always
held outside of Sofia. This year it will be in Varna, Bulgaria. I will be there of course
and depending on the crowd may talk about some software testing patterns.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; it looks like this is also a no-go but stay tuned for the upcoming
&lt;em&gt;Macedonia Web Summit&lt;/em&gt; and &lt;em&gt;Albania Web Summit&lt;/em&gt; where yours trully will probably
be a moderator!&lt;/p&gt;
&lt;h2&gt;25-29 September - SuSE CON, Prague&lt;/h2&gt;
&lt;p&gt;Yeah, this is the &lt;a href="http://www.susecon.com"&gt;conference organized by SuSE&lt;/a&gt;. I'm definitely
not afraid to visit the competition. I even hope I could teach them something. More
details are still TBA because this event is very close to/overlapping with the next
two.&lt;/p&gt;
&lt;h2&gt;28-29 September - SEETEST, Sofia&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://seetest.org"&gt;South East European Software Testing Conference&lt;/a&gt; is, AFAIK,
an international event which is hosted in a major city on the Balkans. Last year it was
held in Bucharest with previous years held in Sofia.&lt;/p&gt;
&lt;p&gt;In my view this is the most formal event, especially related to software testing,
I'm about to visit. Nevertheless I like to hear about new ideas and some research
in the field of QA so this is a good opportunity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I have submitted a new talk titled
&lt;em&gt;If the facts don't fit the theory, change the facts!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;30 September-1 October - HackConf, Sofia&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hackconf.bg"&gt;HackConf&lt;/a&gt; is one of the largest conferences in Bulgaria, gathering
over 1000 people each year. I am strongly affiliated with the people who organize it
and even had the opportunity to host the opening session last year. The picture above
is from this event.&lt;/p&gt;
&lt;p&gt;The audience is still very young and inexperienced but the presenters are above average.
Organizers' goal is HackConf to become the strongest technical conference in the country
and also serve as a sort of inspiration for young IT professionals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I have submitted both a talk proposal and a workshop proposal.
For the workshop I intend to teach children
&lt;a href="http://atodorov.org/blog/2017/05/27/learn-python-selenium-automation-in-8-weeks/"&gt;Python and Selenium Automation in 8 hours&lt;/a&gt;.
I've also been helping the organizers with bringing some very cool speakers
from abroad!&lt;/p&gt;
&lt;h2&gt;October - IT Weekend, Bulgaria&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://it-weekend.com/"&gt;IT Weekend&lt;/a&gt; is organized by Petar Sabev, the same person who's
behind QA: Challenge Accepted. It is a non-formal gathering of engineers with the intent
to share some news and then discuss and share problems and experiences. Checkout my
review of
&lt;a href="http://atodorov.org/blog/2016/10/08/what-i-learned-from-it-weekend/"&gt;IT Weekend #1&lt;/a&gt; and
&lt;a href="http://atodorov.org/blog/2016/11/02/it-weekend-highlights/"&gt;IT Weekend #3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The topic revolve around QA, leadership and management but the format is open and the
intention is to broaden the topics covered. The event is held outside Sofia at a SPA
hotel and makes for a very nice retreat. I don't have a topic but I'm definitely going
if time allows. I will probably make something up if we have QA slots available :).&lt;/p&gt;
&lt;h2&gt;October - Software Freedom Kosova, Prishtina&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://sfk.flossk.org"&gt;Software Freedom Kosova&lt;/a&gt; is one of the oldest conferences
about free and open source software in the region.
This is part of my goal to explore the IT communities on the Balkans.
Kosovo sounds a bit strange to visit but I did recognize a few names on the speaker
list of previous years.&lt;/p&gt;
&lt;p&gt;The CFP is not open yet but I'm planning to make a presentation. Also if weather
allows I'm planning a road trip on my motorbike :).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I've met with some of the FLOSSK members in Tirana at OSCAL and they
seem to be more busy with running the hacker space in Prishtina so the conference
is nearly a no-go.&lt;/p&gt;
&lt;h2&gt;14-15 November - Google Test Automation Conference, London&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/google-test-automation-conference/"&gt;GTAC 2017&lt;/a&gt;
will be held in London. Both speakers and attendees are pre-approved
and my goal is to be the first Red Hatter and second Bulgarian to speak at GTAC.&lt;/p&gt;
&lt;p&gt;The previous two years saw talks about
&lt;a href="http://atodorov.org/blog/2016/12/27/mutation-testing-vs-coverage/"&gt;mutation testing vs. coverage&lt;/a&gt;
and their respective use
to determine the quality of a test suite with both parties arguing against
each other. Since I'm working in both of these fields and have at least two
practical example I'm trying to gather more information and present my findings
to the world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I've also submitted my &lt;em&gt;Testing Red Hat Enterprise Linux the Microsoft way&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;16-17 November - ISTA Con, Sofia&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://istacon.org/"&gt;Innovations in Software Technologies and Automation&lt;/a&gt; started as a QA conference
several years ago but it has broaden the range of acceptable topics to include
development, devops and agile. I was at the first two editions and then didn't attend
for a while until &lt;a href="http://atodorov.org/blog/2016/11/30/highlights-from-ista-and-gtac-2016/"&gt;last year&lt;/a&gt; when I
really liked it. The event is entirely in English with lots of foreign speakers.&lt;/p&gt;
&lt;p&gt;Recently I've been working on something I call "Regression Test Monitoring" and my
intention is to present this at ISTA 2017 so stay tuned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I didn't manage to collect enough information on the
&lt;em&gt;Regression Test Monitoring&lt;/em&gt; topic but have made two other proposals.&lt;/p&gt;
&lt;p&gt;Thanks for reading and see you around!&lt;/p&gt;</summary><category term="events"></category><category term="fedora.planet"></category><category term="QA"></category></entry><entry><title>QA &amp; Automation 101 Retrospective</title><link href="http://atodorov.org/blog/2016/12/29/qa-automation-101-retrospective/" rel="alternate"></link><updated>2016-12-29T10:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-29:blog/2016/12/29/qa-automation-101-retrospective/</id><summary type="html">&lt;p&gt;&lt;img alt="QA 101 graduation" src="/images/qa101_final.jpg" title="QA 101 graduation" /&gt;&lt;/p&gt;
&lt;p&gt;At the beginning of this year I've hosted the first QA related course at
&lt;a href="http://hackbulgaria.com/"&gt;HackBulgaria&lt;/a&gt;. This is a long overdue post about
how the course went, what worked well and what didn't. Brace yourself because
it is going to be a long one.&lt;/p&gt;
&lt;p&gt;The idea behind a QA course has been lurking in both RadoRado's (from HackBulgaria)
and my heads for quite a while. We've been discussing it at least a year before we
actually started. One day Rado told me he'd found a sponsor and we have the go ahead
for the course and that's how it all started!&lt;/p&gt;
&lt;p&gt;The first issue was that we weren't prepared to start at a moments notice. I literally
had two weeks to prepare
&lt;a href="https://github.com/HackBulgaria/QA-and-Automation-101"&gt;the curriculum&lt;/a&gt;
and &lt;a href="http://atodorov.org/blog/2016/04/12/how-to-hire-software-testers-pt-1/"&gt;initial interview questions&lt;/a&gt;.
Next we opened the application form and left it open until the last possible moment.
I've been reviewing candidate answers hours before the course started, which was
another mistake we made!&lt;/p&gt;
&lt;p&gt;On the positive side is that I hosted a
&lt;a href="https://www.youtube.com/watch?v=Tgu0VTxytYw&amp;amp;index=37&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db"&gt;Q&amp;amp;A session on YouTube&lt;/a&gt;
answering general questions about the profession and the course itself. This
live stream helped popularize the course.&lt;/p&gt;
&lt;p&gt;At the start we had 30 people and around 13 of them managed to "graduate"
till the final lesson. The biggest portion of students dropped out after the
first 5 lessons of Java crash course! Each lesson was around 4 hours with 20-30
minutes break in the middle.&lt;/p&gt;
&lt;p&gt;With respect to the criteria find a first job or find a new/better job I consider the
training successful. To my knowledge all students have found better jobs, many of them
as software testers!&lt;/p&gt;
&lt;p&gt;On the practical side of things students managed to find and report 11 interesting
bugs against Fedora. Mind you that these were all found in the wild:
&lt;a href="https://fedorahosted.org/fedora-infrastructure/ticket/5323"&gt;fedora-infrastructure #5323&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339701"&gt;RHBZ#1339701&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339709"&gt;RHBZ#1339709&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339713"&gt;RHBZ#1339713&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339719"&gt;RHBZ#1339719&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339731"&gt;RHBZ#1339731&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339739"&gt;RHBZ#1339739&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339742"&gt;RHBZ#1339742&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1339746"&gt;RHBZ#1339746&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1340541"&gt;RHBZ#1340541&lt;/a&gt;,
&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1340891"&gt;RHBZ#1340891&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then students also made a few pull requests on GitHub (3 which I know off):
&lt;a href="https://github.com/apache/commons-math/pull/38"&gt;commons-math #38&lt;/a&gt;,
&lt;a href="https://github.com/apache/commons-csv/pull/12"&gt;commons-csv #12&lt;/a&gt;,
&lt;a href="https://github.com/apache/commons-email/pull/1"&gt;commons-email #1&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Lesson format&lt;/h2&gt;
&lt;p&gt;For reference most lessons were a mix of short presentation about theory and best practices
followed by discussions and where appropriate practical sessions with technology or
projects. The exercises were designed for individual work, work in pairs or small groups (4-5)
on purpose.&lt;/p&gt;
&lt;p&gt;By request from the sponsors I've tried to keep a detailed record of each student's
performance and personality traits as much as I was able to observe them. I really enjoyed
keeping such a journal but didn't share this info with my students which I consider
a negative issue. I think knowing where your strong and weak areas are would help you
become a better expert in your field!&lt;/p&gt;
&lt;h2&gt;Feedback from students&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There was little time (to work on the practical examples I guess);&lt;/li&gt;
&lt;li&gt;Not having particular practical tasks was a problem. For example we didn't have tasks of the
sort do "X" then "Y";&lt;/li&gt;
&lt;li&gt;They needed more time and more attention to be given to them;&lt;/li&gt;
&lt;li&gt;Installing different pieces of software and tools took a lot of time and frustration.
It was also quite problematic sometimes depending on whether they used Linux, Windows or Mac OS X;&lt;/li&gt;
&lt;li&gt;Working with Eclipse IDE was horrible. Nobody new what to do and the interface
wasn't newbie friendly. Also it took quite a lot of time to install dependencies and/or
import projects to run in Eclipse;&lt;/li&gt;
&lt;li&gt;There were a few problems with Selenium and its different versions being used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have to point out that while these are valid concerns and major issues students were
at least partially guilty for the last 3 of them. It was my impression that most of them
didn't prepare at home, didn't read the next lesson and didn't install prerequisite
tools and software!&lt;/p&gt;
&lt;h2&gt;5x Java Crash Course&lt;/h2&gt;
&lt;p&gt;We've started with a Java crash course as requested by our sponsors which was extended to
5 instead of the original 3 sessions. RadoRado was teaching Java fundamentals while
I was assisting him with comments.&lt;/p&gt;
&lt;p&gt;On the good side is that Rado explains very well and in much details. He also writes code
to demonstrate what he teaches and while doing so uses only the knowledge he's presented
so far. For example if there's a repeating logic/functionality he would just write it
twice instead of refactoring that into a separate function with parameters (assuming
the students have not learned about functions yet). I think this made it more easier
to understand the concepts being taught.&lt;/p&gt;
&lt;p&gt;Another positive thing we did was me going behind Rado's computer and modifying some
of the code while he was explaining something on screen. If you take the above example
and have two methods with print out salutations, e.g. "Good morning, Alex" I would go
and modify one of them to include "Mr." while the other will not. This introduced a
change in behavior which ultimately results in a bug! This was a nice practical way
to demonstrate how some classes of bugs get introduced in reality. We did only a few of
these behind the computer changes and I definitely liked them! They were all ad-hoc,
not planned for.&lt;/p&gt;
&lt;p&gt;On the negative side Java seems hard to learn and after these 5 lessons half of the
students dropped out. Maybe part of the reason is they didn't expect to start a QA
course with lessons about programming. But that also means they didn't pay enough
attention to the curriculum, which was announced in advance!&lt;/p&gt;
&lt;h2&gt;Lesson 01 - QA Fundamentals&lt;/h2&gt;
&lt;p&gt;I had made a point to assign time constraints to each exercise in the lessons.
While that mostly worked in the first few lessons, where there is more theory,
we didn't keep the schedule and were overtime.&lt;/p&gt;
&lt;p&gt;Explaining testing theory (based on ISTQB fundamentals) took longer than I expected.
it was also evident that we needed more written examples of what different test
analysis techniques are (e.g. boundary value analysis). Here Petar Sabev helped
me deliver few very nice examples.&lt;/p&gt;
&lt;p&gt;One of the exercises was "when to stop testing" with an example of a Sudoku solving
function and different environments in which this code operates, e.g. browser, mobile,
etc. Students appeared to have a hard time understanding what a
"runtime environment" is and define relevant tests based on that! I believe most
of the students, due to lack of knowledge and experience, were also having a hard time grasping the
concept of non-functional testing.&lt;/p&gt;
&lt;p&gt;A positive thing was that students started explaining to one another and giving
examples for bugs they've seen outside the course.&lt;/p&gt;
&lt;h2&gt;Lesson 02 - Software Development Lifecycle&lt;/h2&gt;
&lt;p&gt;This lesson was designed as role playing game to demonstrate the most common
software development methodologies - waterfall and agile and discuss the QA role
in both of them. The format by itself is very hard to conduct successfully and
this was my first time ever doing this. I've also never taken part of such games
until then, only heard about them.&lt;/p&gt;
&lt;p&gt;During the waterfall exercise it was harder for the students to follow the game
constraints and not exchange information with one another because they were sitting
on the same table.&lt;/p&gt;
&lt;p&gt;On the positive side all groups came with unique ideas about software features and how
they want to develop them. Timewise we managed to do very well. On the negative side
is that I was the client for all groups and didn't manage to pay enough attention
to everyone, which btw is what clients usually do in real life.&lt;/p&gt;
&lt;h2&gt;Lesson 03 - Bug Tracking&lt;/h2&gt;
&lt;p&gt;This lesson was a practical exercise in writing bug reports and figuring out what
information needs to be present in a good bug report. Btw this is something I
always ask junior members at job interviews.&lt;/p&gt;
&lt;p&gt;First we started with working in pairs to define what a good bug report is
without actually knowing what that means. Students found it hard to brainstorm
together and most of them worked alone during this exercise.&lt;/p&gt;
&lt;p&gt;Next students had to write bug reports for some example bugs, which I've explained briefly
on purpose and perform peer reviews of their bugs. Reviews took a long time to complete
but overall students had a good idea of what information to include in a bug report.&lt;/p&gt;
&lt;p&gt;Then, after learning from their mistakes and hearing what others had done, they've
learned about some good practices and were tasked to rewrite their bug reports using
the new knowledge. I really like the approach of letting students make some mistakes
and then showing them the easier/better way of doing things. This is also on-par with
&lt;a href="http://atodorov.org/blog/2016/09/25/what-ivan-learned-from-organizing-internships/"&gt;Ivan Nemytchenko's methodology&lt;/a&gt; of
letting his interns learn by their mistakes.&lt;/p&gt;
&lt;p&gt;All bug reports can be found in students repositories, which are forked from the
curriculum. Check out &lt;a href="https://github.com/HackBulgaria/QA-and-Automation-101/network"&gt;https://github.com/HackBulgaria/QA-and-Automation-101/network&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I should have really asked everyone to file bugs under the curriculum repository so
it is easier for me to track them. On the other hand I wanted each student to start building
their own public profile to show potential employers.&lt;/p&gt;
&lt;h2&gt;Lesson 04 - Test Case Management&lt;/h2&gt;
&lt;p&gt;This lesson started with an exercise asking students to create accounts for
Red Hat's OpenShift cloud platform in the form of a test scenario. The scenario intentionally
left out some details. The idea being that missing information introduces inconsistencies
during testing and to demonstrate how the same steps were performed slightly differently.&lt;/p&gt;
&lt;p&gt;We had some troubles explaining exactly "how did you test" because most inexperienced people
would not remember all details about where they clicked, did they use the mouse or the
keyboard, was the tab order correct, etc. Regardless students managed to receive different
results and discover that some email providers were not supported.&lt;/p&gt;
&lt;p&gt;The homework assignment was to create test plans and test cases in Nitrate at
&lt;a href="https://nitrate-hackbg.rhcloud.com/"&gt;https://nitrate-hackbg.rhcloud.com/&lt;/a&gt;. Unfortunately the system appears to be down ATM
and I don't have time to investigate why. This piece of infrastructure was put together
in 2 hours and I'm surprised it lasted without issues during the entire course.&lt;/p&gt;
&lt;h2&gt;2x Introduction to Linux&lt;/h2&gt;
&lt;p&gt;This was a crash course in Linux fundamentals and exercise with most common commands
and text editors in the console. Most of the students were not prepared with virtual
machines. We've also used a cloud provider to give students remote shell but the
provider API was failing and we had to deploy docker containers manually. Overall
infrastructure was a big problem but we somehow managed. Another problem was with
ssh clients from Windows who generated keys in a format that our cloud provider
couldn't understand.&lt;/p&gt;
&lt;p&gt;Wrt commands and exercises students did well and managed to execute most of them
on their own. That's very good for people who've never seen a terminal in their lives
(more or less).&lt;/p&gt;
&lt;h2&gt;Lesson 05 - Testing Fedora 24(25) Changes&lt;/h2&gt;
&lt;p&gt;Once again nobody was prepared with a virtual machine with Fedora and students
were installing software as we go. Because of that we didn't manage to conduct
the lesson properly and had to repeat it on the next session.&lt;/p&gt;
&lt;p&gt;Rawhide being the bleeding edge of Fedora means it is full of bugs. Well I couldn't
keep up with everyone and explain workarounds or how to install/upgrade Fedora.
That was a major setback. It also became evident that you can't move quickly
if you have no idea what to do and no instructions about it either.&lt;/p&gt;
&lt;h2&gt;Lesson 05 - Again&lt;/h2&gt;
&lt;p&gt;Once prepared with the latest and greatest from Rawhide the task was to analyze the
proposed feature changes (on the Fedora wiki) and create test plans and design
test cases for said changes. Then execute the tests in search for bugs. This is where
some of the bugs above came from. The rest were found during upgrades.&lt;/p&gt;
&lt;p&gt;This lesson was team work (4-5 students) but the results were mixed. IMO Fedora changes
are quite hard to grasp, especially if you lack domain knowledge and broader knowledge
about the structure and operation of a Linux distribution. I don't think most teams
were able to clearly understand their chosen features and successfully create good
plans/scenarios for them. On the other hand in real life software you don't necessarily
understand the domain better and know what to do. I've been in situations where
whole features have been defined by a single sentence and requested to be tested by QA.&lt;/p&gt;
&lt;p&gt;One of the teams didn't manage to install Fedora (IIRC they didn't have laptops
capable of running a VM) and were not able to conduct the exercise.&lt;/p&gt;
&lt;p&gt;Being able to find real life bugs, some of them serious, and getting traction in Bugzilla
is the most positive effect of this lesson. I personally wanted to have more output
(e.g. more bugs, more cases defined, etc) but taking into account the blocking factors
and setbacks I think this is a good initial result.&lt;/p&gt;
&lt;h2&gt;Lesson 06 - Unit Testing and Continuous Integration&lt;/h2&gt;
&lt;p&gt;Here we had a few examples of bad stubs and mocks which were not received very well.
The topic is hard in itself and wasn't very well explained with practical examples.&lt;/p&gt;
&lt;p&gt;Another negative thing is that students took a lot of time to fiddle around with
Eclipse, they were mistyping commands in the terminal and generally not paying enough
attention to instructions. This caused the exercises to go slowly.&lt;/p&gt;
&lt;p&gt;We've had an exercise which asks the student to write a new test for a non-existing
method. Then implement the method and make sure all the tests passed. You guessed it
this is Test Driven Development.
IIRC one of the students was having a hard time with that exercise so I popped up
my editor on the large screen and started typing what she told me, then re-running the
tests and asking her to show me the errors I've made and tell me how to correct them.
The exercise was received very well and was fun to do.&lt;/p&gt;
&lt;p&gt;Due to lack of time we had to go over TravisCI very quickly. The other bad thing about
TravisCI is that it requires git/GitHub and the students were generally inexperienced
with that. Both GitHub for Windows and Mac OS suck a big time IMO. What you need is the
console. However none of the students had any practical experience with git and knew
how to commit code and push branches to GitHub. git fundamentals however is a separate
one or two lessons by itself which we didn't do.&lt;/p&gt;
&lt;h2&gt;Lesson 07 - Writing JUnit tests for Apache Commons&lt;/h2&gt;
&lt;p&gt;Excluding the problems with Eclipse and the GitHub desktop client and
missing instructions for Windows the hardest part of this lesson was actually
selecting a component to work on, understanding what the code does and actually
writing meaningful tests. On top of that most students were not very proficient
programmers and Java was completely new to them.&lt;/p&gt;
&lt;p&gt;Despite having 3 pull requests on GitHub I consider this lesson to be a failure.&lt;/p&gt;
&lt;h2&gt;Lesson 08 - Integration Testing with Selenium&lt;/h2&gt;
&lt;p&gt;This lesson starts with an example of what a flaky test it. At the moment I don't
think this lesson is the best place for that example. To make things even more difficult
the example is in Python (because that way was the easiest for me to write it) instead
of Java. Students had problems installing Python on Windows just to make this example work.
They also were lacking the knowledge how to execute a script in the terminal.&lt;/p&gt;
&lt;p&gt;One of the students proposed a better flaky example utilizing dates and times and
executing it during various hours of the day. I have yet to code this and
prepare environment in which it would be executed. Btw recently I've seen similar behavior
caused by inconsistent timezone usage in Ruby which resulted in unexpected time offset
a little after midnight :).&lt;/p&gt;
&lt;p&gt;Once again I have to point out that students came generally unprepared for the lesson
and haven't installed prerequisite software and programming languages. This is becoming
a trend and needs to be split out into a preparation session, possibly with a check
list.&lt;/p&gt;
&lt;p&gt;On the Selenium side, starting with Selenium IDE, it was a bit unclear how to use it
and what needs to be done. This is another negative trend, where students were missing clear
instructions what they are expected to do. At the end we did resort to live demo
using Selenium IDE so they can at least get some idea about it.&lt;/p&gt;
&lt;h2&gt;Lesson 09 and 10 - Writing Selenium tests for Mozilla Add-ons website&lt;/h2&gt;
&lt;p&gt;IMO these two lessons are the biggest disaster of the entire course. Python &amp;amp; virtualenv
on Windows was a total no go but on Linux things weren't much easier because students
had no idea what a virtualenv is.&lt;/p&gt;
&lt;p&gt;Practice wise they haven't managed to read all the bugs on the Mozilla bug tracker and
had a very hard time selecting bugs to write tests for. Not to mention that many of the
reported bugs were administrative tasks to create or remove add-on categories. There
weren't many functional related bugs to write tests for.&lt;/p&gt;
&lt;p&gt;The product under test was also hard to understand and most students were seeing it for the first
time, let alone getting to know the devel and testing environments that Mozilla provides.
Mozilla's test suite being in Python is just another issue to make contribution harder
because we've never actually studied Python.&lt;/p&gt;
&lt;p&gt;Between the two lessons there were students who've missed the Selenium introduction
lesson and were having even harder time to figure things out. I didn't have the time
to explain and go back to the previous lesson for them.
Maybe an attendance policy is needed for dependent lessons.&lt;/p&gt;
&lt;p&gt;Before the course started I've talked to some guys at Mozilla's IRC channel and
they agreed to help but at the end we didn't even engage with them. At this point
I'm skeptical that mentoring over IRC would have worked anyway.&lt;/p&gt;
&lt;h2&gt;Lesson 11 - Introduction to Performance Testing&lt;/h2&gt;
&lt;p&gt;This was a more theoretical lesson with less practical examples and exercises.
I have provided some blog posts of mine related to the topic of performance
testing but in general they are related to software that I've used which isn't
generally known to a less experienced audience (Celery, Twisted). These blog posts
IMO were hard to put into perspective and didn't serve a good purpose as examples.&lt;/p&gt;
&lt;p&gt;The practical part of the lesson was a discussion with the goal of creating a
performance testing strategy for GitHub's infrastructure. It was me who was
doing most of the talking because students have no experience working on such
a large infrastructure like GitHub and didn't know what components might be
there, how they might be organized (load balancers, fail overs, etc)
and what needs to be tested.&lt;/p&gt;
&lt;p&gt;There was also a more practical example to create a performance test in Java for
one of the classes found in &lt;code&gt;commons-codec/src/main/java/org/apache/commons/codec/digest&lt;/code&gt;.
Again the main difficulty here was working fluently with Eclipse, getting the projects to
build/run and knowing how the software under test was supposed to work and be executed.&lt;/p&gt;
&lt;h2&gt;Lesson 12 - How to find 1000 bugs in 30 minutes&lt;/h2&gt;
&lt;p&gt;This was a more relaxed lesson with examples of simple types of bugs found on a
large scale. Most examples came from my blog and experiments I've made against
Fedora.&lt;/p&gt;
&lt;p&gt;While amusing and fun I don't think all of the students understood me and kept
their attention. Part of that is because Fedora tends to focus on low level
stuff and my examples were not necessarily easy to understand.&lt;/p&gt;
&lt;h2&gt;Feedback from the sponsor&lt;/h2&gt;
&lt;p&gt;Experian Bulgaria was the exclusive sponsor for this course. At the end of the summer
Rado and I met with them to discuss the results of the training. Here's what they say&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overall technical knowledge they consider to be weak. What they need are people
with basic knowledge in the field of object oriented programming, databases, operating
systems and networking. These are skills candidates need in order to work for Experian.
It must be noted that most of them were not taught at this course!&lt;/li&gt;
&lt;li&gt;English language proficiency for all students is low on average;&lt;/li&gt;
&lt;li&gt;User level experience with Linux was fine but students were missing deeper
knowledge about the operating system. Once again something we didn't teach;&lt;/li&gt;
&lt;li&gt;The programming languages favored at Experian are Java and Ruby and students
had poor knowledge of them. They also had weak understanding of OOP principles;&lt;/li&gt;
&lt;li&gt;According to Experian students were more ingrained with the development mindset
and were trying their luck in the QA profession instead of genuinely being interested
in the field. While this is generally the case I have to point out that as sponsor
Experian did a poor job at promoting their company and the QA profession
as a whole. What isn't known to the general public is their big in-house
QA community which could have served as a source of inspiration for the students!&lt;/li&gt;
&lt;li&gt;Low motivation and lack of fundamental knowledge from university are other
traits interviewers at Experian have identified. They argued for a stronger
acceptance process and a requirement of minimum 2 years of university
education in computer science.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the topic of testing knowledge candidates did mostly OK, however
we don't have enough information about this. Also the hiring process at
Experian is more focused on the broader knowledge areas listed above so
substantial improvement in the testing knowledge of candidates doesn't given
them much head start.&lt;/p&gt;
&lt;p&gt;While to my knowledge they didn't hire anyone few people
received an offer but declined due to various personal reasons. I view this
as poor performance on our side but Experian thinks otherwise and are willing
to sponsor another round of training.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Here is a list of all the things that could be improved&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take time to develop the curriculum and have it pass QA review by other
experienced testers (in particular such that also teach students);&lt;/li&gt;
&lt;li&gt;Make the application process harder to include people with broader IT knowledge;&lt;/li&gt;
&lt;li&gt;Allow time to review all applicants;&lt;/li&gt;
&lt;li&gt;Find a co-trainer and additional mentors for some of the exercises;&lt;/li&gt;
&lt;li&gt;Minimize the number of students accepted in the course so we can handle everyone
with more care;&lt;/li&gt;
&lt;li&gt;Give homework assignments and examine them before each lesson;&lt;/li&gt;
&lt;li&gt;Collect and provide performance review at the end of the course;&lt;/li&gt;
&lt;li&gt;Minimize the technology stack and tools used;&lt;/li&gt;
&lt;li&gt;Host a technology preparation session at the beginning paired
with a check list of all the things that need to be done. Very likely
make the chosen technology stack a hard requirement to avoid setbacks
later in the schedule;&lt;/li&gt;
&lt;li&gt;We need more fundamental lessons like practical git tutorial,
practical Linux tutorial, databases, networking, etc.&lt;/li&gt;
&lt;li&gt;Same goes for Java or any other programming language. Each of these technologies
easily makes a course by itself. Possibly include technology skill assessment
in the application form and reject candidates who don't meet the minimum level.
This is to ensure the group is able to move at the same pace.&lt;/li&gt;
&lt;li&gt;We need to improve the infrastructure used during the course,
especially exercise bug tracking and test case management systems;&lt;/li&gt;
&lt;li&gt;Students need clear instructions for every exercise - what is required from them,
what the expected result is and what they need to be doing, etc;&lt;/li&gt;
&lt;li&gt;Provide more examples for just about everything. Also make the examples
easier to understand/simple with the harder examples left for further
reading;&lt;/li&gt;
&lt;li&gt;Provide easier projects to work on. This means applications whose domain
is easier to understand and closer to what experiences the students might have.
Also projects need clear instructions how to join and how to contribute with tests.&lt;/li&gt;
&lt;li&gt;The same application/software needs to be used for manual bug finding,
unit test writing and integration test with Selenium. This will minimize
both context and technology switches and allow to view various testing
activities in the context of a single software under test;&lt;/li&gt;
&lt;li&gt;While using open source projects for the above listed purposes sounds great
the reality is that they are hard to join and will not move according to our
schedule. Maybe less focus on open source per-se and more focus on a particular
application under test. Instructors can then proxy all the tests forward
to the upstream community;&lt;/li&gt;
&lt;li&gt;Focus more on practice and less on exotic topics like performance testing
and large scale bug finding;&lt;/li&gt;
&lt;li&gt;Seek more active participation from sponsors!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have suggestions please comment below, especially if you can tell me
how to implement them in practice.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>4 Quick Wins to Manage the Cost of Software Testing</title><link href="http://atodorov.org/blog/2016/12/28/4-quick-wins-to-manage-the-cost-of-software-testing/" rel="alternate"></link><updated>2016-12-28T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-28:blog/2016/12/28/4-quick-wins-to-manage-the-cost-of-software-testing/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;Every activity in software development has a cost and a value. Getting cost to
trend down while increasing value, is the ultimate goal.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the introduction of an e-book called
&lt;a href="http://pi.qasymphony.com/four-quick-wins-thank-you"&gt;4 Quick Wins to Manage the Cost of Software Testing&lt;/a&gt;.
It was sent to me by Ivan Fingarov couple of months ago. Just now I've managed to
read it and here's a quick summary. I urge everyone to download the original copy
and give it a read.&lt;/p&gt;
&lt;p&gt;The paper focuses on several practices which organizations can apply immediately
in order to become more efficient and transparent in their software testing. While
larger organizations (e.g. enterprises) have most of these practices already in place
smaller companies (up to 50-100 engineering staff) may not be familiar with them
and will reap the most benefits of implementing said practices. Even though I work
for a large enterprise I find this guide useful when considered at the individual
team level!&lt;/p&gt;
&lt;p&gt;The first chapter focuses on &lt;em&gt;Tactics&lt;/em&gt; to minimize cost: Process, Tools, Bug System Mining
and Eliminating Handoffs.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Process&lt;/em&gt; the goal is to minimize the burden of documenting the test process
(aka testing artifacts), allow for better transparency and visibility outside the QA group
and streamline the decision making process of what to test and when to stop testing,
how much has been tested, what the risk is, ect. The authors propose testing core functionality
paired with emerging risk areas based on new features development. They propose making
a list of these and sorting that list by perceived risk/priority and testing as much
as possible. Indeed this is very similar to the method I've used at Red Hat when designing
testing for new features and new major releases of Red Hat Enterprise Linux. A similar
method I've seen in place at several start-ups as well, although in the small organization
the primary driver for this method is lack of sufficient test resources.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tools&lt;/em&gt; proposes the use of test case management systems to ease the documentation burden.
I've used &lt;a href="http://testlink.org/"&gt;TestLink&lt;/a&gt; and &lt;a href="https://github.com/Nitrate/Nitrate"&gt;Nitrate&lt;/a&gt;.
From them Nitrate has more features but is currently unmaintained with me being the
largest contributor on GitHub. From the paid variants I've used
&lt;a href="https://www.polarion.com/products/qa/test-automation"&gt;Polarion&lt;/a&gt; which I generally dislike.
Polarion is most suitable for large organizations because it gives lots of opportunities
for tracking and reporting. For small organizations it is an overkill.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bug System Mining&lt;/em&gt; is a technique which involves regularly scanning the bug tracker
and searching for patterns. This is useful for finding bug types which appear
frequently and generally point to a flaw in the software development process. The fix for these
flaws usually is a change in policy/workflow which eliminates the source of the errors.
I'm a fan of this technique when joining an existing project and need to assess
what the current state is. I've done this when consulting for a few start-ups, including
&lt;a href="http://meet.jit.si"&gt;Jitsi Meet&lt;/a&gt; (acquired by Atlassian), however I'm not doing bug mining
on a regular basis which I consider a drawback and I really should start doing!&lt;/p&gt;
&lt;p&gt;For example at one project I found lots of bugs reported against translations, e.g.
missing translations, text overflowing the visible screen area or not playing well with
existing design, chosen language/style not fitting well with the product domain, etc.&lt;/p&gt;
&lt;p&gt;The root cause of the problem was how the software in question has been localized.
The translators were given a file of English strings, which they would translate and
return back in an spread sheet. Developers would copy&amp;amp;paste the translated strings
into localization files and integrate with the software. Then QA would usually
inspect all the pages and report the above issues. The solution was to remove devel
and QA from the translation process, implement a translation management system together
with live preview (web based) so that translators can keep track of what is left to
translate and can visually inspect their work immediately after a string was translated.
Thus translators are given more context for their work but also given the responsibility
to produce good quality translations.&lt;/p&gt;
&lt;p&gt;Another example I've seen are many bugs which seem like a follow up/nice to have features
of partially implemented functionality. The root cause of this problem turned out to be
that devel was jumping straight to implementation without taking the time to brainstorm
and consult with QE and product owners, not taking into account corner cases and minor
issues which would have easily been raised by skillful testers. This process lead to
several iterations until the said functionality was considered initially implemented.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Eliminating Handoffs&lt;/em&gt; proposes the use of cross-functional teams to reduce idle time
and reduce the back-and-forth communication which happens when a bug is found, reported,
evaluated and considered for a fix, fixed by devel and finally deployed for testing.
This method argues that including testers early in the process and pairing them with
the devel team will produce faster bug fixes and reduce communication burden.&lt;/p&gt;
&lt;p&gt;While I generally agree with that statement it's worth noting that cross-functional
teams perform really well when all team members have relatively equal skill level
on the horizontal scale and strong experience on the vertical scale (think T-shaped specialist).
Cross-functional teams
don't work well when you have developers who aren't well versed in the testing domain
and/or testers who are not well versed in programming or the broader OS/computer science
fundamentals domain. In my opinion you need well experienced engineers for a good cross-functional
team.&lt;/p&gt;
&lt;p&gt;In the chapter &lt;em&gt;Collaboration&lt;/em&gt; the paper focuses on pairing, building the right thing
and faster feedback loops for developers. This overlaps with earlier proposals for
cross-functional teams and QA bringing value by asking the "what if" questions.
The chapter specifically talks about the Three Amigos meeting between PM, devel and QA
where they discuss a feature proposal from all angles and finally come to a conclusion
what the feature should look like. I'm a strong supporter of this technique and have
been working with it under one form or another during my entire career. This also
touches on the notion that testers need to move into the &lt;em&gt;Quality Assistance&lt;/em&gt; business
and be proactive during the software development process, which is something I'm
hoping to talk about at the
&lt;a href="http://www.romaniatesting.ro/"&gt;Romanian Testing Conference&lt;/a&gt; next year!&lt;/p&gt;
&lt;p&gt;Finally the book talks about &lt;em&gt;Skills Development&lt;/em&gt; and makes the distinction between
Centers of Excellence (CoE) and Communities of Practice (CoP). Both the book and I
are supporters of the CoP approach. This is a bottoms-up approach which is open for
everyone to join in and harnesses the team creative abilities. It also takes into
account that different teams use different methods and tools and that
"one size doesn't fit all"!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Skilled teams find important bugs faster, discover innovative solutions to hard
testing problems and know how to communicate their value. Sometimes, a few super
testers can replace an army of average testers.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While I consider myself to be a "super tester" with thousands of bugs reported there
is a very important note to make here. Communities of Practice are successful when
their members are self-focused on skill development! In my view and to some
extent the communities I've worked with everyone should strive to constantly improve
their skills but also exercise peer pressure on their co-workers to not fall behind.
This has been confirmed by other folks in the QA industry and I've heard it many times
when talking to friends from other companies.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Mutation Testing vs. Coverage</title><link href="http://atodorov.org/blog/2016/12/27/mutation-testing-vs-coverage/" rel="alternate"></link><updated>2016-12-27T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-27:blog/2016/12/27/mutation-testing-vs-coverage/</id><summary type="html">&lt;p&gt;At GTAC 2015 Laura Inozemtseva made a lightning talk titled
&lt;a href="https://www.youtube.com/watch?v=sAfROROGujU&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=47"&gt;Coverage is Not Strongly Correlated with Test Suite Effectiveness&lt;/a&gt;
which is the single event that got me hooked up with mutation testing.
This year, at GTAC 2016, Rahul Gopinath made a counter argument
with his lightning talk
&lt;a href="https://www.youtube.com/watch?v=NKEptA3KP08&amp;amp;list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&amp;amp;index=1"&gt;Code Coverage is a Strong Predictor of Test Suite Effectiveness&lt;/a&gt;.
So which one is better ? I urge you to watch both talks and take notes before
reading about my practical experiment and other opinions on the topic!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; I'm a heavy contributor to Cosmic-Ray, the mutation testing tool for Python
so my view is biased!&lt;/p&gt;
&lt;p&gt;Both Laura and Rahul (you will too) agree that a test suite effectiveness depends
on the strength of its oracles. In other words the assertions you make in your tests.
This is what makes a test suite good and determines its ability to detect bugs when
present. I've decided to use &lt;a href="https://github.com/MrSenko/pelican-ab"&gt;pelican-ab&lt;/a&gt; as
a practical example. pelican-ab is a plugin for Pelican, the static site generator
for Python. It allows you to generate A/B experiments by writing out the content
into different directories and adjusting URL paths based on the experiment name.&lt;/p&gt;
&lt;h2&gt;Can 100% code coverage detect bugs&lt;/h2&gt;
&lt;p&gt;Absolutely &lt;strong&gt;NOT&lt;/strong&gt;! In version 0.2.1,
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/ef1e2117ad8ffa5b9fa8470d32d54a36ccb140bb"&gt;commit ef1e211&lt;/a&gt;,
pelican-ab had the following bug:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Given&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;several&lt;/span&gt; &lt;span class="n"&gt;experiments&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;control&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;AB_EXPERIMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xy&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;
    &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xy&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt; &lt;span class="n"&gt;online&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;experiments&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;under&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because before each invocation Pelican deletes the output directory and
re-creates the entire content structure. The bug was not caught regardless of
having 100% line + branch coverage. See
&lt;a href="https://travis-ci.org/MrSenko/pelican-ab/builds/129514715"&gt;Build #10&lt;/a&gt; for more
info.&lt;/p&gt;
&lt;h2&gt;Can 100% mutation coverage detect bugs&lt;/h2&gt;
&lt;p&gt;So I've branched off since commit ef1e211 into the
&lt;a href="https://github.com/MrSenko/pelican-ab/commits/mutation_testing_vs_coverage_experiment"&gt;mutation_testing_vs_coverage_experiment branch&lt;/a&gt;
(requires Pelican==3.6.3).&lt;/p&gt;
&lt;p&gt;After initial execution of Cosmic Ray I have 2 mutants left:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cosmic-ray run --baseline=10 --test-runner=unittest example.json pelican_ab -- tests/
$ cosmic-ray report example.json 
job ID 29:Outcome.SURVIVED:pelican_ab
command: cosmic-ray worker pelican_ab mutate_comparison_operator 3 unittest -- tests/
&lt;span class="gd"&gt;--- mutation diff ---&lt;/span&gt;
&lt;span class="gd"&gt;--- a/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -14,7 +14,7 @@&lt;/span&gt;
     def __init__(self, output_path, settings=None):
         super(self.__class__, self).__init__(output_path, settings)
         experiment = os.environ.get(jinja_ab._ENV, jinja_ab._ENV_DEFAULT)
&lt;span class="gd"&gt;-        if (experiment != jinja_ab._ENV_DEFAULT):&lt;/span&gt;
&lt;span class="gi"&gt;+        if (experiment &amp;gt; jinja_ab._ENV_DEFAULT):&lt;/span&gt;
             self.output_path = os.path.join(self.output_path, experiment)
             Content.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_content_url.fget(s))))
             URLWrapper.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_urlwrapper_url.fget(s))))

job ID 33:Outcome.SURVIVED:pelican_ab
command: cosmic-ray worker pelican_ab mutate_comparison_operator 7 unittest -- tests/
&lt;span class="gd"&gt;--- mutation diff ---&lt;/span&gt;
&lt;span class="gd"&gt;--- a/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/home/senko/pelican-ab/pelican_ab/__init__.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -14,7 +14,7 @@&lt;/span&gt;
     def __init__(self, output_path, settings=None):
         super(self.__class__, self).__init__(output_path, settings)
         experiment = os.environ.get(jinja_ab._ENV, jinja_ab._ENV_DEFAULT)
&lt;span class="gd"&gt;-        if (experiment != jinja_ab._ENV_DEFAULT):&lt;/span&gt;
&lt;span class="gi"&gt;+        if (experiment not in jinja_ab._ENV_DEFAULT):&lt;/span&gt;
             self.output_path = os.path.join(self.output_path, experiment)
             Content.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_content_url.fget(s))))
             URLWrapper.url = property((lambda s: ((experiment + &amp;#39;/&amp;#39;) + _orig_urlwrapper_url.fget(s))))

total jobs: 33
complete: 33 (100.00%)
survival rate: 6.06%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last one, job 33 is equivalent mutation. The first one, job 29 is killed by the test
added in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/b8bff85eeca6c18fbf62cac55fd1a0d64295c43c"&gt;commit b8bff85&lt;/a&gt;.
For all practical purposes we now have 100% code coverage and 100% mutation coverage.
The bug described above still exists thought.&lt;/p&gt;
&lt;h2&gt;How can we detect the bug&lt;/h2&gt;
&lt;p&gt;The bug isn't detected by any test because
we don't have tests designed to perform and validate the exact same steps that a
physical person will execute when using pelican-ab. Such test is added in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/ca85bd042d783f2f6551ae17f16b29aa3750711b"&gt;commit ca85bd0&lt;/a&gt;
and you can see that it causes
&lt;a href="https://travis-ci.org/MrSenko/pelican-ab/builds/186510356"&gt;Build #22&lt;/a&gt; to fail.&lt;/p&gt;
&lt;p&gt;Experiment with setting &lt;code&gt;DELETE_OUTPUT_DIRECTORY=False&lt;/code&gt; in &lt;code&gt;tests/pelicanconf.py&lt;/code&gt; and
the test will PASS!&lt;/p&gt;
&lt;h2&gt;Is pelican-ab bug free&lt;/h2&gt;
&lt;p&gt;Not of course. Even after 100% code and mutation coverage and after manually constructing
a test which mimics user behavior there is at least one more bug present. There
is a pylint &lt;code&gt;bad-super-call&lt;/code&gt; error, fixed in
&lt;a href="https://github.com/MrSenko/pelican-ab/commit/193e3db9e7d021e11b54f54ac8b8718651c633c8"&gt;commit 193e3db&lt;/a&gt;.
For more information about the error see
&lt;a href="http://mrsenko.com/blog/atodorov/2016/09/14/beware-of-recursion-loop-when-using-super/"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other bugs found&lt;/h2&gt;
&lt;p&gt;During my humble experience with mutation testing so far I've added
&lt;a href="https://github.com/rhinstaller/pykickstart/pulls/atodorov"&gt;quite a few new tests&lt;/a&gt;
and discovered two bugs which went unnoticed for years. The first one is
constructor parameter not passed to parent constructor,
see
&lt;a href="https://github.com/rhinstaller/pykickstart/pull/96/files#diff-f4294048719aeac4da7a86eee0fbdfd3"&gt;PR#96, pykickstart/commands/authconfig.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     def __init__(self, writePriority=0, *args, **kwargs):
&lt;span class="gd"&gt;-        KickstartCommand.__init__(self, *args, **kwargs)&lt;/span&gt;
&lt;span class="gi"&gt;+        KickstartCommand.__init__(self, writePriority, *args, **kwargs)&lt;/span&gt;
         self.authconfig = kwargs.get(&amp;quot;authconfig&amp;quot;, &amp;quot;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second bug is parameter being passed to parent class constructor,
but the parent class doesn't care about this parameter. For example
&lt;a href="https://github.com/rhinstaller/pykickstart/pull/96/files#diff-7d2833450b6e1c9a94eb90e7f171ff52"&gt;PR#96, pykickstart/commands/driverdisk.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-    def __init__(self, writePriority=0, *args, **kwargs):&lt;/span&gt;
&lt;span class="gd"&gt;-        BaseData.__init__(self, writePriority, *args, **kwargs)&lt;/span&gt;
&lt;span class="gi"&gt;+    def __init__(self, *args, **kwargs):&lt;/span&gt;
&lt;span class="gi"&gt;+        BaseData.__init__(self, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also note that pykickstart has nearly 100% test coverage as a whole
and the affected files were 100% covered as well.&lt;/p&gt;
&lt;p&gt;The bugs above don't seem like a big deal and when considered out of context
are relatively minor. However pykickstart's biggest client is anaconda, the Fedora
and Red Hat Enterprise Linux installation program. Anaconda uses pykickstart to
parse and generate text files (called kickstart files) which contain information
for driving the installation in a fully automated manner. This is used by everyone
who installs Linux on a large scale and is pretty important functionality!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;writePriority&lt;/code&gt; controls the order of which individual commands are written to file
at the end of the installation. In rare cases the order of commands may depend
on each other. Now imagine the bugs above produce a disordered kickstart file,
which a system administrator thinks should work but it doesn't. It may be the case
this administrator is trying to provision hundreds of Linux systems to bootstrap
a new data center or maybe performing disaster recovery. You get the scale of
the problem now, don't you?&lt;/p&gt;
&lt;p&gt;To be honest I've seen bugs of this nature but not in the last several years.&lt;/p&gt;
&lt;p&gt;This is all to say a minor change like this may have
an unexpectedly big impact somewhere down the line.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With respect to the above findings and my bias I'll say the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither 100% coverage, nor 100% mutation coverage are a silver bullet against bugs;&lt;/li&gt;
&lt;li&gt;100% mutation coverage appears to be better than 100% code coverage in practice;&lt;/li&gt;
&lt;li&gt;Mutation testing clearly shows out pieces of code which need refactoring
  which in turn minimizes the number of possible mutations;&lt;/li&gt;
&lt;li&gt;Mutation testing causes you to write more asserts and construct more detailed tests
  which is always a good thing when testing software;&lt;/li&gt;
&lt;li&gt;You can't replace humans designing test cases just yet but can give them tools
  to allow them to write more and better tests;&lt;/li&gt;
&lt;li&gt;You should not rely on a single tool (or two of them) because tools are only
  able to find bugs they were designed for!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus: What others think&lt;/h2&gt;
&lt;p&gt;As a bonus to this article let me share a transcript from the
&lt;a href="https://mutation-testing.slack.com"&gt;mutation-testing.slack.com&lt;/a&gt; community:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atodorov 2:28 PM
Hello everyone, I&amp;#39;d like to kick-off a discussion / interested in what you think about
Rahul Gopinath&amp;#39;s talk at GTAC this year. What he argues is that test coverage is still
the best metric for how good a test suite is and that mutation coverage doesn&amp;#39;t add much
additional value. His talk is basically the opposite of what @lminozem presented last year
at GTAC. Obviously the community here and especially tools authors will have an opinion on
these two presentations.

tjchambers 12:37 AM
@atodorov I have had the &amp;quot;pleasure&amp;quot; of working on a couple projects lately that illustrate
why LOC test coverage is a misnomer. I am a **strong** proponent of mutation testing so will
declare my bias.

The projects I have worked on have had a mix of test coverage - one about 50% and
another &amp;gt; 90%.

In both cases however there was a significant difference IMO relative to mutation coverage
(which I have more faith in as representative of true tested code).

Critical factors I see when I look at the difference:

- Line length: in both projects the line lengths FAR exceeded visible line lengths that are
&amp;quot;acceptable&amp;quot;. Many LONGER lines had inline conditionals at the end, or had ternary operators
and therefore were in fact only 50% or not at all covered, but were &amp;quot;traversed&amp;quot;

- Code Conviction (my term): Most of the code in these projects (Rails applications) had
significant Hash references all of which were declared in &amp;quot;traditional&amp;quot; format hhh[:symbol].
So it was nearly impossible for the code in execution to confirm the expectation of the
existence of a hash entry as would be the case with stronger code such as &amp;quot;hhh.fetch(:symbol)&amp;quot;

- Instance variables abound: As with most of Rails code the number of instance variables
in a controller are extreme. This pattern of reference leaked into all other code as well,
making it nearly impossible with the complex code flow to ascertain proper reference
patterns that ensured the use of the instance variables, so there were numerous cases
of instance variable typos that went unnoticed for years. (edited)

- .save and .update: yes again a Rails issue, but use of these &amp;quot;weak&amp;quot; operations showed again
that although they were traversed, in many cases those method references could be removed
during mutation and the tests would still pass - a clear indication that save or update was
silently failing.

I could go on and on, but the mere traversal of a line of code in Ruby is far from an indication
of anything more than it may be &amp;quot;typed in correctly&amp;quot;.

@atodorov Hope that helps.

LOC test coverage is a place to begin - NOT a place to end.

atodorov 1:01 AM
@tjchambers: thanks for your answer. It&amp;#39;s too late for me here to read it carefully but
I&amp;#39;ll do it tomorrow and ping you back

dkubb 1:13 AM
As a practice mutation testing is less widely used. The tooling is still maturing. Depending on your
language and environment you might have widely different experiences with mutation testing

I have not watched the video, but it is conceivable that someone could try out mutation testing tools
for their language and conclude it doesn’t add very much

mbj 1:14 AM
Yeah, I recall talking with @lminozem here and we identified that the tools she used likely
show high rates of false positives / false coverage (as the tools likely do not protect against
certain types of integration errors)

dkubb 1:15 AM
IME, having done TDD for about 15+ years or so, and mutation testing for about 6 years, I think
when it is done well it can be far superior to using line coverage as a measurement of test quality

mbj 1:16 AM
Any talk pro/against mutation testing must, as the tool basis is not very homogeneous, show a non consistent result.

dkubb 1:16 AM
Like @tjchambers says though, if you have really poor line coverage you’re not going to
get as much of a benefit from mutation testing, since it’s going to be telling you what
you already know — that your project is poorly tested and lots of code is never exercised

mbj 1:19 AM
Thats a good and likely the core point. I consider that mutation testing only makes sense
when aiming for 100% (and this is to my experience not impractical).

tjchambers 1:20 AM
I don&amp;#39;t discount the fact that tool quality in any endeavor can bring pro/con judgements
based on particular outcomes

dkubb 1:20 AM
What is really interesting for people is to get to 100% line coverage, and then try mutation
testing. You think you’ve done a good job, but I guarantee mutation testing will find dozens
if not hundreds of untested cases .. even in something with 100% line coverage

To properly evaluate mutation testing, I think this process is required, because you can’t
truly understand how little line coverage gives you in comparison

tjchambers 1:22 AM
But I don&amp;#39;t need a tool to tell me that a 250 character line of conditional code that by
itself would be an oversized method AND counts more because there are fewer lines in the
overall percentage contributes to a very foggy sense of coverage.

dkubb 1:22 AM
It would not be unusual for something with 100% line coverage to undergo mutation testing
and actually find out that the tests only kill 60-70% of possible mutations

tjchambers 1:22 AM
@dkubb or less

dkubb 1:23 AM
usually much less :stuck_out_tongue:

it can be really humbling

mbj 1:23 AM
In this discussion you miss that many test suites (unless you have noop detection):
Will show false coverage.

tjchambers 1:23 AM
When I started with mutant on my own project which I developed I had 95% LOC coverage

mbj 1:23 AM
Test suites need to be fixed to comply to mutation testing invariants.

tjchambers 1:23 AM
I had 34% mutation coverage

And that was ignoring the 5% that wasn&amp;#39;t covered at all

mbj 1:24 AM
Also if the tool you compare MT with line coverage on: Is not very strong,
the improvement may not be visible.

dkubb 1:24 AM
another nice benefit is that you will become much better at enumerating all
the things you need to do when writing tests

tjchambers 1:24 AM
@dkubb or better yet - when writing code.

The way I look at it - the fewer the alive mutations the better the test,
the fewer the mutations the better the code.

dkubb 1:29 AM
yeah, you can infer a kind of cyclomatic complexity by looking at how many mutations there are

tjchambers 1:31 AM
Even without tests (not recommended) you can judge a lot from the mutations themselves.

I still am an advocate for mutations/LOC metric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see members in the community are strong supporters of mutation testing, all of them
having much more experience than I do.&lt;/p&gt;
&lt;p&gt;Please help me collect more practical examples! My goal is to
collect enough information and present the findings at
&lt;a href="https://developers.google.com/google-test-automation-conference/"&gt;GTAC 2017&lt;/a&gt;
which will be held in London.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I have written
&lt;a href="http://atodorov.org/blog/2017/04/05/mutation-testing-vs-coverage-pt-2/"&gt;Mutation testing vs. coverage, Pt.2&lt;/a&gt;
with another example.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>How to create auxiliary build jobs in Travis-CI matrix</title><link href="http://atodorov.org/blog/2016/12/16/how-to-create-auxiliary-build-jobs-in-travis-ci-matrix/" rel="alternate"></link><updated>2016-12-16T11:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-16:blog/2016/12/16/how-to-create-auxiliary-build-jobs-in-travis-ci-matrix/</id><summary type="html">&lt;p&gt;&lt;img alt="Auxiliary build job in Travis-CI" src="/images/travisci_extra_job_in_matrix.png" title="Auxiliary build job in Travis-CI" /&gt;&lt;/p&gt;
&lt;p&gt;In Travis-CI when you combine the three main configuration options of
&lt;em&gt;Runtime (language)&lt;/em&gt;, &lt;em&gt;Environment&lt;/em&gt; and &lt;em&gt;Exclusions/Inclusions&lt;/em&gt; you get a
&lt;a href="https://docs.travis-ci.com/user/customizing-the-build#Build-Matrix"&gt;build matrix&lt;/a&gt;
of all possible combinations! For example, for &lt;em&gt;django-chartit&lt;/em&gt; the matrix includes
43 build jobs, spread across various Python and Django versions. For reference
see &lt;a href="https://travis-ci.org/chartit/django-chartit/builds/181115880"&gt;Build #75&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;django-chartit&lt;/em&gt; I wanted to have an additional build job which would execute
pylint. I wanted the job to be independent because currently pylint produces lots
of errors and warnings. Having an independent job instead of integrating pylint
together with all jobs makes it easier to see if any of the functional tests failed.&lt;/p&gt;
&lt;p&gt;Using the inclusion functionality of Travis-CI I was able to define an auxiliary
build job. The trick is to provide sane environment defaults for all
build jobs (regular and auxiliary ones) so you don't have to expand your environment
section! In this case the change looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/.travis.yml b/.travis.yml&lt;/span&gt;
&lt;span class="gh"&gt;index 67f656d..9b669f9 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/.travis.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/.travis.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -2,6 +2,8 @@ after_success:&lt;/span&gt;
 - coveralls
 before_install:
 - pip install coveralls
&lt;span class="gi"&gt;+- if [ -z &amp;quot;$_COMMAND&amp;quot; ]; then export _COMMAND=coverage; fi&lt;/span&gt;
&lt;span class="gi"&gt;+- if [ -z &amp;quot;$_DJANGO&amp;quot; ]; then export _DJANGO=1.10.4; fi&lt;/span&gt;
 env:
 - !!python/unicode &amp;#39;_DJANGO=1.10&amp;#39;
 - !!python/unicode &amp;#39;_DJANGO=1.10.2&amp;#39;
&lt;span class="gu"&gt;@@ -41,6 +43,10 @@ matrix:&lt;/span&gt;
     python: 3.3
   - env: _DJANGO=1.10.4
     python: 3.3
&lt;span class="gi"&gt;+  include:&lt;/span&gt;
&lt;span class="gi"&gt;+  - env: _COMMAND=pylint&lt;/span&gt;
&lt;span class="gi"&gt;+    python: 3.5&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
 notifications:
   email:
     on_failure: change
&lt;span class="gu"&gt;@@ -50,4 +56,4 @@ python:&lt;/span&gt;
 - 3.3
 - 3.4
 - 3.5
&lt;span class="gd"&gt;-script: make coverage&lt;/span&gt;
&lt;span class="gi"&gt;+script: make $_COMMAND&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more info take a look at
&lt;a href="https://github.com/chartit/django-chartit/commit/b22eda7cd67a062f49a0f60b8ac51383e4f8c3a5"&gt;commit b22eda7&lt;/a&gt;
and &lt;a href="https://travis-ci.org/chartit/django-chartit/builds/183883813"&gt;Build #77&lt;/a&gt;. Note
Job #77.44!&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Overridden let() causes segfault with RSpec</title><link href="http://atodorov.org/blog/2016/12/04/overridden-let-causes-segfault-with-rspec/" rel="alternate"></link><updated>2016-12-04T22:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-12-04:blog/2016/12/04/overridden-let-causes-segfault-with-rspec/</id><summary type="html">&lt;p&gt;Last week &lt;a href="https://github.com/syndbg"&gt;Anton&lt;/a&gt; asked me to take a look at one of
his RSpec test suites. He was able to consistently reproduce a segfault which
looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;BUG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s-Atom"&gt;vm_call_cfunc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;cfp&lt;/span&gt; &lt;span class="s-Atom"&gt;consistency&lt;/span&gt; &lt;span class="s-Atom"&gt;error&lt;/span&gt;
&lt;span class="s-Atom"&gt;ruby&lt;/span&gt; &lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="nf"&gt;p217&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="s-Atom"&gt;revision&lt;/span&gt; &lt;span class="mi"&gt;56796&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;linux&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="s-Atom"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;Control&lt;/span&gt; &lt;span class="s-Atom"&gt;frame&lt;/span&gt; &lt;span class="s-Atom"&gt;information&lt;/span&gt; &lt;span class="s-Atom"&gt;-----------------------------------------------&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0013&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s-Atom"&gt;----&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0048&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000047&lt;/span&gt; &lt;span class="nv"&gt;CFUNC&lt;/span&gt;  &lt;span class="s-Atom"&gt;:map&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0012&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0045&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000044&lt;/span&gt; &lt;span class="nv"&gt;BLOCK&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;113&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0035&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0043&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000042&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1835&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0010&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0011&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0040&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000039&lt;/span&gt; &lt;span class="nv"&gt;BLOCK&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0009&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0018&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0037&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000036&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0008&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0022&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0033&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000032&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0007&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0025&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0028&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000027&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0006&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0085&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0023&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000022&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0005&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0026&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0016&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000015&lt;/span&gt; &lt;span class="nv"&gt;METHOD&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0004&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0025&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0012&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000011&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt;    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;gems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;rspec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;exe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;rspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0003&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s-Atom"&gt;----&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0010&lt;/span&gt; &lt;span class="nn"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;000009&lt;/span&gt; &lt;span class="nv"&gt;CFUNC&lt;/span&gt;  &lt;span class="s-Atom"&gt;:load&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0136&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0006&lt;/span&gt; &lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="s-Atom"&gt;e10&lt;/span&gt; &lt;span class="nv"&gt;EVAL&lt;/span&gt;   &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;atodorov/.rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.3.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s-Atom"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;rspec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="nn"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="nn"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0002&lt;/span&gt; &lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="nf"&gt;a0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;FINISH&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Googling for &lt;code&gt;vm_call_cfunc - cfp consistency error&lt;/code&gt; yields
&lt;a href="https://bugs.ruby-lang.org/issues/10460"&gt;Ruby #10460&lt;/a&gt;. Comments on the bug and
particularly this one point towards the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Ruby is trying to be nice about reporting the error; but in the end,
&amp;gt; your code is still broken if it overflows stack.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Somewhere in the test suite was a piece of code that was overflowing the stack.
It was somewhere along the lines of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#active_client_for_user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;matching an existing user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it_behaves_like&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manager authentication&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;include_examples&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;active client for user with existing user&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Considering the examples in the bug I started looking for patterns where a variable
was defined and later redefined, possibly circling back to the previous definition.
Expanding the shared examples by hand transformed the code into&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#active_client_for_user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;matching an existing user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:api_user_authentication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user_authentication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;api_user_authentication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with an `active_assigned_client`&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Line 5. overrode line 3. When line 4. was executed first because of lazy execution
and the call execution path became: 4-5-4-5-4-5 ... &lt;strong&gt;NOTE:&lt;/strong&gt; I think we need a
warning about that in RuboCop, see
&lt;a href="https://github.com/bbatsov/rubocop/issues/3769"&gt;RuboCop #3769&lt;/a&gt;.
The fix however is a no brainer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;-  let(:user) { create(:user, :manager) }&lt;/span&gt;
&lt;span class="gd"&gt;-  let!(:api_user_authentication) { create(:user_authentication, user: user) }&lt;/span&gt;
&lt;span class="gi"&gt;+  let(:manager) { create(:user, :manager) }&lt;/span&gt;
&lt;span class="gi"&gt;+  let!(:api_user_authentication) { create(:user_authentication, user: manager) }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for reading and happy testing.&lt;/p&gt;</summary><category term="Ruby"></category><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Highlights from ISTA and GTAC 2016</title><link href="http://atodorov.org/blog/2016/11/30/highlights-from-ista-and-gtac-2016/" rel="alternate"></link><updated>2016-11-30T17:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-11-30:blog/2016/11/30/highlights-from-ista-and-gtac-2016/</id><summary type="html">&lt;p&gt;&lt;img alt="ISTA 2016" src="/images/ista2016.jpg" title="ISTA 2016" /&gt;&lt;/p&gt;
&lt;p&gt;Another two weeks have passed and I'm blogging about another 2 conferences.
This year both
&lt;a href="https://istacon.org/"&gt;Innovations in Software Technologies and Automation&lt;/a&gt; and
&lt;a href="https://developers.google.com/google-test-automation-conference/2016/"&gt;Google Test Automation Conference&lt;/a&gt;
happened on the same day. I was attending ISTA in Sofia during the day and
watching the live stream of GTAC during the evenings. Here are some of the things
that reflected on me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can I build my software in order to make this a perfect day for the user ?&lt;/li&gt;
&lt;li&gt;People are not the problem which causes bad software to exist. When designing
software focus on what people need not on what technology is forcing them to do;&lt;/li&gt;
&lt;li&gt;You need to have blind trust in the people you work with because all the times
projects look like they are not going to work until the very end!&lt;/li&gt;
&lt;li&gt;It's good to have diverse set of characters in the company and not homogenize people;&lt;/li&gt;
&lt;li&gt;Team performance grows over time. Effective teams minimize time waste
during bad periods. They (have and) extract value from conflicts!&lt;/li&gt;
&lt;li&gt;One-on-one meetings are usually like status reports which is bad. Both parties
should bring their own issues to the table;&lt;/li&gt;
&lt;li&gt;To grow an effective team members need to do things together. For example
pair programming, writing test scenarios, etc;&lt;/li&gt;
&lt;li&gt;When teams don't take actions after retrospective meetings it is usually a 
sign of missing foundational trust;&lt;/li&gt;
&lt;li&gt;QA engineers need to be present at every step of the software development
life-cycle! This is something I teach my students and have been confirmed by
many friends in the industry;&lt;/li&gt;
&lt;li&gt;Agile is all about data, even when it comes to testing and quality. We need to
decompose and measure iteratively;&lt;/li&gt;
&lt;li&gt;Agile is also about really skillful people. One way to boost your skills is to
adopt the T-shaped specialist model;&lt;/li&gt;
&lt;li&gt;In agile iterative work and continuous delivery is king so QA engineers need to focus
even more on visualization (I will also add documentation), refactoring and code reviews;&lt;/li&gt;
&lt;li&gt;Agile teams need to give opportunities to team members for taking risk and taking
ownership of their actions in the gray zone (e.g. actions which isn't clear who should
be doing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the brave new world of micro services end to end testing is no more! We test each level
in isolation but keep stable contracts/APIs between levels. That way we can reduce
the test burden and still guarantee an acceptable level of risk. This change in
software architecture (monolithic vs. micro) leads to change in technologies (one framework/language
vs. what's best for the task) which in turn leads to changes in testing approach and
testing tools. This ultimately leads to changing people on the team because they now
need different skills than when they were hired! This circles back to the T-shaped
specialist model and the fact that QA should be integrated in every step of the way!
Thanks to Denitsa Evtimova and Lyudmila Labova for this wisdom and the quote pictured
above.&lt;/p&gt;
&lt;p&gt;Aneta Petkova talked about monitoring of test results which is a topic very close to my work.
Imagine you have your automated test suite but still get failures occasionally. Are these
bugs or something else broke ? If they are bugs and you are waiting for them to be fixed
do you execute the tests against the still broken build or wait ? If you do, what additional info
do you get from these executions vs. how much time do you spend figuring out
"oh, that's still not fixed or geez, here's another hidden bug in the code" ?&lt;/p&gt;
&lt;p&gt;Her team has modified their test execution framework (what I'd usually call a test runner
or even test lab) to have knowledge about issues in JIRA and skip some tests
when no meaningful information can be extracted from them. I have to point out that this
approach may require a lot of maintenance in environments where you have failures due to
infrastructure issues. This idea connects very nicely
with the general idea behind this year's GTAC - don't run tests if you don't need to aka
smart test execution!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2yN53k9jz3U#t=2h54m0s"&gt;Boris Prikhodskiy&lt;/a&gt;
shared a very simple rule. Don't execute tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which have 100 % pass rate;&lt;/li&gt;
&lt;li&gt;during the last month;&lt;/li&gt;
&lt;li&gt;and have been executed at least 100 times before that!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what Unity does for their numerous topic branches and reduces test time
with 60-70 percent. All of the test suite is still executed against their trunk branch
and PR merge queue branches!&lt;/p&gt;
&lt;p&gt;At GTAC there were several presentations about speeding up test execution time.
&lt;a href="https://www.youtube.com/watch?v=hbocBqOpuAo#t=3h18m25s"&gt;Emanuil Slavov&lt;/a&gt; was very practical
but the most important thing he said was that a fast test suite is the result of many
conscious actions which introduced small improvements over time. His team had assigned
themselves the task to iteratively improve their test suite performance and at every step
of the way they analyzed the existing bottlenecks and experimented with possible solutions.&lt;/p&gt;
&lt;p&gt;The steps in particular are (on a single machine):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute tests in dedicated environment;&lt;/li&gt;
&lt;li&gt;Start with empty database, not used by anything else; This also leads to
adjustments in your test suite architecture and DB setup procedures;&lt;/li&gt;
&lt;li&gt;Simulate and stub external dependencies like 3rd party services;&lt;/li&gt;
&lt;li&gt;Move to containers but beware of slow disk I/O;&lt;/li&gt;
&lt;li&gt;Run database in memory not on disk because it is a temporary DB anyway;&lt;/li&gt;
&lt;li&gt;Don't clean test data, just trash the entire DB once you're done;&lt;/li&gt;
&lt;li&gt;Execute tests in parallel which should be the last thing to do!&lt;/li&gt;
&lt;li&gt;Equalize workload between parallel threads for optimal performance;&lt;/li&gt;
&lt;li&gt;Upgrade the hardware (RAM, CPU) aka vertical scaling;&lt;/li&gt;
&lt;li&gt;Add horizontal scaling (probably with a messaging layer);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2yN53k9jz3U#t=6h38m7s"&gt;John Micco and Atif Memon&lt;/a&gt;
talked about flaky tests at Google:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;84% of the transitions from PASS to FAIL are flakes;&lt;/li&gt;
&lt;li&gt;Almost 16% of their 3.5 million tests have some level of flakiness;&lt;/li&gt;
&lt;li&gt;Flaky failures frequently block and delay releases;&lt;/li&gt;
&lt;li&gt;Google spends between 2% and 16% of their CI compute resources
re-running flaky tests;&lt;/li&gt;
&lt;li&gt;Flakiness insertion speed is comparable to flakiness removal speed!&lt;/li&gt;
&lt;li&gt;The optimal setting is 2 persons modifying the same source file at the same time.
This leads to minimal chance of breaking stuff;&lt;/li&gt;
&lt;li&gt;Fix or delete flaky tests because you don't get meaningful value out of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So Google want to stop a test execution before it is executed if historical
data shows that the test has attributes of flakiness. The research they talk
about utilizes tons of data collected from Google's CI environment which was
the most interesting fact for me. Indeed if we use data to decide which features
to build for our customers then why not use data to govern the process of testing?
In addition to the video you should read John's post
&lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;Flaky Tests at Google and How We Mitigate Them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the end I'd like to finish with 
Rahul Gopinath's
&lt;a href="https://www.youtube.com/watch?v=hbocBqOpuAo#t=4h57m30s"&gt;Code Coverage is a Strong Predictor of Test suite Effectiveness in the Real World&lt;/a&gt;.
He basically said that code coverage metrics as we know them today are still
the best practical indicator of how good a test suite is. He argues that mutation testing is slow
and only provides additional 4% to a well designed test suite. This is absolutely the opposite of
what Laura Inozemtseva presented last year in her
&lt;a href="https://www.youtube.com/watch?v=sAfROROGujU&amp;amp;list=PLSIUOFhnxEiCWGsN9t5A-XOhRbmz54IS1&amp;amp;index=25"&gt;Coverage is Not Strongly Correlated with Test Suite Effectiveness&lt;/a&gt;
lightning talk. Rahul also made a point about sample size in the two research papers
and I had the impression he's saying Laura didn't do a proper academic research.&lt;/p&gt;
&lt;p&gt;I'm a heavy contributor to Cosmic Ray, the mutation testing tool for Python and also use
mutation testing in my daily job so this is a very interesting topic indeed. I've asked
fellow tool authors to have a look at both presentations and share their opinions.
I also have an idea about a practical experiment to see if full branch coverage and
full mutation coverage will be able to find a known bug in a piece of software
I wrote. I will be writing about this experiment next week so stay tuned.&lt;/p&gt;
&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;</summary><category term="events"></category><category term="QA"></category><category term="fedora.planet"></category></entry><entry><title>Women In Open Source</title><link href="http://atodorov.org/blog/2016/11/21/women-in-open-source/" rel="alternate"></link><updated>2016-11-21T02:48:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:atodorov.org,2016-11-21:blog/2016/11/21/women-in-open-source/</id><summary type="html">&lt;p&gt;&lt;img alt="OpenFest 2016" src="/images/openfest2016.jpg" title="OpenFest 2016" /&gt;&lt;/p&gt;
&lt;p&gt;It's been 2 weeks after &lt;a href="http://openfest.org"&gt;OpenFest 2016&lt;/a&gt; and I've promised
to blog about what happened during the &lt;em&gt;Women in Open Source&lt;/em&gt; presentation, which
is the only single talk I did attend.&lt;/p&gt;
&lt;p&gt;The presenters were Jona Azizaj, whom I met at FOSDEM
&lt;a href="http://atodorov.org/blog/2016/02/02/fosdem-2016-report/"&gt;earlier this year&lt;/a&gt;,
Suela Palushi and Kristi Progri, all 3 from Albania. I've went to OpenFest
specifically to meet them and listen to their presentation.&lt;/p&gt;
&lt;p&gt;They started by explaining
their background and telling us more about their respective communities,
&lt;a href="https://fedoraproject.org/wiki/Women"&gt;Fedora Women&lt;/a&gt;,
&lt;a href="http://womoz.org"&gt;WoMoz&lt;/a&gt;,
&lt;a href="https://www.gnome.org/outreachy/"&gt;GNOME Outreach&lt;/a&gt; and the 
&lt;a href="https://openlabs.cc/"&gt;Open Labs&lt;/a&gt; hackerspace in Tirana.
The girls gave some stats how many women there are in the larger FOSS
community and what some newcomer's first impressions could be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Did you know that in 2002 1.1% of all FOSS participants were female, while in
2013 that was 11% ? A 10x increase but of them only 1.5% are developers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The presentation was a nice overview of different opportunities
to get involved in open source geared towards women. I've specifically asked and
the girls responded how they first came to join open source. In general they've
had a good and welcoming community around them which made it natural to
join and thrive.&lt;/p&gt;
&lt;p&gt;Now comes the sad part. Instead of welcoming and supporting these girls that they've
stood up to talk about their experiences the audience did the opposite. In particular
&lt;a href="http://plushiegames.com/"&gt;Maya Milusheva from Plushie Games&lt;/a&gt; made a very passionate claim
against the topic women in tech. It went like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am a woman&lt;/li&gt;
&lt;li&gt;I am a good developer&lt;/li&gt;
&lt;li&gt;I am a mother&lt;/li&gt;
&lt;li&gt;I am a CEO of a successful IT company&lt;/li&gt;
&lt;li&gt;when I hire I want the best people for my company and they are men&lt;/li&gt;
&lt;li&gt;women simply don't have the required tech skills/level of expertise&lt;/li&gt;
&lt;li&gt;the whole talk about women in open source/diversity is bullshit&lt;/li&gt;
&lt;li&gt;girls need to sit down on their asses and read more, code more, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In terms of successfullness I think I can compare to Maya. I also have a small
child, which I regularly take to conferences with me (the badges above).
I also have an IT company
which generates a comparable amount of income. I also want to hire the best employees
for any given project I'm working on. Sometimes it's happened that to be a woman,
sometimes not. The point here however was not about hiring more women per se. It
was about giving opportunities in the communities and letting people grow for themselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
Yes, she has a point but there's something WRONG in coming to listen to a presenter
just to tell them they are full of shit! It's
very arrogant shouting around and arguing a point about hiring when in fact the
entire presentation was not about hiring!
It is totally unacceptable,
The NY Times writing about apps you develop and behaving like an asshole at public events at
the same time!
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've been there, the crowd telling me I'm full of shit when I've been presenting about
new technologies. I've been there being told that my ideas will not work in this or that
way, while in fact the very idea of trying and considering a completely different
technological approach was what counted. And finally I've been there years later when
the same ideas and technologies have become mainstream and the same crowd was now talking
about them!&lt;/p&gt;
&lt;p&gt;After Maya there was another person who grabbed the microphone and continued to talk nonsense.
Unfortunately he didn't state his name and I don't know the guy in person. What he said was
along the lines of &lt;em&gt;little boys play with robots, little girls play with dolls. They like it
this way and that's why girls don't get involved in the technical field. Also if a girl
played with robots she will be called a tomboy and generally have a negative attitude
towards her&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It's absolutely clear this guy has no idea what he's talking about.
Everyone who has small children around them
will agree that they are born with equal mental capacity. It is up to the
environment, parents, teachers, etc to shape this capacity in a positive way. I've
seen children who taught themselves speaking English from YouTube and children the
same age barely speaking Bulgarian. I've seen children who are curious about the world
and how it works and children who can't wipe their own noses. It's not because they
like it that way, it's because of their parents and the environment they live in.&lt;/p&gt;
&lt;p&gt;Finally I'd like to respond to this guy (I was specifically motioned at the conference
not to respond) with this&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
I have a 5 year old girl. She likes robots as much as she likes dolls. She works with Linux
and is lucky enough to have one of the two OLPCs laptops in Bulgaria. She plays
SuperTux and has already found a bug in it (I've reported it). She's been to several
Linux and IT conferences as you can see from the picture above.
She likes being taken to hackathons and learning about inspiring stuff that students are doing.&lt;/p&gt;
&lt;p&gt;Are you telling me that because we have the wrong idea women can't be good at technology
she can't become a successful engineer ? Are you telling me to basically scratch the next 10 years
of her life and tell her she can't become what she wants ? Because if you do I say FUCK OFF!&lt;/p&gt;
&lt;p&gt;Even I as a parent don't have the power to tell my child what they can do or not do,
what they can accomplish or not. My job is to show them the various possibilities that
exist and guide and support them along they way they want to go! This is what we as society
also need to do for everyone else!
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To wrap up I will tell you about a psychological experiment we devised with Jona and Suela.
I've proposed
to find a male and female student in Tirana and have them pose online as somebody from the opposite
sex, fake accounts and all. They've proposed having the same person both act as male or female
for the purposes of evening out the tech skills difference.
The goal is to see how does the tech community react to their contributions and try to measure
how much does their gender being known affect their performance! I hope the girls will
find a way to perform this experiment together with the university Psychology department
and share the results with us.&lt;/p&gt;
&lt;p&gt;Btw I will be visiting
&lt;a href="http://oscal.openlabs.cc/"&gt;OSCAL'17&lt;/a&gt; to check up on that so see you in Albania!&lt;/p&gt;</summary><category term="events"></category><category term="fedora.planet"></category></entry></feed>