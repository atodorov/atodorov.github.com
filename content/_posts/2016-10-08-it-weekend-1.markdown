Title: What I Learned from IT Weekend
Headline: Pt.1 functional testing, Oct 1-2
date: 2016-10-08 13:48
comments: true
Tags: events, QA
og_image: images/itweekend.png
twitter_image: images/itweekend.png

![IT Weekend](/images/itweekend.png "IT Weekend")

Last week I attended the first [IT Weekend](http://it-weekend.com) in Bulgaria.
It's like a training camp for athletes but for QA engineers. There were 20 people
attending and the format was very friendly and relaxed. The group had members with
various levels of experience and technical skills, also different areas they work in.
All presentations are on
[YouTube](https://www.youtube.com/watch?v=iRA3tRwclRU&list=PLFjlI7p-h1hxBP3cIjEqePSeoBDHud5Db&index=1).
Here's a brief of what happened and what I learned.

I had the honor to present in the first slot and gave a quick introduction
to mutation testing. This was my first time giving this talk and I'm not entirely
happy with how I've presented it. Also mutation testing is touching a lot on unit tests,
programming and source code which in some organizations goes to the devel department.
I think mutation testing is harder to understand from people not familiar with it
than I initially thought. I'm taking note to improve the way I present this topic
to the public.

Yavor Donev gave a good overview of Appium and how to use it on Android.
The most important question for me was "*Is it possible to utilize the same test suite
on Android and iOS, given that the environments are different*". With this I mean
regardless of how much we try to make the same (native) app on both platforms
it will end up differently because the platforms are essentially different. For
example there is a different number of physical buttons available.

If we assume that both iOS and Android apps follow the same design and use
similar workflow then it should be possible to create a test suite which is
platform aware and account for the minor differences. We're also adding
another layer of complexity by introducing the requirement that both apps stay
in sync with each other and account for the quirks of the foreign platform.
Depending on your apps and goals this may not be an easy task!

The one thing I didn't like about Appium is that upstream doesn't care much about
version compatibility and they tend to break and change stuff arbitrary between
releases. That said if it works, don't update it or otherwise be extremely
careful.

I also had a nice chat with Yavor on the topic of career change, learning to
program and working with people who have very little coding experience. His
approach is to develop a higher level test framework on top of Appium which
his team mates can use more easily.

Aneta Petkova's *Selenium Grid in Unix Environment* is a bit out of my domain.
However I took one important lesson: regardless of how great your tools are
there are minor details which can make or break your day. In her case these
are the physical location of the tests (e.g. which Selenium node runs them) and
access to shared resources. Turns out WebDriver doesn't give you
this information directly and you need to go through hoops to get it. Her
solution was to place the test code on the Grid Hub and provide a shared file system.

The bigger lesson is: whenever you have to design an automated test environment
(aka test lab) make sure to evaluate your needs beforehand.


The last talk was a guest appearance by Denitsa Evtimova. She is a QA architect
with 16 years of experience and presented the QA strategy at Paysafe group.
They have a large monolithic system (legacy code) and have adopted a pyramid
style approach to testing. Whenever possible tests are brought down to the lowest
level (e.g. unit tests) and not repeated on the higher levels. At the top
stand manual testing. Teams are small: 3-4 developers and 2-3 QAs. It is the team
responsibility to make sure tests are implemented at the lowest possible level.
The process is not strictly enforced and the company relies more on self
governance in this aspect. Also everyone on the team can contribute
additional tests whenever they see something missing.
Test (writing) tasks are all logged in JIRA. They are also small so that
everything can be completed in the same day.


The second day was more informal. We did a quick exploratory testing
exercise and shared opinions on different test tools. Then the group had
a discussion about soft skills and how QA engineers can change the perception
of developers about the QA profession (especially in teams where there are many
manual testers). The key points are:

* Criticize the software, not the person, e.g. don't blame the person directly;
* Communicate with concrete facts and data, not emotions and perceptions;
* Jokes of the type "how many QA engineers are needed to screw a light bulb"
are a problem because they lead to underestimation of the job role;
* Sometimes it is not quite clear (to others) how the QA role contributes to
the development of the product and the organization;
* For a QA it is important to be able to give a non-biased opinion and
observations on what is happening with the product/process;
* A QA person needs to be very calm. They have to be able to listen to
everybody (especially developers) and accept their point of view but at
the same time also communicate their own point of view.
* It is important
to sit together with developers and observe the problem, brainstorm and
propose possible solutions. This also creates a feedback loop where the
developer feels empowered because he's part of the process identifying
the problem and proposing the best solution;
* In agile teams it is a good idea to rotate people between developer and
QA positions. This will help them better understand the job of others,
acquire new skills and also bring fresh thinking to the team;
* Quality Assurance is an ungrateful job and only people with very calm and methodical
thinking (to follow through and write all possible scenarios) are able to excel
in this field. On the other hand developer usually think about the happy path
scenarios and strive to make their code work as best as they can;
* By rotating job roles within the team developers
will quickly find out that testing is not their field and gain respect
towards their QA peers;
* US managers have the habit of telling "good job" to everyone, even for
small and routine tasks. In Bulgaria (and maybe elsewhere) we're not used
to this. Instead we're used of being scolded when we do something wrong.
If everything is good then we don't receive any recognition;
* Using the American "good job" is actually a good thing. Team mates will
start performing better over time because they will feel their work is
valued and not meaningless, they will feel recognized which will boost
morale and productivity.

Thanks for reading and happy testing!
